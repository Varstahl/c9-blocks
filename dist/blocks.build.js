/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 206);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js

;(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate (y) {
        var date;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            var args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays (ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        var weekdays = isArray(this._weekdays) ? this._weekdays :
            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
            : (m) ? weekdays[m.day()] : weekdays;
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                __webpack_require__(/*! ./locale */ 390)("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    var MS_PER_SECOND = 1000;
    var MS_PER_MINUTE = 60 * MS_PER_SECOND;
    var MS_PER_HOUR = 60 * MS_PER_MINUTE;
    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf (units) {
        var time;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
            case 'isoWeek':
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':   return months;
                case 'quarter': return months / 3;
                case 'year':    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asQuarters     = makeAs('Q');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asQuarters     = asQuarters;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.24.0';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 34)(module)))

/***/ }),
/* 1 */
/*!******************************************!*\
  !*** ./node_modules/classnames/index.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames () {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg) && arg.length) {
				var inner = classNames.apply(null, arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (argType === 'object') {
				for (var key in arg) {
					if (hasOwn.call(arg, key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
		window.classNames = classNames;
	}
}());


/***/ }),
/* 2 */
/*!************************!*\
  !*** external "React" ***!
  \************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 3 */
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ 15);

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),
/* 4 */
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),
/* 5 */
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ 3);

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),
/* 6 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ 5),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ 26),
    objectToString = __webpack_require__(/*! ./_objectToString */ 27);

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),
/* 7 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),
/* 8 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ 318),
    getValue = __webpack_require__(/*! ./_getValue */ 321);

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),
/* 9 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),
/* 10 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ 6),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 7);

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),
/* 11 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),
/* 12 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(/*! ./_baseToString */ 39);

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),
/* 13 */
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(/*! ./isSymbol */ 10);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),
/* 14 */
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], "{").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      // eslint-disable-next-line prefer-destructuring
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = modules[_i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),
/* 15 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/global.js */ 25)))

/***/ }),
/* 16 */
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var stylesInDom = {};

var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

function listToStyles(list, options) {
  var styles = [];
  var newStyles = {};

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var css = item[1];
    var media = item[2];
    var sourceMap = item[3];
    var part = {
      css: css,
      media: media,
      sourceMap: sourceMap
    };

    if (!newStyles[id]) {
      styles.push(newStyles[id] = {
        id: id,
        parts: [part]
      });
    } else {
      newStyles[id].parts.push(part);
    }
  }

  return styles;
}

function addStylesToDom(styles, options) {
  for (var i = 0; i < styles.length; i++) {
    var item = styles[i];
    var domStyle = stylesInDom[item.id];
    var j = 0;

    if (domStyle) {
      domStyle.refs++;

      for (; j < domStyle.parts.length; j++) {
        domStyle.parts[j](item.parts[j]);
      }

      for (; j < item.parts.length; j++) {
        domStyle.parts.push(addStyle(item.parts[j], options));
      }
    } else {
      var parts = [];

      for (; j < item.parts.length; j++) {
        parts.push(addStyle(item.parts[j], options));
      }

      stylesInDom[item.id] = {
        id: item.id,
        refs: 1,
        parts: parts
      };
    }
  }
}

function insertStyleElement(options) {
  var style = document.createElement('style');

  if (typeof options.attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : null;

    if (nonce) {
      options.attributes.nonce = nonce;
    }
  }

  Object.keys(options.attributes).forEach(function (key) {
    style.setAttribute(key, options.attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  }

  if (sourceMap && btoa) {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {};
  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  var styles = listToStyles(list, options);
  addStylesToDom(styles, options);
  return function update(newList) {
    var mayRemove = [];

    for (var i = 0; i < styles.length; i++) {
      var item = styles[i];
      var domStyle = stylesInDom[item.id];

      if (domStyle) {
        domStyle.refs--;
        mayRemove.push(domStyle);
      }
    }

    if (newList) {
      var newStyles = listToStyles(newList, options);
      addStylesToDom(newStyles, options);
    }

    for (var _i = 0; _i < mayRemove.length; _i++) {
      var _domStyle = mayRemove[_i];

      if (_domStyle.refs === 0) {
        for (var j = 0; j < _domStyle.parts.length; j++) {
          _domStyle.parts[j]();
        }

        delete stylesInDom[_domStyle.id];
      }
    }
  };
};

/***/ }),
/* 17 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ 308),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ 309),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ 310),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ 311),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ 312);

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),
/* 18 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ 30);

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),
/* 19 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ 8);

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),
/* 20 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ 330);

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),
/* 21 */
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ 54),
    isLength = __webpack_require__(/*! ./isLength */ 36);

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),
/* 22 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ 4),
    isKey = __webpack_require__(/*! ./_isKey */ 38),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ 361),
    toString = __webpack_require__(/*! ./toString */ 12);

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),
/* 23 */
/*!**************************************!*\
  !*** ./node_modules/memize/index.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {module.exports = function memize( fn, options ) {
	var size = 0,
		maxSize, head, tail;

	if ( options && options.maxSize ) {
		maxSize = options.maxSize;
	}

	function memoized( /* ...args */ ) {
		var node = head,
			len = arguments.length,
			args, i;

		searchCache: while ( node ) {
			// Perform a shallow equality test to confirm that whether the node
			// under test is a candidate for the arguments passed. Two arrays
			// are shallowly equal if their length matches and each entry is
			// strictly equal between the two sets. Avoid abstracting to a
			// function which could incur an arguments leaking deoptimization.

			// Check whether node arguments match arguments length
			if ( node.args.length !== arguments.length ) {
				node = node.next;
				continue;
			}

			// Check whether node arguments match arguments values
			for ( i = 0; i < len; i++ ) {
				if ( node.args[ i ] !== arguments[ i ] ) {
					node = node.next;
					continue searchCache;
				}
			}

			// At this point we can assume we've found a match

			// Surface matched node to head if not already
			if ( node !== head ) {
				// As tail, shift to previous. Must only shift if not also
				// head, since if both head and tail, there is no previous.
				if ( node === tail ) {
					tail = node.prev;
				}

				// Adjust siblings to point to each other. If node was tail,
				// this also handles new tail's empty `next` assignment.
				node.prev.next = node.next;
				if ( node.next ) {
					node.next.prev = node.prev;
				}

				node.next = head;
				node.prev = null;
				head.prev = node;
				head = node;
			}

			// Return immediately
			return node.val;
		}

		// No cached value found. Continue to insertion phase:

		// Create a copy of arguments (avoid leaking deoptimization)
		args = new Array( len );
		for ( i = 0; i < len; i++ ) {
			args[ i ] = arguments[ i ];
		}

		node = {
			args: args,

			// Generate the result from original function
			val: fn.apply( null, args )
		};

		// Don't need to check whether node is already head, since it would
		// have been returned above already if it was

		// Shift existing head down list
		if ( head ) {
			head.prev = node;
			node.next = head;
		} else {
			// If no head, follows that there's no tail (at initial or reset)
			tail = node;
		}

		// Trim tail if we're reached max size and are pending cache insertion
		if ( size === maxSize ) {
			tail = tail.prev;
			tail.next = null;
		} else {
			size++;
		}

		head = node;

		return node.val;
	}

	memoized.clear = function() {
		head = null;
		tail = null;
		size = 0;
	};

	if ( process.env.NODE_ENV === 'test' ) {
		// Cache is not exposed in the public API, but used in tests to ensure
		// expected list progression
		memoized.getCache = function() {
			return [ head, tail, size ];
		};
	}

	return memoized;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../process/browser.js */ 239)))

/***/ }),
/* 24 */
/*!**************************************!*\
  !*** ./node_modules/lodash/times.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ 46),
    castFunction = __webpack_require__(/*! ./_castFunction */ 240),
    toInteger = __webpack_require__(/*! ./toInteger */ 241);

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */
function times(n, iteratee) {
  n = toInteger(n);
  if (n < 1 || n > MAX_SAFE_INTEGER) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH,
      length = nativeMin(n, MAX_ARRAY_LENGTH);

  iteratee = castFunction(iteratee);
  n -= MAX_ARRAY_LENGTH;

  var result = baseTimes(length, iteratee);
  while (++index < n) {
    iteratee(index);
  }
  return result;
}

module.exports = times;


/***/ }),
/* 25 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 26 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ 5);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),
/* 27 */
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),
/* 28 */
/*!***********************************************!*\
  !*** ./assets/c9-vertical-alignment-icons.js ***!
  \***********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _wp$components = wp.components,
    G = _wp$components.G,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG,
    Rect = _wp$components.Rect;


var icons = {
	top: wp.element.createElement(
		SVG,
		{
			version: "1.1",
			id: "Layer_1",
			xmlns: "http://www.w3.org/2000/svg",
			x: "0px",
			y: "0px",
			viewBox: "0 0 20 20",
			style: { enableBackground: "new 0 0 20 20;" }
		},
		wp.element.createElement(
			"style",
			{ type: "text/css" },
			"\n   .st0{opacity:0.2;enable-background:new    ;}\n   .st1{fill:none;}\n   .st2{fill:none;stroke:#FFFFFF;stroke-miterlimit:10;}\n   .st3{fill:none;stroke:#231F20;stroke-width:0.5;stroke-miterlimit:10;}"
		),
		wp.element.createElement(Path, { "class": "st0", d: "M0,20h20V0H0V20z" }),
		wp.element.createElement(
			G,
			null,
			wp.element.createElement(Rect, { y: "-4.9", "class": "st1", width: "20", height: "20" }),
			wp.element.createElement(
				G,
				null,
				wp.element.createElement(Path, { d: "M0.9,1.7V9h18.2V1.7H0.9z" })
			),
			wp.element.createElement("line", { className: "st2", x1: "18.2", y1: "7.3", x2: "1.9", y2: "7.3" }),
			wp.element.createElement("line", { className: "st2", x1: "18.2", y1: "5.3", x2: "1.9", y2: "5.3" }),
			wp.element.createElement("line", { className: "st2", x1: "18.2", y1: "3.3", x2: "1.9", y2: "3.3" })
		),
		wp.element.createElement(
			G,
			{ id: "arrow" },
			wp.element.createElement(
				G,
				null,
				wp.element.createElement("line", { className: "st3", x1: "10", y1: "15.5", x2: "10", y2: "11.3" }),
				wp.element.createElement("line", { className: "st3", x1: "8.5", y1: "12.6", x2: "10.1", y2: "10.7" }),
				wp.element.createElement("line", { className: "st3", x1: "11.5", y1: "12.6", x2: "9.9", y2: "10.7" })
			)
		)
	),
	center: wp.element.createElement(
		SVG,
		{
			version: "1.1",
			xmlns: "http://www.w3.org/2000/svg",
			x: "0px",
			y: "0px",
			viewBox: "0 0 20 20",
			style: { enableBackground: "new 0 0 20 20;" }
		},
		wp.element.createElement(
			"style",
			{ type: "text/css" },
			"\n   .st0{fill:none;}\n   .st1{opacity:0.2;}\n   .st2{fill:#FFFFFF;stroke:#FFFFFF;stroke-miterlimit:10;}\n   .st3{fill:none;stroke:#231F20;stroke-width:0.5;stroke-miterlimit:10;}"
		),
		wp.element.createElement(
			G,
			{ id: "Layer_1" },
			wp.element.createElement(Rect, { "class": "st0", width: "20", heiGht: "20" }),
			wp.element.createElement(Path, { "class": "st1", d: "M0,20h20V0H0V20z" }),
			wp.element.createElement(
				G,
				null,
				wp.element.createElement(Path, { d: "M19.1,13.4V6.1H0.9v7.3H19.1z" })
			),
			wp.element.createElement("line", { className: "st2", x1: "1.8", y1: "7.8", x2: "18.1", y2: "7.8" }),
			wp.element.createElement("line", { className: "st2", x1: "1.8", y1: "9.8", x2: "18.1", y2: "9.8" }),
			wp.element.createElement("line", { className: "st2", x1: "1.8", y1: "11.8", x2: "18.1", y2: "11.8" })
		),
		wp.element.createElement(
			G,
			{ id: "arrow" },
			wp.element.createElement(
				G,
				null,
				wp.element.createElement("line", { className: "st3", x1: "10", y1: "1", x2: "10", y2: "4.3" }),
				wp.element.createElement("line", { className: "st3", x1: "11.3", y1: "3.3", x2: "9.9", y2: "4.7" }),
				wp.element.createElement("line", { className: "st3", x1: "8.8", y1: "3.3", x2: "10.2", y2: "4.7" })
			),
			wp.element.createElement(
				G,
				null,
				wp.element.createElement("line", { className: "st3", x1: "10", y1: "19.2", x2: "10", y2: "15.9" }),
				wp.element.createElement("line", { className: "st3", x1: "8.8", y1: "16.9", x2: "10.2", y2: "15.5" }),
				wp.element.createElement("line", { className: "st3", x1: "11.3", y1: "16.9", x2: "9.9", y2: "15.5" })
			)
		)
	),
	bottom: wp.element.createElement(
		SVG,
		{
			version: "1.1",
			id: "Layer_1",
			xmlns: "http://www.w3.org/2000/svg",
			x: "0px",
			y: "0px",
			viewBox: "0 0 20 20",
			style: { enableBackground: "new 0 0 20 20;" }
		},
		wp.element.createElement(
			"style",
			{ type: "text/css" },
			"\n   .st0{opacity:0.2;enable-background:new    ;}\n   .st1{fill:none;}\n   .st2{fill:none;stroke:#FFFFFF;stroke-miterlimit:10;}\n   .st3{fill:none;stroke:#231F20;stroke-width:0.5;stroke-miterlimit:10;}"
		),
		wp.element.createElement(Path, { "class": "st0", d: "M0,20h20V0H0V20z" }),
		wp.element.createElement(
			G,
			null,
			wp.element.createElement(Rect, { y: "5.6", "class": "st1", width: "20", height: "20" }),
			wp.element.createElement(
				G,
				null,
				wp.element.createElement("path", { d: "M19.1,19v-7.3H0.9V19H19.1z" })
			),
			wp.element.createElement("line", { className: "st2", x1: "1.8", y1: "13.4", x2: "18.1", y2: "13.4" }),
			wp.element.createElement("line", { className: "st2", x1: "1.8", y1: "15.4", x2: "18.1", y2: "15.4" }),
			wp.element.createElement("line", { className: "st2", x1: "1.8", y1: "17.4", x2: "18.1", y2: "17.4" })
		),
		wp.element.createElement(
			G,
			{ id: "arrow" },
			wp.element.createElement(
				G,
				null,
				wp.element.createElement("line", { className: "st3", x1: "10", y1: "4.2", x2: "10", y2: "8.4" }),
				wp.element.createElement("line", { className: "st3", x1: "11.5", y1: "7.2", x2: "9.9", y2: "9" }),
				wp.element.createElement("line", { className: "st3", x1: "8.5", y1: "7.2", x2: "10.1", y2: "9" })
			)
		)
	)
};

/* harmony default export */ __webpack_exports__["a"] = (icons);

/***/ }),
/* 29 */
/*!************************************!*\
  !*** ./node_modules/lodash/map.js ***!
  \************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ 11),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 52),
    baseMap = __webpack_require__(/*! ./_baseMap */ 370),
    isArray = __webpack_require__(/*! ./isArray */ 4);

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;


/***/ }),
/* 30 */
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),
/* 31 */
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ 8),
    root = __webpack_require__(/*! ./_root */ 3);

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),
/* 32 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ 322),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ 329),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ 331),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ 332),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ 333);

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),
/* 33 */
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ 62),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ 352),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ 21);

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),
/* 34 */
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 35 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),
/* 36 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),
/* 37 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ 22),
    toKey = __webpack_require__(/*! ./_toKey */ 13);

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),
/* 38 */
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ 4),
    isSymbol = __webpack_require__(/*! ./isSymbol */ 10);

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),
/* 39 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ 5),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ 11),
    isArray = __webpack_require__(/*! ./isArray */ 4),
    isSymbol = __webpack_require__(/*! ./isSymbol */ 10);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),
/* 40 */,
/* 41 */
/*!************************************************!*\
  !*** ./src/blocks/block-cta/components/cta.js ***!
  \************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CTA Wrapper
 */

// Setup the block
var Component = wp.element.Component;
var applyFilters = wp.hooks.applyFilters;

// Import block dependencies and components



/**
 * Create a CallToAction wrapper Component
 */

var CallToAction = function (_Component) {
	_inherits(CallToAction, _Component);

	function CallToAction() {
		_classCallCheck(this, CallToAction);

		return _possibleConstructorReturn(this, (CallToAction.__proto__ || Object.getPrototypeOf(CallToAction)).apply(this, arguments));
	}

	_createClass(CallToAction, [{
		key: "c9SpacingConfig",
		value: function c9SpacingConfig(padding, margin) {
			var classes = [];
			// abstract side class assignment
			function assignSideClasses(sideClass, level) {
				if (-1 != level) {
					classes.push(sideClass + "-" + level);
				}
			}

			// padding
			if (padding.top === padding.left && padding.top === padding.bottom && padding.top === padding.right && -1 != padding.top) {
				classes.push("p-" + padding.top);
			} else if (padding.top === padding.bottom && 0 <= padding.top) {
				classes.push("py-" + padding.top);
				assignSideClasses("pl", padding.left);
				assignSideClasses("pr", padding.right);
			} else if (padding.left === padding.right && 0 <= padding.left) {
				classes.push("px-" + padding.left);
				assignSideClasses("pt", padding.top);
				assignSideClasses("pb", padding.bottom);
			} else {
				["top", "bottom", "left", "right"].map(function (s) {
					return assignSideClasses("p" + s[0], padding[s]);
				});
			}

			// margin
			if (margin.top === margin.bottom && -1 != margin.top) {
				classes.push("my-" + margin.top);
			} else {
				["top", "bottom"].map(function (s) {
					return assignSideClasses("m" + s[0], margin[s]);
				});
			}

			return classes;
		}
	}, {
		key: "c9BackgroundStyles",
		value: function c9BackgroundStyles(url, size, bgColor, opacity, align, blend, focalPoint) {
			var selected = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : true;

			var styles = {};

			if (bgColor) {
				styles.backgroundColor = this.hexToRGBA(bgColor, opacity);
			}

			if (align) {
				styles.textAlign = align;
			}

			if (url) {
				if (selected) {
					styles.backgroundImage = "url(" + url + ")";
				} else {
					styles.backgroundImage = "linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(" + url + ")";
				}
				styles.backgroundBlendMode = "" + blend;

				if (focalPoint) {
					styles.backgroundPosition = focalPoint.x * 100 + "% " + focalPoint.y * 100 + "%";
				}

				if (0 < size.length) {
					styles.backgroundSize = size;
				}
			}

			return styles;
		}
	}, {
		key: "hexToRGBA",
		value: function hexToRGBA(hex, alpha) {
			var r = parseInt(hex.slice(1, 3), 16),
			    g = parseInt(hex.slice(3, 5), 16),
			    b = parseInt(hex.slice(5, 7), 16);

			var opacity;

			if (10 === alpha) {
				opacity = 1;
			} else {
				opacity = "." + alpha;
			}

			return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
		}
	}, {
		key: "render",
		value: function render() {
			// Setup the attributes
			var _props = this.props,
			    _props$attributes = _props.attributes,
			    buttonAlignment = _props$attributes.buttonAlignment,
			    ctaWidth = _props$attributes.ctaWidth,
			    ctaBackgroundColor = _props$attributes.ctaBackgroundColor,
			    ctaBackgroundOpacity = _props$attributes.ctaBackgroundOpacity,
			    imgURL = _props$attributes.imgURL,
			    imgSize = _props$attributes.imgSize,
			    blendMode = _props$attributes.blendMode,
			    focalPoint = _props$attributes.focalPoint,
			    ctaPadding = _props$attributes.ctaPadding,
			    ctaMargin = _props$attributes.ctaMargin,
			    align = _props$attributes.align,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot,
			    _props$save = _props.save,
			    save = _props$save === undefined ? false : _props$save;


			var ctaAlign = void 0;
			if (save && 0 != align.length) {
				if ("container" == ctaWidth) {
					ctaAlign = "alignwide";
				} else if ("container-fluid" == ctaWidth) {
					ctaAlign = "alignfull";
				} else {
					ctaAlign = null;
				}
			}

			return wp.element.createElement(
				"div",
				{
					style: this.c9BackgroundStyles(imgURL, imgSize, ctaBackgroundColor, ctaBackgroundOpacity, buttonAlignment, blendMode, focalPoint, isSelectedBlockInRoot),
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "c9-block-cta", save ? ctaWidth : null, ctaAlign, this.c9SpacingConfig(ctaPadding, ctaMargin),
					// eslint-disable-next-line no-extra-boolean-cast
					!!imgURL ? "c9-cta-has-background" : null)
				},
				wp.element.createElement(
					"div",
					{ className: "row" },
					this.props.children
				)
			);
		}
	}]);

	return CallToAction;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (CallToAction);

/***/ }),
/* 42 */
/*!***************************************************************!*\
  !*** ./src/blocks/block-heading/components/custom-heading.js ***!
  \***************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * CTA Wrapper
 */

// Setup the block
var Component = wp.element.Component;
var applyFilters = wp.hooks.applyFilters;

// Import block dependencies and components



/**
 * Create a C9CustomHeading wrapper Component
 */

var C9CustomHeading = function (_Component) {
	_inherits(C9CustomHeading, _Component);

	function C9CustomHeading() {
		_classCallCheck(this, C9CustomHeading);

		return _possibleConstructorReturn(this, (C9CustomHeading.__proto__ || Object.getPrototypeOf(C9CustomHeading)).apply(this, arguments));
	}

	_createClass(C9CustomHeading, [{
		key: "render",
		value: function render() {
			var _props = this.props,
			    textAlign = _props.attributes.textAlign,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className;


			return wp.element.createElement(
				"div",
				{
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("section-heading", applyFilters("c9-blocks.blocks.className", className), textAlign ? "text-" + textAlign : "text-left"),
					style: { backgroundColor: this.props.attributes.backgroundColor }
				},
				this.props.children
			);
		}
	}]);

	return C9CustomHeading;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (C9CustomHeading);

/***/ }),
/* 43 */
/*!****************************************************************!*\
  !*** ./src/blocks/block-heading/components/heading-toolbar.js ***!
  \****************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash__ = __webpack_require__(/*! lodash */ 44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * External dependencies
 */


/**
 * WordPress dependencies
 */
var _wp$i18n = wp.i18n,
    __ = _wp$i18n.__,
    sprintf = _wp$i18n.sprintf;
var Component = wp.element.Component;
var Toolbar = wp.components.Toolbar;

var HeadingToolbar = function (_Component) {
	_inherits(HeadingToolbar, _Component);

	function HeadingToolbar() {
		_classCallCheck(this, HeadingToolbar);

		return _possibleConstructorReturn(this, (HeadingToolbar.__proto__ || Object.getPrototypeOf(HeadingToolbar)).apply(this, arguments));
	}

	_createClass(HeadingToolbar, [{
		key: "createLevelControl",
		value: function createLevelControl(targetLevel, selectedLevel, onChange) {
			return {
				icon: "heading",
				// translators: %s: heading level e.g: "1", "2", "3"
				title: sprintf(__("Heading %d"), targetLevel),
				isActive: targetLevel === selectedLevel,
				onClick: function onClick() {
					return onChange(targetLevel);
				},
				subscript: String(targetLevel)
			};
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    minLevel = _props.minLevel,
			    maxLevel = _props.maxLevel,
			    selectedLevel = _props.selectedLevel,
			    onChange = _props.onChange,
			    _props$isCollapsed = _props.isCollapsed,
			    isCollapsed = _props$isCollapsed === undefined ? true : _props$isCollapsed;


			return wp.element.createElement(Toolbar, {
				isCollapsed: isCollapsed,
				icon: "heading",
				controls: Object(__WEBPACK_IMPORTED_MODULE_0_lodash__["range"])(minLevel, maxLevel).map(function (index) {
					return _this2.createLevelControl(index, selectedLevel, onChange);
				})
			});
		}
	}]);

	return HeadingToolbar;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (HeadingToolbar);

/***/ }),
/* 44 */
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/*! dynamic exports provided */
/*! exports used: get, pick, range */
/***/ (function(module, exports) {

module.exports = lodash;

/***/ }),
/* 45 */
/*!*****************************************************************!*\
  !*** ./src/blocks/block-grid-container/components/container.js ***!
  \*****************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__video_box__ = __webpack_require__(/*! ./video-box */ 238);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Container Wrapper
 */

// Setup the block
var Component = wp.element.Component;
var applyFilters = wp.hooks.applyFilters;

// Import block dependencies and components




/**
 * Create a Container wrapper Component
 */

var Container = function (_Component) {
	_inherits(Container, _Component);

	function Container() {
		_classCallCheck(this, Container);

		return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
	}

	_createClass(Container, [{
		key: "c9SpacingConfig",
		value: function c9SpacingConfig(padding, margin) {
			var classes = [];
			// abstract side class assignment
			function assignSideClasses(sideClass, level) {
				if (-1 != level) {
					classes.push(sideClass + "-" + level);
				}
			}

			// padding
			if (padding.top === padding.left && padding.top === padding.bottom && padding.top === padding.right && -1 != padding.top) {
				classes.push("p-" + padding.top);
			} else if (padding.top === padding.bottom && 0 <= padding.top) {
				classes.push("py-" + padding.top);
				assignSideClasses("pl", padding.left);
				assignSideClasses("pr", padding.right);
			} else if (padding.left === padding.right && 0 <= padding.left) {
				classes.push("px-" + padding.left);
				assignSideClasses("pt", padding.top);
				assignSideClasses("pb", padding.bottom);
			} else {
				["top", "bottom", "left", "right"].map(function (s) {
					return assignSideClasses("p" + s[0], padding[s]);
				});
			}

			// margin
			if (margin.top === margin.bottom && -1 != margin.top) {
				classes.push("my-" + margin.top);
			} else {
				["top", "bottom"].map(function (s) {
					return assignSideClasses("m" + s[0], margin[s]);
				});
			}

			return classes;
		}
	}, {
		key: "c9ContainerStyles",
		value: function c9ContainerStyles(height, hue, opacity) {
			var styles = {};

			if (height) {
				styles.minHeight = height + "vh";
			}

			if (hue) {
				styles.backgroundColor = this.hexToRGBA(hue, opacity);
			}

			return styles;
		}
	}, {
		key: "c9BackgroundStyles",
		value: function c9BackgroundStyles(url, size, bgX, bgY, repeat, focalPoint) {
			var selected = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

			var styles = {};

			if (focalPoint) {
				styles.backgroundPosition = focalPoint.x * 100 + "% " + focalPoint.y * 100 + "%";
			}

			if (url) {
				if (selected) {
					styles.backgroundImage = "url(" + url + ")";
				} else {
					styles.backgroundImage = "linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(" + url + ")";
				}
				styles.backgroundRepeat = repeat;
			}
			if (0 < size.length) {
				styles.backgroundSize = size;
			} else {
				var horizontal = "auto" != bgX.size ? "" + bgX.size + bgX.unit : "" + bgX.size;
				var vertical = "auto" != bgY.size ? "" + bgY.size + bgY.unit : "" + bgY.size;
				styles.backgroundSize = horizontal + " " + vertical;
			}

			return styles;
		}
	}, {
		key: "c9OverlayStyles",
		value: function c9OverlayStyles(hue, opacity, blend) {
			var styles = {};

			if (hue) {
				styles.backgroundColor = this.hexToRGBA(hue, opacity);
				styles.mixBlendMode = "" + blend;
			}

			return styles;
		}
	}, {
		key: "hexToRGBA",
		value: function hexToRGBA(hex, alpha) {
			var r = parseInt(hex.slice(1, 3), 16),
			    g = parseInt(hex.slice(3, 5), 16),
			    b = parseInt(hex.slice(5, 7), 16);

			var opacity;

			if (10 === alpha) {
				opacity = 1;
			} else {
				opacity = "." + alpha;
			}

			return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
		}
	}, {
		key: "render",
		value: function render() {
			var _props = this.props,
			    _props$attributes = _props.attributes,
			    containerImgURL = _props$attributes.containerImgURL,
			    bgImgSize = _props$attributes.bgImgSize,
			    bgImgAttach = _props$attributes.bgImgAttach,
			    bgImgRepeat = _props$attributes.bgImgRepeat,
			    bgCustomX = _props$attributes.bgCustomX,
			    bgCustomY = _props$attributes.bgCustomY,
			    overlayHue = _props$attributes.overlayHue,
			    containerHue = _props$attributes.containerHue,
			    containerOpacity = _props$attributes.containerOpacity,
			    overlayOpacity = _props$attributes.overlayOpacity,
			    blendMode = _props$attributes.blendMode,
			    containerPadding = _props$attributes.containerPadding,
			    containerMargin = _props$attributes.containerMargin,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    focalPoint = _props$attributes.focalPoint,
			    containerVideoURL = _props$attributes.containerVideoURL,
			    containerVideoID = _props$attributes.containerVideoID,
			    cannotEmbed = _props$attributes.cannotEmbed,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot;


			return wp.element.createElement(
				"div",
				{
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), this.c9SpacingConfig(containerPadding, containerMargin), bgImgAttach ? "c9-fixed" : "c9-scroll", containerImgURL ? "c9-grid-has-background" : null, (!!containerVideoURL || !!containerVideoID) && !cannotEmbed ? "c9-grid-has-video" : null),
					style: this.c9ContainerStyles(minScreenHeight, containerHue, containerOpacity)
				},
				(!!containerVideoURL || !!containerVideoID) && !cannotEmbed && wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__video_box__["a" /* default */], this.props),
				!!containerImgURL && wp.element.createElement("div", {
					className: "c9-image-container",
					style: this.c9BackgroundStyles(containerImgURL, bgImgSize, bgCustomX, bgCustomY, bgImgRepeat, focalPoint, isSelectedBlockInRoot)
				}),
				!!overlayHue && wp.element.createElement("div", {
					className: "c9-overlay-container",
					style: this.c9OverlayStyles(overlayHue, overlayOpacity, blendMode)
				}),
				this.props.children
			);
		}
	}]);

	return Container;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Container);

/***/ }),
/* 46 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),
/* 47 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),
/* 48 */
/*!***************************************!*\
  !*** ./node_modules/slugify/index.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {


;(function (name, root, factory) {
  if (true) {
    module.exports = factory()
    module.exports['default'] = factory()
  }
  /* istanbul ignore next */
  else if (typeof define === 'function' && define.amd) {
    define(factory)
  }
  else {
    root[name] = factory()
  }
}('slugify', this, function () {
  /* eslint-disable */
  var charMap = JSON.parse('{"$":"dollar","%":"percent","&":"and","<":"less",">":"greater","|":"or","¢":"cent","£":"pound","¤":"currency","¥":"yen","©":"(c)","ª":"a","®":"(r)","º":"o","À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","Æ":"AE","Ç":"C","È":"E","É":"E","Ê":"E","Ë":"E","Ì":"I","Í":"I","Î":"I","Ï":"I","Ð":"D","Ñ":"N","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","Ù":"U","Ú":"U","Û":"U","Ü":"U","Ý":"Y","Þ":"TH","ß":"ss","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","æ":"ae","ç":"c","è":"e","é":"e","ê":"e","ë":"e","ì":"i","í":"i","î":"i","ï":"i","ð":"d","ñ":"n","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","ù":"u","ú":"u","û":"u","ü":"u","ý":"y","þ":"th","ÿ":"y","Ā":"A","ā":"a","Ă":"A","ă":"a","Ą":"A","ą":"a","Ć":"C","ć":"c","Č":"C","č":"c","Ď":"D","ď":"d","Đ":"DJ","đ":"dj","Ē":"E","ē":"e","Ė":"E","ė":"e","Ę":"e","ę":"e","Ě":"E","ě":"e","Ğ":"G","ğ":"g","Ģ":"G","ģ":"g","Ĩ":"I","ĩ":"i","Ī":"i","ī":"i","Į":"I","į":"i","İ":"I","ı":"i","Ķ":"k","ķ":"k","Ļ":"L","ļ":"l","Ľ":"L","ľ":"l","Ł":"L","ł":"l","Ń":"N","ń":"n","Ņ":"N","ņ":"n","Ň":"N","ň":"n","Ő":"O","ő":"o","Œ":"OE","œ":"oe","Ŕ":"R","ŕ":"r","Ř":"R","ř":"r","Ś":"S","ś":"s","Ş":"S","ş":"s","Š":"S","š":"s","Ţ":"T","ţ":"t","Ť":"T","ť":"t","Ũ":"U","ũ":"u","Ū":"u","ū":"u","Ů":"U","ů":"u","Ű":"U","ű":"u","Ų":"U","ų":"u","Ź":"Z","ź":"z","Ż":"Z","ż":"z","Ž":"Z","ž":"z","ƒ":"f","Ơ":"O","ơ":"o","Ư":"U","ư":"u","ǈ":"LJ","ǉ":"lj","ǋ":"NJ","ǌ":"nj","Ș":"S","ș":"s","Ț":"T","ț":"t","˚":"o","Ά":"A","Έ":"E","Ή":"H","Ί":"I","Ό":"O","Ύ":"Y","Ώ":"W","ΐ":"i","Α":"A","Β":"B","Γ":"G","Δ":"D","Ε":"E","Ζ":"Z","Η":"H","Θ":"8","Ι":"I","Κ":"K","Λ":"L","Μ":"M","Ν":"N","Ξ":"3","Ο":"O","Π":"P","Ρ":"R","Σ":"S","Τ":"T","Υ":"Y","Φ":"F","Χ":"X","Ψ":"PS","Ω":"W","Ϊ":"I","Ϋ":"Y","ά":"a","έ":"e","ή":"h","ί":"i","ΰ":"y","α":"a","β":"b","γ":"g","δ":"d","ε":"e","ζ":"z","η":"h","θ":"8","ι":"i","κ":"k","λ":"l","μ":"m","ν":"n","ξ":"3","ο":"o","π":"p","ρ":"r","ς":"s","σ":"s","τ":"t","υ":"y","φ":"f","χ":"x","ψ":"ps","ω":"w","ϊ":"i","ϋ":"y","ό":"o","ύ":"y","ώ":"w","Ё":"Yo","Ђ":"DJ","Є":"Ye","І":"I","Ї":"Yi","Ј":"J","Љ":"LJ","Њ":"NJ","Ћ":"C","Џ":"DZ","А":"A","Б":"B","В":"V","Г":"G","Д":"D","Е":"E","Ж":"Zh","З":"Z","И":"I","Й":"J","К":"K","Л":"L","М":"M","Н":"N","О":"O","П":"P","Р":"R","С":"S","Т":"T","У":"U","Ф":"F","Х":"H","Ц":"C","Ч":"Ch","Ш":"Sh","Щ":"Sh","Ъ":"U","Ы":"Y","Ь":"","Э":"E","Ю":"Yu","Я":"Ya","а":"a","б":"b","в":"v","г":"g","д":"d","е":"e","ж":"zh","з":"z","и":"i","й":"j","к":"k","л":"l","м":"m","н":"n","о":"o","п":"p","р":"r","с":"s","т":"t","у":"u","ф":"f","х":"h","ц":"c","ч":"ch","ш":"sh","щ":"sh","ъ":"u","ы":"y","ь":"","э":"e","ю":"yu","я":"ya","ё":"yo","ђ":"dj","є":"ye","і":"i","ї":"yi","ј":"j","љ":"lj","њ":"nj","ћ":"c","џ":"dz","Ґ":"G","ґ":"g","฿":"baht","ა":"a","ბ":"b","გ":"g","დ":"d","ე":"e","ვ":"v","ზ":"z","თ":"t","ი":"i","კ":"k","ლ":"l","მ":"m","ნ":"n","ო":"o","პ":"p","ჟ":"zh","რ":"r","ს":"s","ტ":"t","უ":"u","ფ":"f","ქ":"k","ღ":"gh","ყ":"q","შ":"sh","ჩ":"ch","ც":"ts","ძ":"dz","წ":"ts","ჭ":"ch","ხ":"kh","ჯ":"j","ჰ":"h","ẞ":"SS","Ạ":"A","ạ":"a","Ả":"A","ả":"a","Ấ":"A","ấ":"a","Ầ":"A","ầ":"a","Ẩ":"A","ẩ":"a","Ẫ":"A","ẫ":"a","Ậ":"A","ậ":"a","Ắ":"A","ắ":"a","Ằ":"A","ằ":"a","Ẳ":"A","ẳ":"a","Ẵ":"A","ẵ":"a","Ặ":"A","ặ":"a","Ẹ":"E","ẹ":"e","Ẻ":"E","ẻ":"e","Ẽ":"E","ẽ":"e","Ế":"E","ế":"e","Ề":"E","ề":"e","Ể":"E","ể":"e","Ễ":"E","ễ":"e","Ệ":"E","ệ":"e","Ỉ":"I","ỉ":"i","Ị":"I","ị":"i","Ọ":"O","ọ":"o","Ỏ":"O","ỏ":"o","Ố":"O","ố":"o","Ồ":"O","ồ":"o","Ổ":"O","ổ":"o","Ỗ":"O","ỗ":"o","Ộ":"O","ộ":"o","Ớ":"O","ớ":"o","Ờ":"O","ờ":"o","Ở":"O","ở":"o","Ỡ":"O","ỡ":"o","Ợ":"O","ợ":"o","Ụ":"U","ụ":"u","Ủ":"U","ủ":"u","Ứ":"U","ứ":"u","Ừ":"U","ừ":"u","Ử":"U","ử":"u","Ữ":"U","ữ":"u","Ự":"U","ự":"u","Ỳ":"Y","ỳ":"y","Ỵ":"Y","ỵ":"y","Ỷ":"Y","ỷ":"y","Ỹ":"Y","ỹ":"y","‘":"\'","’":"\'","“":"\\\"","”":"\\\"","†":"+","•":"*","…":"...","₠":"ecu","₢":"cruzeiro","₣":"french franc","₤":"lira","₥":"mill","₦":"naira","₧":"peseta","₨":"rupee","₩":"won","₪":"new shequel","₫":"dong","€":"euro","₭":"kip","₮":"tugrik","₯":"drachma","₰":"penny","₱":"peso","₲":"guarani","₳":"austral","₴":"hryvnia","₵":"cedi","₹":"indian rupee","₽":"russian ruble","₿":"bitcoin","℠":"sm","™":"tm","∂":"d","∆":"delta","∑":"sum","∞":"infinity","♥":"love","元":"yuan","円":"yen","﷼":"rial"}')
  /* eslint-enable */

  function replace (string, options) {
    if (typeof string !== 'string') {
      throw new Error('slugify: string argument expected')
    }

    options = (typeof options === 'string')
      ? {replacement: options}
      : options || {}

    var slug = string.split('')
      .reduce(function (result, ch) {
        return result + (charMap[ch] || ch)
          // allowed
          .replace(options.remove || /[^\w\s$*_+~.()'"!\-:@]/g, '')
      }, '')
      // trim leading/trailing spaces
      .trim()
      // convert spaces
      .replace(/[-\s]+/g, options.replacement || '-')

    return options.lower ? slug.toLowerCase() : slug
  }

  replace.extend = function (customMap) {
    for (var key in customMap) {
      charMap[key] = customMap[key]
    }
  }

  return replace
}))


/***/ }),
/* 49 */
/*!************************************************!*\
  !*** ./src/components/block-selector/index.js ***!
  \************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editor_scss__ = __webpack_require__(/*! ./editor.scss */ 272);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__editor_scss__);


var BlockSelector = function BlockSelector(_ref) {
	var text = _ref.text;
	return wp.element.createElement(
		"div",
		{ className: "block-selector" },
		text
	);
};

/* harmony default export */ __webpack_exports__["a"] = (BlockSelector);

/***/ }),
/* 50 */
/*!*************************************************************!*\
  !*** ./src/blocks/block-posts-grid/components/container.js ***!
  \*************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__video_box__ = __webpack_require__(/*! ./video-box */ 282);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Container Wrapper
 */

// Setup the block
var Component = wp.element.Component;
var applyFilters = wp.hooks.applyFilters;

// Import block dependencies and components




/**
 * Create a Container wrapper Component
 */

var Container = function (_Component) {
	_inherits(Container, _Component);

	function Container() {
		_classCallCheck(this, Container);

		return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
	}

	_createClass(Container, [{
		key: "c9SpacingConfig",
		value: function c9SpacingConfig(padding, margin) {
			var classes = [];
			// abstract side class assignment
			function assignSideClasses(sideClass, level) {
				if (-1 != level) {
					classes.push(sideClass + "-" + level);
				}
			}

			// padding
			if (padding.top === padding.left && padding.top === padding.bottom && padding.top === padding.right && -1 != padding.top) {
				classes.push("p-" + padding.top);
			} else if (padding.top === padding.bottom && 0 <= padding.top) {
				classes.push("py-" + padding.top);
				assignSideClasses("pl", padding.left);
				assignSideClasses("pr", padding.right);
			} else if (padding.left === padding.right && 0 <= padding.left) {
				classes.push("px-" + padding.left);
				assignSideClasses("pt", padding.top);
				assignSideClasses("pb", padding.bottom);
			} else {
				["top", "bottom", "left", "right"].map(function (s) {
					return assignSideClasses("p" + s[0], padding[s]);
				});
			}

			// margin
			if (margin.top === margin.bottom && -1 != margin.top) {
				classes.push("my-" + margin.top);
			} else {
				["top", "bottom"].map(function (s) {
					return assignSideClasses("m" + s[0], margin[s]);
				});
			}

			return classes;
		}
	}, {
		key: "c9ContainerStyles",
		value: function c9ContainerStyles(height, hue, opacity) {
			var styles = {};

			if (height) {
				styles.minHeight = height + "vh";
			}

			if (hue) {
				styles.backgroundColor = this.hexToRGBA(hue, opacity);
			}

			return styles;
		}
	}, {
		key: "c9BackgroundStyles",
		value: function c9BackgroundStyles(url, size, bgX, bgY, repeat, focalPoint) {
			var selected = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

			var styles = {};

			if (focalPoint) {
				styles.backgroundPosition = focalPoint.x * 100 + "% " + focalPoint.y * 100 + "%";
			}

			if (url) {
				if (selected) {
					styles.backgroundImage = "url(" + url + ")";
				} else {
					styles.backgroundImage = "linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(" + url + ")";
				}
				styles.backgroundRepeat = repeat;
			}
			if (0 < size.length) {
				styles.backgroundSize = size;
			} else {
				var horizontal = "auto" != bgX.size ? "" + bgX.size + bgX.unit : "" + bgX.size;
				var vertical = "auto" != bgY.size ? "" + bgY.size + bgY.unit : "" + bgY.size;
				styles.backgroundSize = horizontal + " " + vertical;
			}

			return styles;
		}
	}, {
		key: "c9OverlayStyles",
		value: function c9OverlayStyles(hue, opacity, blend) {
			var styles = {};

			if (hue) {
				styles.backgroundColor = this.hexToRGBA(hue, opacity);
				styles.mixBlendMode = "" + blend;
			}

			return styles;
		}
	}, {
		key: "hexToRGBA",
		value: function hexToRGBA(hex, alpha) {
			var r = parseInt(hex.slice(1, 3), 16),
			    g = parseInt(hex.slice(3, 5), 16),
			    b = parseInt(hex.slice(5, 7), 16);

			var opacity;

			if (10 === alpha) {
				opacity = 1;
			} else {
				opacity = "." + alpha;
			}

			return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
		}
	}, {
		key: "render",
		value: function render() {
			var _props = this.props,
			    _props$attributes = _props.attributes,
			    containerImgURL = _props$attributes.containerImgURL,
			    bgImgSize = _props$attributes.bgImgSize,
			    bgImgAttach = _props$attributes.bgImgAttach,
			    bgImgRepeat = _props$attributes.bgImgRepeat,
			    bgCustomX = _props$attributes.bgCustomX,
			    bgCustomY = _props$attributes.bgCustomY,
			    overlayHue = _props$attributes.overlayHue,
			    containerHue = _props$attributes.containerHue,
			    containerOpacity = _props$attributes.containerOpacity,
			    overlayOpacity = _props$attributes.overlayOpacity,
			    blendMode = _props$attributes.blendMode,
			    containerPadding = _props$attributes.containerPadding,
			    containerMargin = _props$attributes.containerMargin,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    focalPoint = _props$attributes.focalPoint,
			    containerVideoURL = _props$attributes.containerVideoURL,
			    containerVideoID = _props$attributes.containerVideoID,
			    cannotEmbed = _props$attributes.cannotEmbed,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot;


			return wp.element.createElement(
				"div",
				{
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), this.c9SpacingConfig(containerPadding, containerMargin), bgImgAttach ? "c9-fixed" : "c9-scroll", containerImgURL ? "c9-grid-has-background" : null, (!!containerVideoURL || !!containerVideoID) && !cannotEmbed ? "c9-grid-has-video" : null),
					style: this.c9ContainerStyles(minScreenHeight, containerHue, containerOpacity)
				},
				(!!containerVideoURL || !!containerVideoID) && !cannotEmbed && wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__video_box__["a" /* default */], this.props),
				!!containerImgURL && wp.element.createElement("div", {
					className: "c9-image-container",
					style: this.c9BackgroundStyles(containerImgURL, bgImgSize, bgCustomX, bgCustomY, bgImgRepeat, focalPoint, isSelectedBlockInRoot)
				}),
				!!overlayHue && wp.element.createElement("div", {
					className: "c9-overlay-container",
					style: this.c9OverlayStyles(overlayHue, overlayOpacity, blendMode)
				}),
				this.props.children
			);
		}
	}]);

	return Container;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Container);

/***/ }),
/* 51 */
/*!**************************************!*\
  !*** ./assets/icon-c9-post-grid.svg ***!
  \**************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-post-grid_svg__cls-1{fill:#fff}.icon-c9-post-grid_svg__cls-2{fill:#6d6e71}.icon-c9-post-grid_svg__cls-3{fill:none;stroke:#6d6e71;stroke-miterlimit:10;stroke-width:.75px}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M34.36 3.38h11.25v7.25H34.36z"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M45.24 3.75v6.5h-10.5v-6.5h10.5M46 3H34v8h12V3z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M33.99 13h12"
});

var _ref5 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M18.36 3.38h11.25v7.25H18.36z"
});

var _ref6 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M29.24 3.75v6.5h-10.5v-6.5h10.5M30 3H18v8h12V3z"
});

var _ref7 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M17.99 13h12"
});

var _ref8 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M2.36 3.38h11.25v7.25H2.36z"
});

var _ref9 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M13.24 3.75v6.5H2.74v-6.5h10.5M14 3H2v8h12V3z"
});

var _ref10 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M1.99 13h12"
});

var _ref11 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M34.36 18.38h11.25v7.25H34.36z"
});

var _ref12 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M45.24 18.75v6.5h-10.5v-6.5h10.5M46 18H34v8h12v-8z"
});

var _ref13 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M33.99 28h12"
});

var _ref14 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M18.36 18.38h11.25v7.25H18.36z"
});

var _ref15 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M29.24 18.75v6.5h-10.5v-6.5h10.5M30 18H18v8h12v-8z"
});

var _ref16 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M17.99 28h12"
});

var _ref17 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M2.36 18.38h11.25v7.25H2.36z"
});

var _ref18 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M13.24 18.75v6.5H2.74v-6.5h10.5M14 18H2v8h12v-8z"
});

var _ref19 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M1.99 28h12"
});

var _ref20 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M34.36 33.38h11.25v7.25H34.36z"
});

var _ref21 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M45.24 33.75v6.5h-10.5v-6.5h10.5M46 33H34v8h12v-8z"
});

var _ref22 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M33.99 43h12"
});

var _ref23 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M18.36 33.38h11.25v7.25H18.36z"
});

var _ref24 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M29.24 33.75v6.5h-10.5v-6.5h10.5M30 33H18v8h12v-8z"
});

var _ref25 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M17.99 43h12"
});

var _ref26 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-1",
  d: "M2.36 33.38h11.25v7.25H2.36z"
});

var _ref27 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-2",
  d: "M13.24 33.75v6.5H2.74v-6.5h10.5M14 33H2v8h12v-8z"
});

var _ref28 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-post-grid_svg__cls-3",
  d: "M1.99 43h12"
});

var SvgIconC9PostGrid = function SvgIconC9PostGrid(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-post-grid_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9PostGrid);

/***/ }),
/* 52 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__(/*! ./_baseMatches */ 306),
    baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ 360),
    identity = __webpack_require__(/*! ./identity */ 47),
    isArray = __webpack_require__(/*! ./isArray */ 4),
    property = __webpack_require__(/*! ./property */ 367);

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),
/* 53 */
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ 17),
    stackClear = __webpack_require__(/*! ./_stackClear */ 313),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ 314),
    stackGet = __webpack_require__(/*! ./_stackGet */ 315),
    stackHas = __webpack_require__(/*! ./_stackHas */ 316),
    stackSet = __webpack_require__(/*! ./_stackSet */ 317);

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),
/* 54 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ 6),
    isObject = __webpack_require__(/*! ./isObject */ 9);

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),
/* 55 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),
/* 56 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ 334),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 7);

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),
/* 57 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(/*! ./_SetCache */ 335),
    arraySome = __webpack_require__(/*! ./_arraySome */ 338),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ 339);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),
/* 58 */
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ 59),
    isArray = __webpack_require__(/*! ./isArray */ 4);

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),
/* 59 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),
/* 60 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ 346),
    stubArray = __webpack_require__(/*! ./stubArray */ 61);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),
/* 61 */
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),
/* 62 */
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ 46),
    isArguments = __webpack_require__(/*! ./isArguments */ 63),
    isArray = __webpack_require__(/*! ./isArray */ 4),
    isBuffer = __webpack_require__(/*! ./isBuffer */ 64),
    isIndex = __webpack_require__(/*! ./_isIndex */ 35),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ 65);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),
/* 63 */
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ 347),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 7);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),
/* 64 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ 3),
    stubFalse = __webpack_require__(/*! ./stubFalse */ 348);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 34)(module)))

/***/ }),
/* 65 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ 349),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ 350),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ 351);

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),
/* 66 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),
/* 67 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),
/* 68 */
/*!****************************************************!*\
  !*** ./node_modules/lodash/_isStrictComparable.js ***!
  \****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ 9);

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),
/* 69 */
/*!*********************************************************!*\
  !*** ./node_modules/lodash/_matchesStrictComparable.js ***!
  \*********************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),
/* 70 */
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ 37);

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),
/* 71 */
/*!***************************************!*\
  !*** ./assets/c9-col-layout-icons.js ***!
  \***************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var icons = {
	/* One column - 100. */
	oneEqual: wp.element.createElement(
		"svg",
		{
			className: "dashicon",
			height: "26",
			viewBox: "0 0 60 30",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "60", height: "30", fill: "#6d6a6f" })
	),

	/* Two columns - 50/50. */
	twoEqual: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "33", y: "0", width: "29", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "0", y: "0", width: "29", height: "30", fill: "#6d6a6f" })
	),

	/* Two columns - 75/25. */
	twoLeftWide: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "43", y: "0", width: "16", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "0", y: "0", width: "39", height: "30", fill: "#6d6a6f" })
	),

	/* Two columns - 25/75. */
	twoRightWide: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "20", y: "0", width: "39", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "0", y: "0", width: "16", height: "30", fill: "#6d6a6f" })
	),

	/* Three columns - 33/33/33. */
	threeEqual: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "17.500", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "21.500", y: "0", width: "17.500", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "43", y: "0", width: "17.500", height: "30", fill: "#6d6a6f" })
	),

	/* Three column - 25/50/25. */
	threeWideCenter: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "11", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "15", y: "0", width: "31", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "50", y: "0", width: "11", height: "30", fill: "#6d6a6f" })
	),

	/* Three column - 50/25/25. */
	threeWideLeft: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "30", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "34", y: "0", width: "11", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "49", y: "0", width: "11", height: "30", fill: "#6d6a6f" })
	),

	/* Three column - 25/25/50. */
	threeWideRight: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "11", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "15", y: "0", width: "11", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "30", y: "0", width: "30", height: "30", fill: "#6d6a6f" })
	),

	/* Four column - 25/25/25/25. */
	fourEqual: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "12", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "16", y: "0", width: "12", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "32", y: "0", width: "12", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "48", y: "0", width: "12", height: "30", fill: "#6d6a6f" })
	),

	/* Four column - 40/20/20/20. */
	fourLeft: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "21", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "25", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "38", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "51", y: "0", width: "9", height: "30", fill: "#6d6a6f" })
	),

	/* Four column - 20/20/20/40. */
	fourRight: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "12.800", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "25.600", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "38.400", y: "0", width: "21", height: "30", fill: "#6d6a6f" })
	),

	/* Five columns - 20/20/20/20/20. */
	fiveEqual: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "12.400", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "24.800", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "37.200", y: "0", width: "9", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "49.600", y: "0", width: "9", height: "30", fill: "#6d6a6f" })
	),

	/* Five columns - 16/16/16/16/16. */
	sixEqual: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 30",
			height: "26",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "0", y: "0", width: "7", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "10.330", y: "0", width: "7", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "20.660", y: "0", width: "7", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "30.990", y: "0", width: "7", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "41.320", y: "0", width: "7", height: "30", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "51.650", y: "0", width: "7", height: "30", fill: "#6d6a6f" })
	),

	/* Block icon. */
	blockIcon: wp.element.createElement(
		"svg",
		{
			viewBox: "0 0 60 34",
			height: "34",
			xmlns: "http://www.w3.org/2000/svg",
			fillRule: "evenodd",
			clipRule: "evenodd",
			strokeLinejoin: "round",
			strokeMiterlimit: "1.414"
		},
		wp.element.createElement("rect", { x: "38", y: "0", width: "12", height: "34", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "22", y: "0", width: "12", height: "34", fill: "#6d6a6f" }),
		wp.element.createElement("rect", { x: "6", y: "0", width: "12", height: "34", fill: "#6d6a6f" })
	)
};

/* harmony default export */ __webpack_exports__["a"] = (icons);

/***/ }),
/* 72 */
/*!*******************************************************************!*\
  !*** ./src/blocks/block-column-container/components/container.js ***!
  \*******************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Container Wrapper
 */

// Setup the block
var Component = wp.element.Component;

// Import block dependencies and components



/**
 * Create a Container wrapper Component
 */

var Container = function (_Component) {
	_inherits(Container, _Component);

	function Container() {
		_classCallCheck(this, Container);

		return _possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).apply(this, arguments));
	}

	_createClass(Container, [{
		key: "c9SpacingConfig",
		value: function c9SpacingConfig(padding, margin) {
			var classes = [];
			// abstract side class assignment
			function assignSideClasses(sideClass, level) {
				if (-1 != level) {
					classes.push(sideClass + "-" + level);
				}
			}

			// padding
			if (padding.top === padding.left && padding.top === padding.bottom && padding.top === padding.right && -1 != padding.top) {
				classes.push("p-" + padding.top);
			} else if (padding.top === padding.bottom && 0 <= padding.top) {
				classes.push("py-" + padding.top);
				assignSideClasses("pl", padding.left);
				assignSideClasses("pr", padding.right);
			} else if (padding.left === padding.right && 0 <= padding.left) {
				classes.push("px-" + padding.left);
				assignSideClasses("pt", padding.top);
				assignSideClasses("pb", padding.bottom);
			} else {
				["top", "bottom", "left", "right"].map(function (s) {
					return assignSideClasses("p" + s[0], padding[s]);
				});
			}

			// margin
			if (margin.top === margin.bottom && -1 != margin.top) {
				classes.push("my-" + margin.top);
			} else {
				["top", "bottom"].map(function (s) {
					return assignSideClasses("m" + s[0], margin[s]);
				});
			}

			return classes;
		}
	}, {
		key: "c9ContainerStyles",
		value: function c9ContainerStyles(height) {
			var styles = {};

			if (height) {
				styles.minHeight = height + "vh";
			}

			return styles;
		}
	}, {
		key: "c9BackgroundStyles",
		value: function c9BackgroundStyles(url, size, bgX, bgY, repeat, focalPoint) {
			var selected = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

			var styles = {};

			if (focalPoint) {
				styles.backgroundPosition = focalPoint.x * 100 + "% " + focalPoint.y * 100 + "%";
			}

			if (url) {
				if (selected) {
					styles.backgroundImage = "url(" + url + ")";
				} else {
					styles.backgroundImage = "linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(" + url + ")";
				}
				styles.backgroundRepeat = repeat;
			}
			if (0 < size.length) {
				styles.backgroundSize = size;
			} else {
				var horizontal = "auto" != bgX.size ? "" + bgX.size + bgX.unit : "" + bgX.size;
				var vertical = "auto" != bgY.size ? "" + bgY.size + bgY.unit : "" + bgY.size;
				styles.backgroundSize = horizontal + " " + vertical;
			}

			return styles;
		}
	}, {
		key: "c9OverlayStyles",
		value: function c9OverlayStyles(hue, opacity, blend) {
			var styles = {};

			if (hue) {
				styles.backgroundColor = this.hexToRGBA(hue, opacity);
				styles.mixBlendMode = "" + blend;
			}

			return styles;
		}
	}, {
		key: "hexToRGBA",
		value: function hexToRGBA(hex, alpha) {
			var r = parseInt(hex.slice(1, 3), 16),
			    g = parseInt(hex.slice(3, 5), 16),
			    b = parseInt(hex.slice(5, 7), 16);

			var opacity;

			if (10 === alpha) {
				opacity = 1;
			} else {
				opacity = "." + alpha;
			}

			return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
		}
	}, {
		key: "render",
		value: function render() {
			var _props = this.props,
			    _props$attributes = _props.attributes,
			    verticalAlign = _props$attributes.verticalAlign,
			    containerImgURL = _props$attributes.containerImgURL,
			    containerWidth = _props$attributes.containerWidth,
			    bgImgSize = _props$attributes.bgImgSize,
			    bgImgAttach = _props$attributes.bgImgAttach,
			    bgImgRepeat = _props$attributes.bgImgRepeat,
			    bgCustomX = _props$attributes.bgCustomX,
			    bgCustomY = _props$attributes.bgCustomY,
			    overlayHue = _props$attributes.overlayHue,
			    overlayOpacity = _props$attributes.overlayOpacity,
			    blendMode = _props$attributes.blendMode,
			    containerPadding = _props$attributes.containerPadding,
			    containerMargin = _props$attributes.containerMargin,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    focalPoint = _props$attributes.focalPoint,
			    containerVideoURL = _props$attributes.containerVideoURL,
			    containerVideoID = _props$attributes.containerVideoID,
			    cannotEmbed = _props$attributes.cannotEmbed,
			    columns = _props$attributes.columns,
			    layout = _props$attributes.layout,
			    columnMaxWidth = _props$attributes.columnMaxWidth,
			    centerColumns = _props$attributes.centerColumns,
			    align = _props$attributes.align,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot,
			    _props$save = _props.save,
			    save = _props$save === undefined ? false : _props$save,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className;


			var containerAlign = void 0;
			if (save && 0 != align.length) {
				if ("container" == containerWidth) {
					containerAlign = "alignwide";
				} else if ("container-fluid" == containerWidth) {
					containerAlign = "alignfull";
				} else {
					containerAlign = null;
				}
			}

			return wp.element.createElement(
				"div",
				{
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(className, save ? containerWidth : null, containerAlign, "c9-column-container", this.c9SpacingConfig(containerPadding, containerMargin), bgImgAttach ? "c9-fixed" : "c9-scroll", "c9-layout-columns-" + columns, verticalAlign ? "c9-is-vertically-aligned-" + verticalAlign : null, layout, columnMaxWidth && centerColumns ? "c9-columns-center" : null, containerImgURL ? "c9-columns-has-background" : null, (!!containerVideoURL || !!containerVideoID) && !cannotEmbed ? "c9-columns-has-video" : null),
					style: this.c9ContainerStyles(minScreenHeight)
				},
				!!containerImgURL && wp.element.createElement("div", {
					className: "c9-image-container",
					style: this.c9BackgroundStyles(containerImgURL, bgImgSize, bgCustomX, bgCustomY, bgImgRepeat, focalPoint, isSelectedBlockInRoot)
				}),
				!!overlayHue && wp.element.createElement("div", {
					className: "c9-overlay-container",
					style: this.c9OverlayStyles(overlayHue, overlayOpacity, blendMode)
				}),
				this.props.children
			);
		}
	}]);

	return Container;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Container);

/***/ }),
/* 73 */
/*!********************************************************************************!*\
  !*** ./src/blocks/block-column-container/components/vertical-align-toolbar.js ***!
  \********************************************************************************/
/*! exports provided: VerticalAlignmentToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export VerticalAlignmentToolbar */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__ = __webpack_require__(/*! ../../../../assets/c9-vertical-alignment-icons */ 28);
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;




var DEFAULT_ALIGN_CONTROLS = [{
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].top,
	title: __("Vertical Align Top", "c9-blocks"),
	align: "top"
}, {
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].center,
	title: __("Vertical Align Middle", "c9-blocks"),
	align: "center"
}, {
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].bottom,
	title: __("Vertical Align Bottom", "c9-blocks"),
	align: "bottom"
}];

function VerticalAlignmentToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$alignControls = _ref.alignControls,
	    alignControls = _ref$alignControls === undefined ? DEFAULT_ALIGN_CONTROLS : _ref$alignControls;

	function applyOrUnset(align) {
		return function () {
			return onChange(value === align ? undefined : align);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Change Vertical Alignment", "c9-blocks"),
		controls: alignControls.map(function (control) {
			var align = control.align;

			var isActive = value === align;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(align)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (VerticalAlignmentToolbar);

/***/ }),
/* 74 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/af.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var af = moment.defineLocale('af', {
        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM : function (input) {
            return /^nm$/i.test(input);
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Vandag om] LT',
            nextDay : '[Môre om] LT',
            nextWeek : 'dddd [om] LT',
            lastDay : '[Gister om] LT',
            lastWeek : '[Laas] dddd [om] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'oor %s',
            past : '%s gelede',
            s : '\'n paar sekondes',
            ss : '%d sekondes',
            m : '\'n minuut',
            mm : '%d minute',
            h : '\'n uur',
            hh : '%d ure',
            d : '\'n dag',
            dd : '%d dae',
            M : '\'n maand',
            MM : '%d maande',
            y : '\'n jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week : {
            dow : 1, // Maandag is die eerste dag van die week.
            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });

    return af;

})));


/***/ }),
/* 75 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ar.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    }, pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    }, plurals = {
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    }, pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    }, months = [
        'يناير',
        'فبراير',
        'مارس',
        'أبريل',
        'مايو',
        'يونيو',
        'يوليو',
        'أغسطس',
        'سبتمبر',
        'أكتوبر',
        'نوفمبر',
        'ديسمبر'
    ];

    var ar = moment.defineLocale('ar', {
        months : months,
        monthsShort : months,
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/\u200FM/\u200FYYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'بعد %s',
            past : 'منذ %s',
            s : pluralize('s'),
            ss : pluralize('s'),
            m : pluralize('m'),
            mm : pluralize('m'),
            h : pluralize('h'),
            hh : pluralize('h'),
            d : pluralize('d'),
            dd : pluralize('d'),
            M : pluralize('M'),
            MM : pluralize('M'),
            y : pluralize('y'),
            yy : pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return ar;

})));


/***/ }),
/* 76 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-dz.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arDz = moment.defineLocale('ar-dz', {
        months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return arDz;

})));


/***/ }),
/* 77 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-kw.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arKw = moment.defineLocale('ar-kw', {
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return arKw;

})));


/***/ }),
/* 78 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ly.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '0': '0'
    }, pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    }, plurals = {
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    }, pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    }, months = [
        'يناير',
        'فبراير',
        'مارس',
        'أبريل',
        'مايو',
        'يونيو',
        'يوليو',
        'أغسطس',
        'سبتمبر',
        'أكتوبر',
        'نوفمبر',
        'ديسمبر'
    ];

    var arLy = moment.defineLocale('ar-ly', {
        months : months,
        monthsShort : months,
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/\u200FM/\u200FYYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'بعد %s',
            past : 'منذ %s',
            s : pluralize('s'),
            ss : pluralize('s'),
            m : pluralize('m'),
            mm : pluralize('m'),
            h : pluralize('h'),
            hh : pluralize('h'),
            d : pluralize('d'),
            dd : pluralize('d'),
            M : pluralize('M'),
            MM : pluralize('M'),
            y : pluralize('y'),
            yy : pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return arLy;

})));


/***/ }),
/* 79 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ma.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arMa = moment.defineLocale('ar-ma', {
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return arMa;

})));


/***/ }),
/* 80 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-sa.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    var arSa = moment.defineLocale('ar-sa', {
        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return arSa;

})));


/***/ }),
/* 81 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-tn.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss : '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return arTn;

})));


/***/ }),
/* 82 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/az.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı'
    };

    var az = moment.defineLocale('az', {
        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[sabah saat] LT',
            nextWeek : '[gələn həftə] dddd [saat] LT',
            lastDay : '[dünən] LT',
            lastWeek : '[keçən həftə] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s əvvəl',
            s : 'birneçə saniyə',
            ss : '%d saniyə',
            m : 'bir dəqiqə',
            mm : '%d dəqiqə',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir il',
            yy : '%d il'
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM : function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return az;

})));


/***/ }),
/* 83 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/be.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months : {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
        },
        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays : {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
        },
        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., HH:mm',
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar : {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'праз %s',
            past : '%s таму',
            s : 'некалькі секунд',
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithPlural,
            hh : relativeTimeWithPlural,
            d : 'дзень',
            dd : relativeTimeWithPlural,
            M : 'месяц',
            MM : relativeTimeWithPlural,
            y : 'год',
            yy : relativeTimeWithPlural
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM : function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return be;

})));


/***/ }),
/* 84 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bg.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var bg = moment.defineLocale('bg', {
        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Днес в] LT',
            nextDay : '[Утре в] LT',
            nextWeek : 'dddd [в] LT',
            lastDay : '[Вчера в] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[В изминалата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'след %s',
            past : 'преди %s',
            s : 'няколко секунди',
            ss : '%d секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дни',
            M : 'месец',
            MM : '%d месеца',
            y : 'година',
            yy : '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return bg;

})));


/***/ }),
/* 85 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bm.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var bm = moment.defineLocale('bm', {
        months : 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
        monthsShort : 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays : 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort : 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin : 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'MMMM [tile] D [san] YYYY',
            LLL : 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL : 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
        },
        calendar : {
            sameDay : '[Bi lɛrɛ] LT',
            nextDay : '[Sini lɛrɛ] LT',
            nextWeek : 'dddd [don lɛrɛ] LT',
            lastDay : '[Kunu lɛrɛ] LT',
            lastWeek : 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s kɔnɔ',
            past : 'a bɛ %s bɔ',
            s : 'sanga dama dama',
            ss : 'sekondi %d',
            m : 'miniti kelen',
            mm : 'miniti %d',
            h : 'lɛrɛ kelen',
            hh : 'lɛrɛ %d',
            d : 'tile kelen',
            dd : 'tile %d',
            M : 'kalo kelen',
            MM : 'kalo %d',
            y : 'san kelen',
            yy : 'san %d'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return bm;

})));


/***/ }),
/* 86 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bn.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    },
    numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    var bn = moment.defineLocale('bn', {
        months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
        monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
        longDateFormat : {
            LT : 'A h:mm সময়',
            LTS : 'A h:mm:ss সময়',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm সময়',
            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
        },
        calendar : {
            sameDay : '[আজ] LT',
            nextDay : '[আগামীকাল] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[গতকাল] LT',
            lastWeek : '[গত] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s পরে',
            past : '%s আগে',
            s : 'কয়েক সেকেন্ড',
            ss : '%d সেকেন্ড',
            m : 'এক মিনিট',
            mm : '%d মিনিট',
            h : 'এক ঘন্টা',
            hh : '%d ঘন্টা',
            d : 'এক দিন',
            dd : '%d দিন',
            M : 'এক মাস',
            MM : '%d মাস',
            y : 'এক বছর',
            yy : '%d বছর'
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'রাত' && hour >= 4) ||
                    (meridiem === 'দুপুর' && hour < 5) ||
                    meridiem === 'বিকাল') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return bn;

})));


/***/ }),
/* 87 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bo.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    },
    numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    var bo = moment.defineLocale('bo', {
        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[དི་རིང] LT',
            nextDay : '[སང་ཉིན] LT',
            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay : '[ཁ་སང] LT',
            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ལ་',
            past : '%s སྔན་ལ',
            s : 'ལམ་སང',
            ss : '%d སྐར་ཆ།',
            m : 'སྐར་མ་གཅིག',
            mm : '%d སྐར་མ',
            h : 'ཆུ་ཚོད་གཅིག',
            hh : '%d ཆུ་ཚོད',
            d : 'ཉིན་གཅིག',
            dd : '%d ཉིན་',
            M : 'ཟླ་བ་གཅིག',
            MM : '%d ཟླ་བ',
            y : 'ལོ་གཅིག',
            yy : '%d ལོ'
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
                    meridiem === 'དགོང་དག') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return bo;

})));


/***/ }),
/* 88 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/br.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var br = moment.defineLocale('br', {
        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h[e]mm A',
            LTS : 'h[e]mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D [a viz] MMMM YYYY',
            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
        },
        calendar : {
            sameDay : '[Hiziv da] LT',
            nextDay : '[Warc\'hoazh da] LT',
            nextWeek : 'dddd [da] LT',
            lastDay : '[Dec\'h da] LT',
            lastWeek : 'dddd [paset da] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'a-benn %s',
            past : '%s \'zo',
            s : 'un nebeud segondennoù',
            ss : '%d eilenn',
            m : 'ur vunutenn',
            mm : relativeTimeWithMutation,
            h : 'un eur',
            hh : '%d eur',
            d : 'un devezh',
            dd : relativeTimeWithMutation,
            M : 'ur miz',
            MM : relativeTimeWithMutation,
            y : 'ur bloaz',
            yy : specialMutationForYears
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal : function (number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return br;

})));


/***/ }),
/* 89 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bs.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            ss     : translate,
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : 'dan',
            dd     : translate,
            M      : 'mjesec',
            MM     : translate,
            y      : 'godinu',
            yy     : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return bs;

})));


/***/ }),
/* 90 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ca.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ca = moment.defineLocale('ca', {
        months : {
            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
            format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
            isFormat: /D[oD]?(\s)+MMMM/
        },
        monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
        monthsParseExact : true,
        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin : 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM [de] YYYY',
            ll : 'D MMM YYYY',
            LLL : 'D MMMM [de] YYYY [a les] H:mm',
            lll : 'D MMM YYYY, H:mm',
            LLLL : 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll : 'ddd D MMM YYYY, H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay : function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay : function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'd\'aquí %s',
            past : 'fa %s',
            s : 'uns segons',
            ss : '%d segons',
            m : 'un minut',
            mm : '%d minuts',
            h : 'una hora',
            hh : '%d hores',
            d : 'un dia',
            dd : '%d dies',
            M : 'un mes',
            MM : '%d mesos',
            y : 'un any',
            yy : '%d anys'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal : function (number, period) {
            var output = (number === 1) ? 'r' :
                (number === 2) ? 'n' :
                (number === 3) ? 'r' :
                (number === 4) ? 't' : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ca;

})));


/***/ }),
/* 91 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cs.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');

    var monthsParse = [/^led/i, /^úno/i, /^bře/i, /^dub/i, /^kvě/i, /^(čvn|červen$|června)/i, /^(čvc|červenec|července)/i, /^srp/i, /^zář/i, /^říj/i, /^lis/i, /^pro/i];
    // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
    // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
    var monthsRegex = /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

    function plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':  // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
                break;
            case 'm':  // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
                break;
            case 'h':  // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':  // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
                break;
            case 'M':  // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
                break;
            case 'y':  // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
                break;
        }
    }

    var cs = moment.defineLocale('cs', {
        months : months,
        monthsShort : monthsShort,
        monthsRegex : monthsRegex,
        monthsShortRegex : monthsRegex,
        // NOTE: 'červen' is substring of 'červenec'; therefore 'červenec' must precede 'červen' in the regex to be fully matched.
        // Otherwise parser matches '1. červenec' as '1. červen' + 'ec'.
        monthsStrictRegex : /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
        monthsShortStrictRegex : /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,
        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm',
            l : 'D. M. YYYY'
        },
        calendar : {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'před %s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse : /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cs;

})));


/***/ }),
/* 92 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cv.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var cv = moment.defineLocale('cv', {
        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
        },
        calendar : {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
            },
            past : '%s каялла',
            s : 'пӗр-ик ҫеккунт',
            ss : '%d ҫеккунт',
            m : 'пӗр минут',
            mm : '%d минут',
            h : 'пӗр сехет',
            hh : '%d сехет',
            d : 'пӗр кун',
            dd : '%d кун',
            M : 'пӗр уйӑх',
            MM : '%d уйӑх',
            y : 'пӗр ҫул',
            yy : '%d ҫул'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal : '%d-мӗш',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return cv;

})));


/***/ }),
/* 93 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cy.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact : true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS : 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cy;

})));


/***/ }),
/* 94 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/da.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var da = moment.defineLocale('da', {
        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay : '[i dag kl.] LT',
            nextDay : '[i morgen kl.] LT',
            nextWeek : 'på dddd [kl.] LT',
            lastDay : '[i går kl.] LT',
            lastWeek : '[i] dddd[s kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s siden',
            s : 'få sekunder',
            ss : '%d sekunder',
            m : 'et minut',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dage',
            M : 'en måned',
            MM : '%d måneder',
            y : 'et år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return da;

})));


/***/ }),
/* 95 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/de.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return de;

})));


/***/ }),
/* 96 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-at.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deAt;

})));


/***/ }),
/* 97 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-ch.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deCh;

})));


/***/ }),
/* 98 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/dv.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'ޖެނުއަރީ',
        'ފެބްރުއަރީ',
        'މާރިޗު',
        'އޭޕްރީލު',
        'މޭ',
        'ޖޫން',
        'ޖުލައި',
        'އޯގަސްޓު',
        'ސެޕްޓެމްބަރު',
        'އޮކްޓޯބަރު',
        'ނޮވެމްބަރު',
        'ޑިސެމްބަރު'
    ], weekdays = [
        'އާދިއްތަ',
        'ހޯމަ',
        'އަންގާރަ',
        'ބުދަ',
        'ބުރާސްފަތި',
        'ހުކުރު',
        'ހޮނިހިރު'
    ];

    var dv = moment.defineLocale('dv', {
        months : months,
        monthsShort : months,
        weekdays : weekdays,
        weekdaysShort : weekdays,
        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat : {

            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/M/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /މކ|މފ/,
        isPM : function (input) {
            return 'މފ' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar : {
            sameDay : '[މިއަދު] LT',
            nextDay : '[މާދަމާ] LT',
            nextWeek : 'dddd LT',
            lastDay : '[އިއްޔެ] LT',
            lastWeek : '[ފާއިތުވި] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ތެރޭގައި %s',
            past : 'ކުރިން %s',
            s : 'ސިކުންތުކޮޅެއް',
            ss : 'd% ސިކުންތު',
            m : 'މިނިޓެއް',
            mm : 'މިނިޓު %d',
            h : 'ގަޑިއިރެއް',
            hh : 'ގަޑިއިރު %d',
            d : 'ދުވަހެއް',
            dd : 'ދުވަސް %d',
            M : 'މަހެއް',
            MM : 'މަސް %d',
            y : 'އަހަރެއް',
            yy : 'އަހަރު %d'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 7,  // Sunday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return dv;

})));


/***/ }),
/* 99 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/el.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }


    var el = moment.defineLocale('el', {
        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months : function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM : function (input) {
            return ((input + '').toLowerCase()[0] === 'μ');
        },
        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendarEl : {
            sameDay : '[Σήμερα {}] LT',
            nextDay : '[Αύριο {}] LT',
            nextWeek : 'dddd [{}] LT',
            lastDay : '[Χθες {}] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
        },
        relativeTime : {
            future : 'σε %s',
            past : '%s πριν',
            s : 'λίγα δευτερόλεπτα',
            ss : '%d δευτερόλεπτα',
            m : 'ένα λεπτό',
            mm : '%d λεπτά',
            h : 'μία ώρα',
            hh : '%d ώρες',
            d : 'μία μέρα',
            dd : '%d μέρες',
            M : 'ένας μήνας',
            MM : '%d μήνες',
            y : 'ένας χρόνος',
            yy : '%d χρόνια'
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4st is the first week of the year.
        }
    });

    return el;

})));


/***/ }),
/* 100 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-SG.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enSG = moment.defineLocale('en-SG', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enSG;

})));


/***/ }),
/* 101 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-au.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enAu = moment.defineLocale('en-au', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enAu;

})));


/***/ }),
/* 102 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ca.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enCa = moment.defineLocale('en-ca', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'YYYY-MM-DD',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY h:mm A',
            LLLL : 'dddd, MMMM D, YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    return enCa;

})));


/***/ }),
/* 103 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-gb.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enGb = moment.defineLocale('en-gb', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enGb;

})));


/***/ }),
/* 104 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ie.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enIe = moment.defineLocale('en-ie', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enIe;

})));


/***/ }),
/* 105 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-il.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enIl = moment.defineLocale('en-il', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    return enIl;

})));


/***/ }),
/* 106 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-nz.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enNz = moment.defineLocale('en-nz', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enNz;

})));


/***/ }),
/* 107 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eo.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var eo = moment.defineLocale('eo', {
        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
        weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D[-a de] MMMM, YYYY',
            LLL : 'D[-a de] MMMM, YYYY HH:mm',
            LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar : {
            sameDay : '[Hodiaŭ je] LT',
            nextDay : '[Morgaŭ je] LT',
            nextWeek : 'dddd [je] LT',
            lastDay : '[Hieraŭ je] LT',
            lastWeek : '[pasinta] dddd [je] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'post %s',
            past : 'antaŭ %s',
            s : 'sekundoj',
            ss : '%d sekundoj',
            m : 'minuto',
            mm : '%d minutoj',
            h : 'horo',
            hh : '%d horoj',
            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
            dd : '%d tagoj',
            M : 'monato',
            MM : '%d monatoj',
            y : 'jaro',
            yy : '%d jaroj'
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal : '%da',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return eo;

})));


/***/ }),
/* 108 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/es.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex : monthsRegex,
        monthsShortRegex : monthsRegex,
        monthsStrictRegex : /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex : /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY H:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return es;

})));


/***/ }),
/* 109 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-do.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY h:mm A',
            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return esDo;

})));


/***/ }),
/* 110 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-us.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esUs = moment.defineLocale('es-us', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'MM/DD/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY h:mm A',
            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return esUs;

})));


/***/ }),
/* 111 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/et.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'ss': [number + 'sekundi', number + 'sekundit'],
            'm' : ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd' : ['ühe päeva', 'üks päev'],
            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat : {
            LT   : 'H:mm',
            LTS : 'H:mm:ss',
            L    : 'DD.MM.YYYY',
            LL   : 'D. MMMM YYYY',
            LLL  : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[Täna,] LT',
            nextDay  : '[Homme,] LT',
            nextWeek : '[Järgmine] dddd LT',
            lastDay  : '[Eile,] LT',
            lastWeek : '[Eelmine] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s pärast',
            past   : '%s tagasi',
            s      : processRelativeTime,
            ss     : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : '%d päeva',
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return et;

})));


/***/ }),
/* 112 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eu.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var eu = moment.defineLocale('eu', {
        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        monthsParseExact : true,
        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY[ko] MMMM[ren] D[a]',
            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l : 'YYYY-M-D',
            ll : 'YYYY[ko] MMM D[a]',
            lll : 'YYYY[ko] MMM D[a] HH:mm',
            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
        },
        calendar : {
            sameDay : '[gaur] LT[etan]',
            nextDay : '[bihar] LT[etan]',
            nextWeek : 'dddd LT[etan]',
            lastDay : '[atzo] LT[etan]',
            lastWeek : '[aurreko] dddd LT[etan]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s barru',
            past : 'duela %s',
            s : 'segundo batzuk',
            ss : '%d segundo',
            m : 'minutu bat',
            mm : '%d minutu',
            h : 'ordu bat',
            hh : '%d ordu',
            d : 'egun bat',
            dd : '%d egun',
            M : 'hilabete bat',
            MM : '%d hilabete',
            y : 'urte bat',
            yy : '%d urte'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return eu;

})));


/***/ }),
/* 113 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fa.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    }, numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    var fa = moment.defineLocale('fa', {
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar : {
            sameDay : '[امروز ساعت] LT',
            nextDay : '[فردا ساعت] LT',
            nextWeek : 'dddd [ساعت] LT',
            lastDay : '[دیروز ساعت] LT',
            lastWeek : 'dddd [پیش] [ساعت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'در %s',
            past : '%s پیش',
            s : 'چند ثانیه',
            ss : 'ثانیه d%',
            m : 'یک دقیقه',
            mm : '%d دقیقه',
            h : 'یک ساعت',
            hh : '%d ساعت',
            d : 'یک روز',
            dd : '%d روز',
            M : 'یک ماه',
            MM : '%d ماه',
            y : 'یک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal : '%dم',
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 12th is the first week of the year.
        }
    });

    return fa;

})));


/***/ }),
/* 114 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fi.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                return isFuture ? 'sekunnin' : 'sekuntia';
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
    }

    var fi = moment.defineLocale('fi', {
        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'Do MMMM[ta] YYYY',
            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l : 'D.M.YYYY',
            ll : 'Do MMM YYYY',
            lll : 'Do MMM YYYY, [klo] HH.mm',
            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
        },
        calendar : {
            sameDay : '[tänään] [klo] LT',
            nextDay : '[huomenna] [klo] LT',
            nextWeek : 'dddd [klo] LT',
            lastDay : '[eilen] [klo] LT',
            lastWeek : '[viime] dddd[na] [klo] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s päästä',
            past : '%s sitten',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fi;

})));


/***/ }),
/* 115 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fo.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var fo = moment.defineLocale('fo', {
        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D. MMMM, YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Í dag kl.] LT',
            nextDay : '[Í morgin kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[Í gjár kl.] LT',
            lastWeek : '[síðstu] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'um %s',
            past : '%s síðani',
            s : 'fá sekund',
            ss : '%d sekundir',
            m : 'ein minuttur',
            mm : '%d minuttir',
            h : 'ein tími',
            hh : '%d tímar',
            d : 'ein dagur',
            dd : '%d dagar',
            M : 'ein mánaður',
            MM : '%d mánaðir',
            y : 'eitt ár',
            yy : '%d ár'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fo;

})));


/***/ }),
/* 116 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fr.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var fr = moment.defineLocale('fr', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal : function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fr;

})));


/***/ }),
/* 117 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ca.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var frCa = moment.defineLocale('fr-ca', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal : function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        }
    });

    return frCa;

})));


/***/ }),
/* 118 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ch.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var frCh = moment.defineLocale('fr-ch', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal : function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return frCh;

})));


/***/ }),
/* 119 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fy.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact : true,
        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'oer %s',
            past : '%s lyn',
            s : 'in pear sekonden',
            ss : '%d sekonden',
            m : 'ien minút',
            mm : '%d minuten',
            h : 'ien oere',
            hh : '%d oeren',
            d : 'ien dei',
            dd : '%d dagen',
            M : 'ien moanne',
            MM : '%d moannen',
            y : 'ien jier',
            yy : '%d jierren'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fy;

})));


/***/ }),
/* 120 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ga.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';



    var months = [
        'Eanáir', 'Feabhra', 'Márta', 'Aibreán', 'Bealtaine', 'Méitheamh', 'Iúil', 'Lúnasa', 'Meán Fómhair', 'Deaireadh Fómhair', 'Samhain', 'Nollaig'
    ];

    var monthsShort = ['Eaná', 'Feab', 'Márt', 'Aibr', 'Beal', 'Méit', 'Iúil', 'Lúna', 'Meán', 'Deai', 'Samh', 'Noll'];

    var weekdays = ['Dé Domhnaigh', 'Dé Luain', 'Dé Máirt', 'Dé Céadaoin', 'Déardaoin', 'Dé hAoine', 'Dé Satharn'];

    var weekdaysShort = ['Dom', 'Lua', 'Mái', 'Céa', 'Déa', 'hAo', 'Sat'];

    var weekdaysMin = ['Do', 'Lu', 'Má', 'Ce', 'Dé', 'hA', 'Sa'];

    var ga = moment.defineLocale('ga', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[Amárach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[Inné aig] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'i %s',
            past: '%s ó shin',
            s: 'cúpla soicind',
            ss: '%d soicind',
            m: 'nóiméad',
            mm: '%d nóiméad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lá',
            dd: '%d lá',
            M: 'mí',
            MM: '%d mí',
            y: 'bliain',
            yy: '%d bliain'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ga;

})));


/***/ }),
/* 121 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gd.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
    ];

    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months : months,
        monthsShort : monthsShort,
        monthsParseExact : true,
        weekdays : weekdays,
        weekdaysShort : weekdaysShort,
        weekdaysMin : weekdaysMin,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[An-diugh aig] LT',
            nextDay : '[A-màireach aig] LT',
            nextWeek : 'dddd [aig] LT',
            lastDay : '[An-dè aig] LT',
            lastWeek : 'dddd [seo chaidh] [aig] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ann an %s',
            past : 'bho chionn %s',
            s : 'beagan diogan',
            ss : '%d diogan',
            m : 'mionaid',
            mm : '%d mionaidean',
            h : 'uair',
            hh : '%d uairean',
            d : 'latha',
            dd : '%d latha',
            M : 'mìos',
            MM : '%d mìosan',
            y : 'bliadhna',
            yy : '%d bliadhna'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
        ordinal : function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gd;

})));


/***/ }),
/* 122 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gl.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var gl = moment.defineLocale('gl', {
        months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
        monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY H:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay : function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay : function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek : function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past : 'hai %s',
            s : 'uns segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'unha hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gl;

})));


/***/ }),
/* 123 */
/*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-latn.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['thodde secondanim', 'thodde second'],
            'ss': [number + ' secondanim', number + ' second'],
            'm': ['eka mintan', 'ek minute'],
            'mm': [number + ' mintanim', number + ' mintam'],
            'h': ['eka voran', 'ek vor'],
            'hh': [number + ' voranim', number + ' voram'],
            'd': ['eka disan', 'ek dis'],
            'dd': [number + ' disanim', number + ' dis'],
            'M': ['eka mhoinean', 'ek mhoino'],
            'MM': [number + ' mhoineanim', number + ' mhoine'],
            'y': ['eka vorsan', 'ek voros'],
            'yy': [number + ' vorsanim', number + ' vorsam']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
        monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
        weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'A h:mm [vazta]',
            LTS : 'A h:mm:ss [vazta]',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY A h:mm [vazta]',
            LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
        },
        calendar : {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Ieta to] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fatlo] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s',
            past : '%s adim',
            s : processRelativeTime,
            ss : processRelativeTime,
            m : processRelativeTime,
            mm : processRelativeTime,
            h : processRelativeTime,
            hh : processRelativeTime,
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse : /\d{1,2}(er)/,
        ordinal : function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /rati|sokalli|donparam|sanje/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokalli') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokalli';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        }
    });

    return gomLatn;

})));


/***/ }),
/* 124 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gu.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
            '1': '૧',
            '2': '૨',
            '3': '૩',
            '4': '૪',
            '5': '૫',
            '6': '૬',
            '7': '૭',
            '8': '૮',
            '9': '૯',
            '0': '૦'
        },
        numberMap = {
            '૧': '1',
            '૨': '2',
            '૩': '3',
            '૪': '4',
            '૫': '5',
            '૬': '6',
            '૭': '7',
            '૮': '8',
            '૯': '9',
            '૦': '0'
        };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
        monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પેહલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ'
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 6th is the first week of the year.
        }
    });

    return gu;

})));


/***/ }),
/* 125 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/he.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var he = moment.defineLocale('he', {
        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [ב]MMMM YYYY',
            LLL : 'D [ב]MMMM YYYY HH:mm',
            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
            l : 'D/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[היום ב־]LT',
            nextDay : '[מחר ב־]LT',
            nextWeek : 'dddd [בשעה] LT',
            lastDay : '[אתמול ב־]LT',
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'בעוד %s',
            past : 'לפני %s',
            s : 'מספר שניות',
            ss : '%d שניות',
            m : 'דקה',
            mm : '%d דקות',
            h : 'שעה',
            hh : function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d : 'יום',
            dd : function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M : 'חודש',
            MM : function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y : 'שנה',
            yy : function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            }
        },
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM : function (input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        }
    });

    return he;

})));


/***/ }),
/* 126 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hi.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var hi = moment.defineLocale('hi', {
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        monthsParseExact: true,
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm बजे',
            LTS : 'A h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[कल] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[कल] LT',
            lastWeek : '[पिछले] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s में',
            past : '%s पहले',
            s : 'कुछ ही क्षण',
            ss : '%d सेकंड',
            m : 'एक मिनट',
            mm : '%d मिनट',
            h : 'एक घंटा',
            hh : '%d घंटे',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महीने',
            MM : '%d महीने',
            y : 'एक वर्ष',
            yy : '%d वर्ष'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return hi;

})));


/***/ }),
/* 127 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hr.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months : {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
        },
        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            ss     : translate,
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : 'dan',
            dd     : translate,
            M      : 'mjesec',
            MM     : translate,
            y      : 'godinu',
            yy     : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return hr;

})));


/***/ }),
/* 128 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hu.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    var hu = moment.defineLocale('hu', {
        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'YYYY.MM.DD.',
            LL : 'YYYY. MMMM D.',
            LLL : 'YYYY. MMMM D. H:mm',
            LLLL : 'YYYY. MMMM D., dddd H:mm'
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar : {
            sameDay : '[ma] LT[-kor]',
            nextDay : '[holnap] LT[-kor]',
            nextWeek : function () {
                return week.call(this, true);
            },
            lastDay : '[tegnap] LT[-kor]',
            lastWeek : function () {
                return week.call(this, false);
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s múlva',
            past : '%s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return hu;

})));


/***/ }),
/* 129 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/hy-am.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var hyAm = moment.defineLocale('hy-am', {
        months : {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
        },
        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY թ.',
            LLL : 'D MMMM YYYY թ., HH:mm',
            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
        },
        calendar : {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s հետո',
            past : '%s առաջ',
            s : 'մի քանի վայրկյան',
            ss : '%d վայրկյան',
            m : 'րոպե',
            mm : '%d րոպե',
            h : 'ժամ',
            hh : '%d ժամ',
            d : 'օր',
            dd : '%d օր',
            M : 'ամիս',
            MM : '%d ամիս',
            y : 'տարի',
            yy : '%d տարի'
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem : function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return hyAm;

})));


/***/ }),
/* 130 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/id.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var id = moment.defineLocale('id', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Besok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kemarin pukul] LT',
            lastWeek : 'dddd [lalu pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lalu',
            s : 'beberapa detik',
            ss : '%d detik',
            m : 'semenit',
            mm : '%d menit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return id;

})));


/***/ }),
/* 131 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/is.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
            case 'ss':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
                }
                return result + 'sekúnda';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H:mm',
            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
        },
        calendar : {
            sameDay : '[í dag kl.] LT',
            nextDay : '[á morgun kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[í gær kl.] LT',
            lastWeek : '[síðasta] dddd [kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'eftir %s',
            past : 'fyrir %s síðan',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : 'klukkustund',
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return is;

})));


/***/ }),
/* 132 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/it.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var it = moment.defineLocale('it', {
        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
        weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past : '%s fa',
            s : 'alcuni secondi',
            ss : '%d secondi',
            m : 'un minuto',
            mm : '%d minuti',
            h : 'un\'ora',
            hh : '%d ore',
            d : 'un giorno',
            dd : '%d giorni',
            M : 'un mese',
            MM : '%d mesi',
            y : 'un anno',
            yy : '%d anni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return it;

})));


/***/ }),
/* 133 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/it-ch.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var itCh = moment.defineLocale('it-ch', {
        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
        weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past : '%s fa',
            s : 'alcuni secondi',
            ss : '%d secondi',
            m : 'un minuto',
            mm : '%d minuti',
            h : 'un\'ora',
            hh : '%d ore',
            d : 'un giorno',
            dd : '%d giorni',
            M : 'un mese',
            MM : '%d mesi',
            y : 'un anno',
            yy : '%d anni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return itCh;

})));


/***/ }),
/* 134 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ja.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ja = moment.defineLocale('ja', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日 dddd HH:mm',
            l : 'YYYY/MM/DD',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日(ddd) HH:mm'
        },
        meridiemParse: /午前|午後/i,
        isPM : function (input) {
            return input === '午後';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar : {
            sameDay : '[今日] LT',
            nextDay : '[明日] LT',
            nextWeek : function (now) {
                if (now.week() < this.week()) {
                    return '[来週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay : '[昨日] LT',
            lastWeek : function (now) {
                if (this.week() < now.week()) {
                    return '[先週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse : /\d{1,2}日/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime : {
            future : '%s後',
            past : '%s前',
            s : '数秒',
            ss : '%d秒',
            m : '1分',
            mm : '%d分',
            h : '1時間',
            hh : '%d時間',
            d : '1日',
            dd : '%d日',
            M : '1ヶ月',
            MM : '%dヶ月',
            y : '1年',
            yy : '%d年'
        }
    });

    return ja;

})));


/***/ }),
/* 135 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/jv.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var jv = moment.defineLocale('jv', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar : {
            sameDay : '[Dinten puniko pukul] LT',
            nextDay : '[Mbenjang pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kala wingi pukul] LT',
            lastWeek : 'dddd [kepengker pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'wonten ing %s',
            past : '%s ingkang kepengker',
            s : 'sawetawis detik',
            ss : '%d detik',
            m : 'setunggal menit',
            mm : '%d menit',
            h : 'setunggal jam',
            hh : '%d jam',
            d : 'sedinten',
            dd : '%d dinten',
            M : 'sewulan',
            MM : '%d wulan',
            y : 'setaun',
            yy : '%d taun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return jv;

})));


/***/ }),
/* 136 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ka.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ka = moment.defineLocale('ka', {
        months : {
            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },
        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays : {
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
            isFormat: /(წინა|შემდეგ)/
        },
        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[დღეს] LT[-ზე]',
            nextDay : '[ხვალ] LT[-ზე]',
            lastDay : '[გუშინ] LT[-ზე]',
            nextWeek : '[შემდეგ] dddd LT[-ზე]',
            lastWeek : '[წინა] dddd LT-ზე',
            sameElse : 'L'
        },
        relativeTime : {
            future : function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, 'ში') :
                    s + 'ში';
            },
            past : function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
            },
            s : 'რამდენიმე წამი',
            ss : '%d წამი',
            m : 'წუთი',
            mm : '%d წუთი',
            h : 'საათი',
            hh : '%d საათი',
            d : 'დღე',
            dd : '%d დღე',
            M : 'თვე',
            MM : '%d თვე',
            y : 'წელი',
            yy : '%d წელი'
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal : function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week : {
            dow : 1,
            doy : 7
        }
    });

    return ka;

})));


/***/ }),
/* 137 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kk.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші'
    };

    var kk = moment.defineLocale('kk', {
        months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
        monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
        weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Бүгін сағат] LT',
            nextDay : '[Ертең сағат] LT',
            nextWeek : 'dddd [сағат] LT',
            lastDay : '[Кеше сағат] LT',
            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ішінде',
            past : '%s бұрын',
            s : 'бірнеше секунд',
            ss : '%d секунд',
            m : 'бір минут',
            mm : '%d минут',
            h : 'бір сағат',
            hh : '%d сағат',
            d : 'бір күн',
            dd : '%d күн',
            M : 'бір ай',
            MM : '%d ай',
            y : 'бір жыл',
            yy : '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal : function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return kk;

})));


/***/ }),
/* 138 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/km.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '១',
        '2': '២',
        '3': '៣',
        '4': '៤',
        '5': '៥',
        '6': '៦',
        '7': '៧',
        '8': '៨',
        '9': '៩',
        '0': '០'
    }, numberMap = {
        '១': '1',
        '២': '2',
        '៣': '3',
        '៤': '4',
        '៥': '5',
        '៦': '6',
        '៧': '7',
        '៨': '8',
        '៩': '9',
        '០': '0'
    };

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /ព្រឹក|ល្ងាច/,
        isPM: function (input) {
            return input === 'ល្ងាច';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ព្រឹក';
            } else {
                return 'ល្ងាច';
            }
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
        },
        dayOfMonthOrdinalParse : /ទី\d{1,2}/,
        ordinal : 'ទី%d',
        preparse: function (string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return km;

})));


/***/ }),
/* 139 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kn.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '೧',
        '2': '೨',
        '3': '೩',
        '4': '೪',
        '5': '೫',
        '6': '೬',
        '7': '೭',
        '8': '೮',
        '9': '೯',
        '0': '೦'
    },
    numberMap = {
        '೧': '1',
        '೨': '2',
        '೩': '3',
        '೪': '4',
        '೫': '5',
        '೬': '6',
        '೭': '7',
        '೮': '8',
        '೯': '9',
        '೦': '0'
    };

    var kn = moment.defineLocale('kn', {
        months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
        monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split('_'),
        monthsParseExact: true,
        weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
        weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[ಇಂದು] LT',
            nextDay : '[ನಾಳೆ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ನಿನ್ನೆ] LT',
            lastWeek : '[ಕೊನೆಯ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ನಂತರ',
            past : '%s ಹಿಂದೆ',
            s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss : '%d ಸೆಕೆಂಡುಗಳು',
            m : 'ಒಂದು ನಿಮಿಷ',
            mm : '%d ನಿಮಿಷ',
            h : 'ಒಂದು ಗಂಟೆ',
            hh : '%d ಗಂಟೆ',
            d : 'ಒಂದು ದಿನ',
            dd : '%d ದಿನ',
            M : 'ಒಂದು ತಿಂಗಳು',
            MM : '%d ತಿಂಗಳು',
            y : 'ಒಂದು ವರ್ಷ',
            yy : '%d ವರ್ಷ'
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal : function (number) {
            return number + 'ನೇ';
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return kn;

})));


/***/ }),
/* 140 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ko.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ko = moment.defineLocale('ko', {
        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'YYYY.MM.DD.',
            LL : 'YYYY년 MMMM D일',
            LLL : 'YYYY년 MMMM D일 A h:mm',
            LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
            l : 'YYYY.MM.DD.',
            ll : 'YYYY년 MMMM D일',
            lll : 'YYYY년 MMMM D일 A h:mm',
            llll : 'YYYY년 MMMM D일 dddd A h:mm'
        },
        calendar : {
            sameDay : '오늘 LT',
            nextDay : '내일 LT',
            nextWeek : 'dddd LT',
            lastDay : '어제 LT',
            lastWeek : '지난주 dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s 후',
            past : '%s 전',
            s : '몇 초',
            ss : '%d초',
            m : '1분',
            mm : '%d분',
            h : '한 시간',
            hh : '%d시간',
            d : '하루',
            dd : '%d일',
            M : '한 달',
            MM : '%d달',
            y : '일 년',
            yy : '%d년'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(일|월|주)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse : /오전|오후/,
        isPM : function (token) {
            return token === '오후';
        },
        meridiem : function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        }
    });

    return ko;

})));


/***/ }),
/* 141 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ku.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    },
    months = [
        'کانونی دووەم',
        'شوبات',
        'ئازار',
        'نیسان',
        'ئایار',
        'حوزەیران',
        'تەمموز',
        'ئاب',
        'ئەیلوول',
        'تشرینی یەكەم',
        'تشرینی دووەم',
        'كانونی یەکەم'
    ];


    var ku = moment.defineLocale('ku', {
        months : months,
        monthsShort : months,
        weekdays : 'یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌'.split('_'),
        weekdaysShort : 'یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ه_ش'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /ئێواره‌|به‌یانی/,
        isPM: function (input) {
            return /ئێواره‌/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'به‌یانی';
            } else {
                return 'ئێواره‌';
            }
        },
        calendar : {
            sameDay : '[ئه‌مرۆ كاتژمێر] LT',
            nextDay : '[به‌یانی كاتژمێر] LT',
            nextWeek : 'dddd [كاتژمێر] LT',
            lastDay : '[دوێنێ كاتژمێر] LT',
            lastWeek : 'dddd [كاتژمێر] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'له‌ %s',
            past : '%s',
            s : 'چه‌ند چركه‌یه‌ك',
            ss : 'چركه‌ %d',
            m : 'یه‌ك خوله‌ك',
            mm : '%d خوله‌ك',
            h : 'یه‌ك كاتژمێر',
            hh : '%d كاتژمێر',
            d : 'یه‌ك ڕۆژ',
            dd : '%d ڕۆژ',
            M : 'یه‌ك مانگ',
            MM : '%d مانگ',
            y : 'یه‌ك ساڵ',
            yy : '%d ساڵ'
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 12th is the first week of the year.
        }
    });

    return ku;

})));


/***/ }),
/* 142 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ky.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү'
    };

    var ky = moment.defineLocale('ky', {
        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
        monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
        weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Бүгүн саат] LT',
            nextDay : '[Эртең саат] LT',
            nextWeek : 'dddd [саат] LT',
            lastDay : '[Кечээ саат] LT',
            lastWeek : '[Өткөн аптанын] dddd [күнү] [саат] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ичинде',
            past : '%s мурун',
            s : 'бирнече секунд',
            ss : '%d секунд',
            m : 'бир мүнөт',
            mm : '%d мүнөт',
            h : 'бир саат',
            hh : '%d саат',
            d : 'бир күн',
            dd : '%d күн',
            M : 'бир ай',
            MM : '%d ай',
            y : 'бир жыл',
            yy : '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal : function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return ky;

})));


/***/ }),
/* 143 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lb.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10, firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime : {
            future : processFutureTime,
            past : processPastTime,
            s : 'e puer Sekonnen',
            ss : '%d Sekonnen',
            m : processRelativeTime,
            mm : '%d Minutten',
            h : processRelativeTime,
            hh : '%d Stonnen',
            d : processRelativeTime,
            dd : '%d Deeg',
            M : processRelativeTime,
            MM : '%d Méint',
            y : processRelativeTime,
            yy : '%d Joer'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lb;

})));


/***/ }),
/* 144 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lo.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var lo = moment.defineLocale('lo', {
        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar : {
            sameDay : '[ມື້ນີ້ເວລາ] LT',
            nextDay : '[ມື້ອື່ນເວລາ] LT',
            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ອີກ %s',
            past : '%sຜ່ານມາ',
            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss : '%d ວິນາທີ' ,
            m : '1 ນາທີ',
            mm : '%d ນາທີ',
            h : '1 ຊົ່ວໂມງ',
            hh : '%d ຊົ່ວໂມງ',
            d : '1 ມື້',
            dd : '%d ມື້',
            M : '1 ເດືອນ',
            MM : '%d ເດືອນ',
            y : '1 ປີ',
            yy : '%d ປີ'
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal : function (number) {
            return 'ທີ່' + number;
        }
    });

    return lo;

})));


/***/ }),
/* 145 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lt.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var units = {
        'ss' : 'sekundė_sekundžių_sekundes',
        'm' : 'minutė_minutės_minutę',
        'mm': 'minutės_minučių_minutes',
        'h' : 'valanda_valandos_valandą',
        'hh': 'valandos_valandų_valandas',
        'd' : 'diena_dienos_dieną',
        'dd': 'dienos_dienų_dienas',
        'M' : 'mėnuo_mėnesio_mėnesį',
        'MM': 'mėnesiai_mėnesių_mėnesius',
        'y' : 'metai_metų_metus',
        'yy': 'metai_metų_metus'
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months : {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
        },
        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays : {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
            isFormat: /dddd HH:mm/
        },
        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY [m.] MMMM D [d.]',
            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l : 'YYYY-MM-DD',
            ll : 'YYYY [m.] MMMM D [d.]',
            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar : {
            sameDay : '[Šiandien] LT',
            nextDay : '[Rytoj] LT',
            nextWeek : 'dddd LT',
            lastDay : '[Vakar] LT',
            lastWeek : '[Praėjusį] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'po %s',
            past : 'prieš %s',
            s : translateSeconds,
            ss : translate,
            m : translateSingular,
            mm : translate,
            h : translateSingular,
            hh : translate,
            d : translateSingular,
            dd : translate,
            M : translateSingular,
            MM : translate,
            y : translateSingular,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lt;

})));


/***/ }),
/* 146 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lv.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var units = {
        'ss': 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'h': 'stundas_stundām_stunda_stundas'.split('_'),
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
        'd': 'dienas_dienām_diena_dienas'.split('_'),
        'dd': 'dienas_dienām_diena_dienas'.split('_'),
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'y': 'gada_gadiem_gads_gadi'.split('_'),
        'yy': 'gada_gadiem_gads_gadi'.split('_')
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY.',
            LL : 'YYYY. [gada] D. MMMM',
            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
        },
        calendar : {
            sameDay : '[Šodien pulksten] LT',
            nextDay : '[Rīt pulksten] LT',
            nextWeek : 'dddd [pulksten] LT',
            lastDay : '[Vakar pulksten] LT',
            lastWeek : '[Pagājušā] dddd [pulksten] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'pēc %s',
            past : 'pirms %s',
            s : relativeSeconds,
            ss : relativeTimeWithPlural,
            m : relativeTimeWithSingular,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithSingular,
            hh : relativeTimeWithPlural,
            d : relativeTimeWithSingular,
            dd : relativeTimeWithPlural,
            M : relativeTimeWithSingular,
            MM : relativeTimeWithPlural,
            y : relativeTimeWithSingular,
            yy : relativeTimeWithPlural
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lv;

})));


/***/ }),
/* 147 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/me.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact : true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'nekoliko sekundi',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'dan',
            dd     : translator.translate,
            M      : 'mjesec',
            MM     : translator.translate,
            y      : 'godinu',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return me;

})));


/***/ }),
/* 148 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mi.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return mi;

})));


/***/ }),
/* 149 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mk.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var mk = moment.defineLocale('mk', {
        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Денес во] LT',
            nextDay : '[Утре во] LT',
            nextWeek : '[Во] dddd [во] LT',
            lastDay : '[Вчера во] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'после %s',
            past : 'пред %s',
            s : 'неколку секунди',
            ss : '%d секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дена',
            M : 'месец',
            MM : '%d месеци',
            y : 'година',
            yy : '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return mk;

})));


/***/ }),
/* 150 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ml.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ml = moment.defineLocale('ml', {
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
        monthsParseExact : true,
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm -നു',
            LTS : 'A h:mm:ss -നു',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm -നു',
            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
        },
        calendar : {
            sameDay : '[ഇന്ന്] LT',
            nextDay : '[നാളെ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ഇന്നലെ] LT',
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s കഴിഞ്ഞ്',
            past : '%s മുൻപ്',
            s : 'അൽപ നിമിഷങ്ങൾ',
            ss : '%d സെക്കൻഡ്',
            m : 'ഒരു മിനിറ്റ്',
            mm : '%d മിനിറ്റ്',
            h : 'ഒരു മണിക്കൂർ',
            hh : '%d മണിക്കൂർ',
            d : 'ഒരു ദിവസം',
            dd : '%d ദിവസം',
            M : 'ഒരു മാസം',
            MM : '%d മാസം',
            y : 'ഒരു വർഷം',
            yy : '%d വർഷം'
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'രാത്രി' && hour >= 4) ||
                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                    meridiem === 'വൈകുന്നേരം') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        }
    });

    return ml;

})));


/***/ }),
/* 151 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mn.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
            case 'ss':
                return number + (withoutSuffix ? ' секунд' : ' секундын');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' минут' : ' минутын');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' цаг' : ' цагийн');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' сар' : ' сарын');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' жил' : ' жилийн');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months : 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),
        monthsShort : '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),
        monthsParseExact : true,
        weekdays : 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
        weekdaysShort : 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
        weekdaysMin : 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY оны MMMMын D',
            LLL : 'YYYY оны MMMMын D HH:mm',
            LLLL : 'dddd, YYYY оны MMMMын D HH:mm'
        },
        meridiemParse: /ҮӨ|ҮХ/i,
        isPM : function (input) {
            return input === 'ҮХ';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ҮӨ';
            } else {
                return 'ҮХ';
            }
        },
        calendar : {
            sameDay : '[Өнөөдөр] LT',
            nextDay : '[Маргааш] LT',
            nextWeek : '[Ирэх] dddd LT',
            lastDay : '[Өчигдөр] LT',
            lastWeek : '[Өнгөрсөн] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s дараа',
            past : '%s өмнө',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' өдөр';
                default:
                    return number;
            }
        }
    });

    return mn;

})));


/***/ }),
/* 152 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mr.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    function relativeTimeMr(number, withoutSuffix, string, isFuture)
    {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's': output = 'काही सेकंद'; break;
                case 'ss': output = '%d सेकंद'; break;
                case 'm': output = 'एक मिनिट'; break;
                case 'mm': output = '%d मिनिटे'; break;
                case 'h': output = 'एक तास'; break;
                case 'hh': output = '%d तास'; break;
                case 'd': output = 'एक दिवस'; break;
                case 'dd': output = '%d दिवस'; break;
                case 'M': output = 'एक महिना'; break;
                case 'MM': output = '%d महिने'; break;
                case 'y': output = 'एक वर्ष'; break;
                case 'yy': output = '%d वर्षे'; break;
            }
        }
        else {
            switch (string) {
                case 's': output = 'काही सेकंदां'; break;
                case 'ss': output = '%d सेकंदां'; break;
                case 'm': output = 'एका मिनिटा'; break;
                case 'mm': output = '%d मिनिटां'; break;
                case 'h': output = 'एका तासा'; break;
                case 'hh': output = '%d तासां'; break;
                case 'd': output = 'एका दिवसा'; break;
                case 'dd': output = '%d दिवसां'; break;
                case 'M': output = 'एका महिन्या'; break;
                case 'MM': output = '%d महिन्यां'; break;
                case 'y': output = 'एका वर्षा'; break;
                case 'yy': output = '%d वर्षां'; break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
        monthsParseExact : true,
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm वाजता',
            LTS : 'A h:mm:ss वाजता',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm वाजता',
            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[उद्या] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळी') {
                return hour;
            } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात्री';
            } else if (hour < 10) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return mr;

})));


/***/ }),
/* 153 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ms.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ms = moment.defineLocale('ms', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            ss : '%d saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return ms;

})));


/***/ }),
/* 154 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ms-my.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var msMy = moment.defineLocale('ms-my', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            ss : '%d saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return msMy;

})));


/***/ }),
/* 155 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mt.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var mt = moment.defineLocale('mt', {
        months : 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
        monthsShort : 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
        weekdays : 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
        weekdaysShort : 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
        weekdaysMin : 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Illum fil-]LT',
            nextDay : '[Għada fil-]LT',
            nextWeek : 'dddd [fil-]LT',
            lastDay : '[Il-bieraħ fil-]LT',
            lastWeek : 'dddd [li għadda] [fil-]LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'f’ %s',
            past : '%s ilu',
            s : 'ftit sekondi',
            ss : '%d sekondi',
            m : 'minuta',
            mm : '%d minuti',
            h : 'siegħa',
            hh : '%d siegħat',
            d : 'ġurnata',
            dd : '%d ġranet',
            M : 'xahar',
            MM : '%d xhur',
            y : 'sena',
            yy : '%d sni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return mt;

})));


/***/ }),
/* 156 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/my.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    }, numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss : '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return my;

})));


/***/ }),
/* 157 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nb.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var nb = moment.defineLocale('nb', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact : true,
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] HH:mm',
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s siden',
            s : 'noen sekunder',
            ss : '%d sekunder',
            m : 'ett minutt',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dager',
            M : 'en måned',
            MM : '%d måneder',
            y : 'ett år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nb;

})));


/***/ }),
/* 158 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ne.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var ne = moment.defineLocale('ne', {
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
        monthsParseExact : true,
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'Aको h:mm बजे',
            LTS : 'Aको h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, Aको h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[भोलि] LT',
            nextWeek : '[आउँदो] dddd[,] LT',
            lastDay : '[हिजो] LT',
            lastWeek : '[गएको] dddd[,] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sमा',
            past : '%s अगाडि',
            s : 'केही क्षण',
            ss : '%d सेकेण्ड',
            m : 'एक मिनेट',
            mm : '%d मिनेट',
            h : 'एक घण्टा',
            hh : '%d घण्टा',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महिना',
            MM : '%d महिना',
            y : 'एक बर्ष',
            yy : '%d बर्ष'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return ne;

})));


/***/ }),
/* 159 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nl.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'over %s',
            past : '%s geleden',
            s : 'een paar seconden',
            ss : '%d seconden',
            m : 'één minuut',
            mm : '%d minuten',
            h : 'één uur',
            hh : '%d uur',
            d : 'één dag',
            dd : '%d dagen',
            M : 'één maand',
            MM : '%d maanden',
            y : 'één jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nl;

})));


/***/ }),
/* 160 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/nl-be.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'over %s',
            past : '%s geleden',
            s : 'een paar seconden',
            ss : '%d seconden',
            m : 'één minuut',
            mm : '%d minuten',
            h : 'één uur',
            hh : '%d uur',
            d : 'één dag',
            dd : '%d dagen',
            M : 'één maand',
            MM : '%d maanden',
            y : 'één jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nlBe;

})));


/***/ }),
/* 161 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nn.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var nn = moment.defineLocale('nn', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H:mm',
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s sidan',
            s : 'nokre sekund',
            ss : '%d sekund',
            m : 'eit minutt',
            mm : '%d minutt',
            h : 'ein time',
            hh : '%d timar',
            d : 'ein dag',
            dd : '%d dagar',
            M : 'ein månad',
            MM : '%d månader',
            y : 'eit år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nn;

})));


/***/ }),
/* 162 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pa-in.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '੧',
        '2': '੨',
        '3': '੩',
        '4': '੪',
        '5': '੫',
        '6': '੬',
        '7': '੭',
        '8': '੮',
        '9': '੯',
        '0': '੦'
    },
    numberMap = {
        '੧': '1',
        '੨': '2',
        '੩': '3',
        '੪': '4',
        '੫': '5',
        '੬': '6',
        '੭': '7',
        '੮': '8',
        '੯': '9',
        '੦': '0'
    };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm ਵਜੇ',
            LTS : 'A h:mm:ss ਵਜੇ',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
        },
        calendar : {
            sameDay : '[ਅਜ] LT',
            nextDay : '[ਕਲ] LT',
            nextWeek : '[ਅਗਲਾ] dddd, LT',
            lastDay : '[ਕਲ] LT',
            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ਵਿੱਚ',
            past : '%s ਪਿਛਲੇ',
            s : 'ਕੁਝ ਸਕਿੰਟ',
            ss : '%d ਸਕਿੰਟ',
            m : 'ਇਕ ਮਿੰਟ',
            mm : '%d ਮਿੰਟ',
            h : 'ਇੱਕ ਘੰਟਾ',
            hh : '%d ਘੰਟੇ',
            d : 'ਇੱਕ ਦਿਨ',
            dd : '%d ਦਿਨ',
            M : 'ਇੱਕ ਮਹੀਨਾ',
            MM : '%d ਮਹੀਨੇ',
            y : 'ਇੱਕ ਸਾਲ',
            yy : '%d ਸਾਲ'
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return paIn;

})));


/***/ }),
/* 163 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pl.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
    function plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix  ? 'godzina'  : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months : function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : '%s temu',
            s : 'kilka sekund',
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : '1 dzień',
            dd : '%d dni',
            M : 'miesiąc',
            MM : translate,
            y : 'rok',
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pl;

})));


/***/ }),
/* 164 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pt.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var pt = moment.defineLocale('pt', {
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : 'há %s',
            s : 'segundos',
            ss : '%d segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pt;

})));


/***/ }),
/* 165 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pt-br.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ptBr = moment.defineLocale('pt-br', {
        months : 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : 'há %s',
            s : 'poucos segundos',
            ss : '%d segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal : '%dº'
    });

    return ptBr;

})));


/***/ }),
/* 166 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ro.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'ss': 'secunde',
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'peste %s',
            past : '%s în urmă',
            s : 'câteva secunde',
            ss : relativeTimeWithPlural,
            m : 'un minut',
            mm : relativeTimeWithPlural,
            h : 'o oră',
            hh : relativeTimeWithPlural,
            d : 'o zi',
            dd : relativeTimeWithPlural,
            M : 'o lună',
            MM : relativeTimeWithPlural,
            y : 'un an',
            yy : relativeTimeWithPlural
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return ro;

})));


/***/ }),
/* 167 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ru.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months : {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
        },
        monthsShort : {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
        },
        weekdays : {
            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
        },
        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соотвествует только сокращённым формам
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., H:mm',
            LLLL : 'dddd, D MMMM YYYY г., H:mm'
        },
        calendar : {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'через %s',
            past : '%s назад',
            s : 'несколько секунд',
            ss : relativeTimeWithPlural,
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : 'час',
            hh : relativeTimeWithPlural,
            d : 'день',
            dd : relativeTimeWithPlural,
            M : 'месяц',
            MM : relativeTimeWithPlural,
            y : 'год',
            yy : relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM : function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ru;

})));


/***/ }),
/* 168 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sd.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'جنوري',
        'فيبروري',
        'مارچ',
        'اپريل',
        'مئي',
        'جون',
        'جولاءِ',
        'آگسٽ',
        'سيپٽمبر',
        'آڪٽوبر',
        'نومبر',
        'ڊسمبر'
    ];
    var days = [
        'آچر',
        'سومر',
        'اڱارو',
        'اربع',
        'خميس',
        'جمع',
        'ڇنڇر'
    ];

    var sd = moment.defineLocale('sd', {
        months : months,
        monthsShort : months,
        weekdays : days,
        weekdaysShort : days,
        weekdaysMin : days,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM : function (input) {
            return 'شام' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar : {
            sameDay : '[اڄ] LT',
            nextDay : '[سڀاڻي] LT',
            nextWeek : 'dddd [اڳين هفتي تي] LT',
            lastDay : '[ڪالهه] LT',
            lastWeek : '[گزريل هفتي] dddd [تي] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s پوء',
            past : '%s اڳ',
            s : 'چند سيڪنڊ',
            ss : '%d سيڪنڊ',
            m : 'هڪ منٽ',
            mm : '%d منٽ',
            h : 'هڪ ڪلاڪ',
            hh : '%d ڪلاڪ',
            d : 'هڪ ڏينهن',
            dd : '%d ڏينهن',
            M : 'هڪ مهينو',
            MM : '%d مهينا',
            y : 'هڪ سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sd;

})));


/***/ }),
/* 169 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/se.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var se = moment.defineLocale('se', {
        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'MMMM D. [b.] YYYY',
            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
        },
        calendar : {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s geažes',
            past : 'maŋit %s',
            s : 'moadde sekunddat',
            ss: '%d sekunddat',
            m : 'okta minuhta',
            mm : '%d minuhtat',
            h : 'okta diimmu',
            hh : '%d diimmut',
            d : 'okta beaivi',
            dd : '%d beaivvit',
            M : 'okta mánnu',
            MM : '%d mánut',
            y : 'okta jahki',
            yy : '%d jagit'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return se;

})));


/***/ }),
/* 170 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/si.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'a h:mm',
            LTS : 'a h:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY MMMM D',
            LLL : 'YYYY MMMM D, a h:mm',
            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
        },
        calendar : {
            sameDay : '[අද] LT[ට]',
            nextDay : '[හෙට] LT[ට]',
            nextWeek : 'dddd LT[ට]',
            lastDay : '[ඊයේ] LT[ට]',
            lastWeek : '[පසුගිය] dddd LT[ට]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sකින්',
            past : '%sකට පෙර',
            s : 'තත්පර කිහිපය',
            ss : 'තත්පර %d',
            m : 'මිනිත්තුව',
            mm : 'මිනිත්තු %d',
            h : 'පැය',
            hh : 'පැය %d',
            d : 'දිනය',
            dd : 'දින %d',
            M : 'මාසය',
            MM : 'මාස %d',
            y : 'වසර',
            yy : 'වසර %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal : function (number) {
            return number + ' වැනි';
        },
        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM : function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        }
    });

    return si;

})));


/***/ }),
/* 171 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sk.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return (n > 1) && (n < 5);
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':  // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
                } else {
                    return result + 'sekundami';
                }
                break;
            case 'm':  // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
                break;
            case 'h':  // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':  // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
                break;
            case 'M':  // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
                break;
            case 'y':  // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
                break;
        }
    }

    var sk = moment.defineLocale('sk', {
        months : months,
        monthsShort : monthsShort,
        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'pred %s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sk;

})));


/***/ }),
/* 172 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sl.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danes ob] LT',
            nextDay  : '[jutri ob] LT',

            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay  : '[včeraj ob] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'čez %s',
            past   : 'pred %s',
            s      : processRelativeTime,
            ss     : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : processRelativeTime,
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return sl;

})));


/***/ }),
/* 173 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sq.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var sq = moment.defineLocale('sq', {
        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact : true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Sot në] LT',
            nextDay : '[Nesër në] LT',
            nextWeek : 'dddd [në] LT',
            lastDay : '[Dje në] LT',
            lastWeek : 'dddd [e kaluar në] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'në %s',
            past : '%s më parë',
            s : 'disa sekonda',
            ss : '%d sekonda',
            m : 'një minutë',
            mm : '%d minuta',
            h : 'një orë',
            hh : '%d orë',
            d : 'një ditë',
            dd : '%d ditë',
            M : 'një muaj',
            MM : '%d muaj',
            y : 'një vit',
            yy : '%d vite'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sq;

})));


/***/ }),
/* 174 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sr.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'pre %s',
            s      : 'nekoliko sekundi',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'dan',
            dd     : translator.translate,
            M      : 'mesec',
            MM     : translator.translate,
            y      : 'godinu',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return sr;

})));


/***/ }),
/* 175 */
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/sr-cyrl.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay  : '[јуче у] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'за %s',
            past   : 'пре %s',
            s      : 'неколико секунди',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'дан',
            dd     : translator.translate,
            M      : 'месец',
            MM     : translator.translate,
            y      : 'годину',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return srCyrl;

})));


/***/ }),
/* 176 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ss.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ss = moment.defineLocale('ss', {
        months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
        monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
        weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Namuhla nga] LT',
            nextDay : '[Kusasa nga] LT',
            nextWeek : 'dddd [nga] LT',
            lastDay : '[Itolo nga] LT',
            lastWeek : 'dddd [leliphelile] [nga] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'nga %s',
            past : 'wenteka nga %s',
            s : 'emizuzwana lomcane',
            ss : '%d mzuzwana',
            m : 'umzuzu',
            mm : '%d emizuzu',
            h : 'lihora',
            hh : '%d emahora',
            d : 'lilanga',
            dd : '%d emalanga',
            M : 'inyanga',
            MM : '%d tinyanga',
            y : 'umnyaka',
            yy : '%d iminyaka'
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : '%d',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ss;

})));


/***/ }),
/* 177 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sv.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var sv = moment.defineLocale('sv', {
        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [kl.] HH:mm',
            LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : 'för %s sedan',
            s : 'några sekunder',
            ss : '%d sekunder',
            m : 'en minut',
            mm : '%d minuter',
            h : 'en timme',
            hh : '%d timmar',
            d : 'en dag',
            dd : '%d dagar',
            M : 'en månad',
            MM : '%d månader',
            y : 'ett år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sv;

})));


/***/ }),
/* 178 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sw.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var sw = moment.defineLocale('sw', {
        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[leo saa] LT',
            nextDay : '[kesho saa] LT',
            nextWeek : '[wiki ijayo] dddd [saat] LT',
            lastDay : '[jana] LT',
            lastWeek : '[wiki iliyopita] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s baadaye',
            past : 'tokea %s',
            s : 'hivi punde',
            ss : 'sekunde %d',
            m : 'dakika moja',
            mm : 'dakika %d',
            h : 'saa limoja',
            hh : 'masaa %d',
            d : 'siku moja',
            dd : 'masiku %d',
            M : 'mwezi mmoja',
            MM : 'miezi %d',
            y : 'mwaka mmoja',
            yy : 'miaka %d'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return sw;

})));


/***/ }),
/* 179 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ta.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '௧',
        '2': '௨',
        '3': '௩',
        '4': '௪',
        '5': '௫',
        '6': '௬',
        '7': '௭',
        '8': '௮',
        '9': '௯',
        '0': '௦'
    }, numberMap = {
        '௧': '1',
        '௨': '2',
        '௩': '3',
        '௪': '4',
        '௫': '5',
        '௬': '6',
        '௭': '7',
        '௮': '8',
        '௯': '9',
        '௦': '0'
    };

    var ta = moment.defineLocale('ta', {
        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, HH:mm',
            LLLL : 'dddd, D MMMM YYYY, HH:mm'
        },
        calendar : {
            sameDay : '[இன்று] LT',
            nextDay : '[நாளை] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[நேற்று] LT',
            lastWeek : '[கடந்த வாரம்] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s இல்',
            past : '%s முன்',
            s : 'ஒரு சில விநாடிகள்',
            ss : '%d விநாடிகள்',
            m : 'ஒரு நிமிடம்',
            mm : '%d நிமிடங்கள்',
            h : 'ஒரு மணி நேரம்',
            hh : '%d மணி நேரம்',
            d : 'ஒரு நாள்',
            dd : '%d நாட்கள்',
            M : 'ஒரு மாதம்',
            MM : '%d மாதங்கள்',
            y : 'ஒரு வருடம்',
            yy : '%d ஆண்டுகள்'
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal : function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem : function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை';  // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return ta;

})));


/***/ }),
/* 180 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/te.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var te = moment.defineLocale('te', {
        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
        monthsParseExact : true,
        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[నేడు] LT',
            nextDay : '[రేపు] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[నిన్న] LT',
            lastWeek : '[గత] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s లో',
            past : '%s క్రితం',
            s : 'కొన్ని క్షణాలు',
            ss : '%d సెకన్లు',
            m : 'ఒక నిమిషం',
            mm : '%d నిమిషాలు',
            h : 'ఒక గంట',
            hh : '%d గంటలు',
            d : 'ఒక రోజు',
            dd : '%d రోజులు',
            M : 'ఒక నెల',
            MM : '%d నెలలు',
            y : 'ఒక సంవత్సరం',
            yy : '%d సంవత్సరాలు'
        },
        dayOfMonthOrdinalParse : /\d{1,2}వ/,
        ordinal : '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 6th is the first week of the year.
        }
    });

    return te;

})));


/***/ }),
/* 181 */
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tet.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tet = moment.defineLocale('tet', {
        months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin : 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'iha %s',
            past : '%s liuba',
            s : 'minutu balun',
            ss : 'minutu %d',
            m : 'minutu ida',
            mm : 'minutu %d',
            h : 'oras ida',
            hh : 'oras %d',
            d : 'loron ida',
            dd : 'loron %d',
            M : 'fulan ida',
            MM : 'fulan %d',
            y : 'tinan ida',
            yy : 'tinan %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tet;

})));


/***/ }),
/* 182 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tg.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-ум',
        1: '-ум',
        2: '-юм',
        3: '-юм',
        4: '-ум',
        5: '-ум',
        6: '-ум',
        7: '-ум',
        8: '-ум',
        9: '-ум',
        10: '-ум',
        12: '-ум',
        13: '-ум',
        20: '-ум',
        30: '-юм',
        40: '-ум',
        50: '-ум',
        60: '-ум',
        70: '-ум',
        80: '-ум',
        90: '-ум',
        100: '-ум'
    };

    var tg = moment.defineLocale('tg', {
        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split('_'),
        weekdaysShort : 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
        weekdaysMin : 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Имрӯз соати] LT',
            nextDay : '[Пагоҳ соати] LT',
            lastDay : '[Дирӯз соати] LT',
            nextWeek : 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek : 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'баъди %s',
            past : '%s пеш',
            s : 'якчанд сония',
            m : 'як дақиқа',
            mm : '%d дақиқа',
            h : 'як соат',
            hh : '%d соат',
            d : 'як рӯз',
            dd : '%d рӯз',
            M : 'як моҳ',
            MM : '%d моҳ',
            y : 'як сол',
            yy : '%d сол'
        },
        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'шаб') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
                return hour;
            } else if (meridiem === 'рӯз') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'шаб';
            } else if (hour < 11) {
                return 'субҳ';
            } else if (hour < 16) {
                return 'рӯз';
            } else if (hour < 19) {
                return 'бегоҳ';
            } else {
                return 'шаб';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1th is the first week of the year.
        }
    });

    return tg;

})));


/***/ }),
/* 183 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/th.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var th = moment.defineLocale('th', {
        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
        monthsParseExact: true,
        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY เวลา H:mm',
            LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar : {
            sameDay : '[วันนี้ เวลา] LT',
            nextDay : '[พรุ่งนี้ เวลา] LT',
            nextWeek : 'dddd[หน้า เวลา] LT',
            lastDay : '[เมื่อวานนี้ เวลา] LT',
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'อีก %s',
            past : '%sที่แล้ว',
            s : 'ไม่กี่วินาที',
            ss : '%d วินาที',
            m : '1 นาที',
            mm : '%d นาที',
            h : '1 ชั่วโมง',
            hh : '%d ชั่วโมง',
            d : '1 วัน',
            dd : '%d วัน',
            M : '1 เดือน',
            MM : '%d เดือน',
            y : '1 ปี',
            yy : '%d ปี'
        }
    });

    return th;

})));


/***/ }),
/* 184 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/tl-ph.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tlPh = moment.defineLocale('tl-ph', {
        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'MM/D/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY HH:mm',
            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
        },
        calendar : {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'sa loob ng %s',
            past : '%s ang nakalipas',
            s : 'ilang segundo',
            ss : '%d segundo',
            m : 'isang minuto',
            mm : '%d minuto',
            h : 'isang oras',
            hh : '%d oras',
            d : 'isang araw',
            dd : '%d araw',
            M : 'isang buwan',
            MM : '%d buwan',
            y : 'isang taon',
            yy : '%d taon'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlPh;

})));


/***/ }),
/* 185 */
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tlh.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
        time.slice(0, -3) + 'leS' :
        (output.indexOf('jar') !== -1) ?
        time.slice(0, -3) + 'waQ' :
        (output.indexOf('DIS') !== -1) ?
        time.slice(0, -3) + 'nem' :
        time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
        time.slice(0, -3) + 'Hu’' :
        (output.indexOf('jar') !== -1) ?
        time.slice(0, -3) + 'wen' :
        (output.indexOf('DIS') !== -1) ?
        time.slice(0, -3) + 'ben' :
        time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
        ten = Math.floor((number % 100) / 10),
        one = number % 10,
        word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
        }
        return (word === '') ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
        monthsParseExact : true,
        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L'
        },
        relativeTime : {
            future : translateFuture,
            past : translatePast,
            s : 'puS lup',
            ss : translate,
            m : 'wa’ tup',
            mm : translate,
            h : 'wa’ rep',
            hh : translate,
            d : 'wa’ jaj',
            dd : translate,
            M : 'wa’ jar',
            MM : translate,
            y : 'wa’ DIS',
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlh;

})));


/***/ }),
/* 186 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tr.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {


;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

    var suffixes = {
        1: '\'inci',
        5: '\'inci',
        8: '\'inci',
        70: '\'inci',
        80: '\'inci',
        2: '\'nci',
        7: '\'nci',
        20: '\'nci',
        50: '\'nci',
        3: '\'üncü',
        4: '\'üncü',
        100: '\'üncü',
        6: '\'ncı',
        9: '\'uncu',
        10: '\'uncu',
        30: '\'uncu',
        60: '\'ıncı',
        90: '\'ıncı'
    };

    var tr = moment.defineLocale('tr', {
        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[yarın saat] LT',
            nextWeek : '[gelecek] dddd [saat] LT',
            lastDay : '[dün] LT',
            lastWeek : '[geçen] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s önce',
            s : 'birkaç saniye',
            ss : '%d saniye',
            m : 'bir dakika',
            mm : '%d dakika',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir yıl',
            yy : '%d yıl'
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {  // special case for zero
                        return number + '\'ıncı';
                    }
                    var a = number % 10,
                        b = number % 100 - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return tr;

})));


/***/ }),
/* 187 */
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzl.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM [dallas] YYYY',
            LLL : 'D. MMMM [dallas] YYYY HH.mm',
            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM : function (input) {
            return 'd\'o' === input.toLowerCase();
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
            } else {
                return isLower ? 'd\'a' : 'D\'A';
            }
        },
        calendar : {
            sameDay : '[oxhi à] LT',
            nextDay : '[demà à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[ieiri à] LT',
            lastWeek : '[sür el] dddd [lasteu à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'osprei %s',
            past : 'ja%s',
            s : processRelativeTime,
            ss : processRelativeTime,
            m : processRelativeTime,
            mm : processRelativeTime,
            h : processRelativeTime,
            hh : processRelativeTime,
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['viensas secunds', '\'iensas secunds'],
            'ss': [number + ' secunds', '' + number + ' secunds'],
            'm': ['\'n míut', '\'iens míut'],
            'mm': [number + ' míuts', '' + number + ' míuts'],
            'h': ['\'n þora', '\'iensa þora'],
            'hh': [number + ' þoras', '' + number + ' þoras'],
            'd': ['\'n ziua', '\'iensa ziua'],
            'dd': [number + ' ziuas', '' + number + ' ziuas'],
            'M': ['\'n mes', '\'iens mes'],
            'MM': [number + ' mesen', '' + number + ' mesen'],
            'y': ['\'n ar', '\'iens ar'],
            'yy': [number + ' ars', '' + number + ' ars']
        };
        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
    }

    return tzl;

})));


/***/ }),
/* 188 */
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzm.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tzm = moment.defineLocale('tzm', {
        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past : 'ⵢⴰⵏ %s',
            s : 'ⵉⵎⵉⴽ',
            ss : '%d ⵉⵎⵉⴽ',
            m : 'ⵎⵉⵏⵓⴺ',
            mm : '%d ⵎⵉⵏⵓⴺ',
            h : 'ⵙⴰⵄⴰ',
            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d : 'ⴰⵙⵙ',
            dd : '%d oⵙⵙⴰⵏ',
            M : 'ⴰⵢoⵓⵔ',
            MM : '%d ⵉⵢⵢⵉⵔⵏ',
            y : 'ⴰⵙⴳⴰⵙ',
            yy : '%d ⵉⵙⴳⴰⵙⵏ'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return tzm;

})));


/***/ }),
/* 189 */
/*!************************************************!*\
  !*** ./node_modules/moment/locale/tzm-latn.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tzmLatn = moment.defineLocale('tzm-latn', {
        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'dadkh s yan %s',
            past : 'yan %s',
            s : 'imik',
            ss : '%d imik',
            m : 'minuḍ',
            mm : '%d minuḍ',
            h : 'saɛa',
            hh : '%d tassaɛin',
            d : 'ass',
            dd : '%d ossan',
            M : 'ayowr',
            MM : '%d iyyirn',
            y : 'asgas',
            yy : '%d isgasn'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 12th is the first week of the year.
        }
    });

    return tzmLatn;

})));


/***/ }),
/* 190 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ug-cn.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js language configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ugCn = moment.defineLocale('ug-cn', {
        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        monthsShort: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
            '_'
        ),
        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm'
        },
        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'يېرىم كېچە' ||
                meridiem === 'سەھەر' ||
                meridiem === 'چۈشتىن بۇرۇن'
            ) {
                return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'يېرىم كېچە';
            } else if (hm < 900) {
                return 'سەھەر';
            } else if (hm < 1130) {
                return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
                return 'چۈش';
            } else if (hm < 1800) {
                return 'چۈشتىن كېيىن';
            } else {
                return 'كەچ';
            }
        },
        calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل'
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-كۈنى';
                case 'w':
                case 'W':
                    return number + '-ھەپتە';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ugCn;

})));


/***/ }),
/* 191 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uk.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        };

        if (m === true) {
            return weekdays['nominative'].slice(1, 7).concat(weekdays['nominative'].slice(0, 1));
        }
        if (!m) {
            return weekdays['nominative'];
        }

        var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months : {
            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
        },
        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY р.',
            LLL : 'D MMMM YYYY р., HH:mm',
            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
        },
        calendar : {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'за %s',
            past : '%s тому',
            s : 'декілька секунд',
            ss : relativeTimeWithPlural,
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : 'годину',
            hh : relativeTimeWithPlural,
            d : 'день',
            dd : relativeTimeWithPlural,
            M : 'місяць',
            MM : relativeTimeWithPlural,
            y : 'рік',
            yy : relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return uk;

})));


/***/ }),
/* 192 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ur.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'جنوری',
        'فروری',
        'مارچ',
        'اپریل',
        'مئی',
        'جون',
        'جولائی',
        'اگست',
        'ستمبر',
        'اکتوبر',
        'نومبر',
        'دسمبر'
    ];
    var days = [
        'اتوار',
        'پیر',
        'منگل',
        'بدھ',
        'جمعرات',
        'جمعہ',
        'ہفتہ'
    ];

    var ur = moment.defineLocale('ur', {
        months : months,
        monthsShort : months,
        weekdays : days,
        weekdaysShort : days,
        weekdaysMin : days,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM : function (input) {
            return 'شام' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar : {
            sameDay : '[آج بوقت] LT',
            nextDay : '[کل بوقت] LT',
            nextWeek : 'dddd [بوقت] LT',
            lastDay : '[گذشتہ روز بوقت] LT',
            lastWeek : '[گذشتہ] dddd [بوقت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s بعد',
            past : '%s قبل',
            s : 'چند سیکنڈ',
            ss : '%d سیکنڈ',
            m : 'ایک منٹ',
            mm : '%d منٹ',
            h : 'ایک گھنٹہ',
            hh : '%d گھنٹے',
            d : 'ایک دن',
            dd : '%d دن',
            M : 'ایک ماہ',
            MM : '%d ماہ',
            y : 'ایک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ur;

})));


/***/ }),
/* 193 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uz.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var uz = moment.defineLocale('uz', {
        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'D MMMM YYYY, dddd HH:mm'
        },
        calendar : {
            sameDay : '[Бугун соат] LT [да]',
            nextDay : '[Эртага] LT [да]',
            nextWeek : 'dddd [куни соат] LT [да]',
            lastDay : '[Кеча соат] LT [да]',
            lastWeek : '[Утган] dddd [куни соат] LT [да]',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'Якин %s ичида',
            past : 'Бир неча %s олдин',
            s : 'фурсат',
            ss : '%d фурсат',
            m : 'бир дакика',
            mm : '%d дакика',
            h : 'бир соат',
            hh : '%d соат',
            d : 'бир кун',
            dd : '%d кун',
            M : 'бир ой',
            MM : '%d ой',
            y : 'бир йил',
            yy : '%d йил'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return uz;

})));


/***/ }),
/* 194 */
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/uz-latn.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var uzLatn = moment.defineLocale('uz-latn', {
        months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
        monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
        weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'D MMMM YYYY, dddd HH:mm'
        },
        calendar : {
            sameDay : '[Bugun soat] LT [da]',
            nextDay : '[Ertaga] LT [da]',
            nextWeek : 'dddd [kuni soat] LT [da]',
            lastDay : '[Kecha soat] LT [da]',
            lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'Yaqin %s ichida',
            past : 'Bir necha %s oldin',
            s : 'soniya',
            ss : '%d soniya',
            m : 'bir daqiqa',
            mm : '%d daqiqa',
            h : 'bir soat',
            hh : '%d soat',
            d : 'bir kun',
            dd : '%d kun',
            M : 'bir oy',
            MM : '%d oy',
            y : 'bir yil',
            yy : '%d yil'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 7th is the first week of the year.
        }
    });

    return uzLatn;

})));


/***/ }),
/* 195 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/vi.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var vi = moment.defineLocale('vi', {
        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        monthsParseExact : true,
        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact : true,
        meridiemParse: /sa|ch/i,
        isPM : function (input) {
            return /^ch$/i.test(input);
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM [năm] YYYY',
            LLL : 'D MMMM [năm] YYYY HH:mm',
            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
            l : 'DD/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s tới',
            past : '%s trước',
            s : 'vài giây',
            ss : '%d giây' ,
            m : 'một phút',
            mm : '%d phút',
            h : 'một giờ',
            hh : '%d giờ',
            d : 'một ngày',
            dd : '%d ngày',
            M : 'một tháng',
            MM : '%d tháng',
            y : 'một năm',
            yy : '%d năm'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return vi;

})));


/***/ }),
/* 196 */
/*!************************************************!*\
  !*** ./node_modules/moment/locale/x-pseudo.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var xPseudo = moment.defineLocale('x-pseudo', {
        months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
        monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
        monthsParseExact : true,
        weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
        weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[T~ódá~ý át] LT',
            nextDay : '[T~ómó~rró~w át] LT',
            nextWeek : 'dddd [át] LT',
            lastDay : '[Ý~ést~érdá~ý át] LT',
            lastWeek : '[L~ást] dddd [át] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'í~ñ %s',
            past : '%s á~gó',
            s : 'á ~féw ~sécó~ñds',
            ss : '%d s~écóñ~ds',
            m : 'á ~míñ~úté',
            mm : '%d m~íñú~tés',
            h : 'á~ñ hó~úr',
            hh : '%d h~óúrs',
            d : 'á ~dáý',
            dd : '%d d~áýs',
            M : 'á ~móñ~th',
            MM : '%d m~óñt~hs',
            y : 'á ~ýéár',
            yy : '%d ý~éárs'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return xPseudo;

})));


/***/ }),
/* 197 */
/*!******************************************!*\
  !*** ./node_modules/moment/locale/yo.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var yo = moment.defineLocale('yo', {
        months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
        monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Ònì ni] LT',
            nextDay : '[Ọ̀la ni] LT',
            nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
            lastDay : '[Àna ni] LT',
            lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ní %s',
            past : '%s kọjá',
            s : 'ìsẹjú aayá die',
            ss :'aayá %d',
            m : 'ìsẹjú kan',
            mm : 'ìsẹjú %d',
            h : 'wákati kan',
            hh : 'wákati %d',
            d : 'ọjọ́ kan',
            dd : 'ọjọ́ %d',
            M : 'osù kan',
            MM : 'osù %d',
            y : 'ọdún kan',
            yy : 'ọdún %d'
        },
        dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
        ordinal : 'ọjọ́ %d',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return yo;

})));


/***/ }),
/* 198 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-cn.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var zhCn = moment.defineLocale('zh-cn', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日Ah点mm分',
            LLLL : 'YYYY年M月D日ddddAh点mm分',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' ||
                    meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime : {
            future : '%s内',
            past : '%s前',
            s : '几秒',
            ss : '%d 秒',
            m : '1 分钟',
            mm : '%d 分钟',
            h : '1 小时',
            hh : '%d 小时',
            d : '1 天',
            dd : '%d 天',
            M : '1 个月',
            MM : '%d 个月',
            y : '1 年',
            yy : '%d 年'
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return zhCn;

})));


/***/ }),
/* 199 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-hk.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var zhHk = moment.defineLocale('zh-hk', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日dddd HH:mm',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd' :
                case 'D' :
                case 'DDD' :
                    return number + '日';
                case 'M' :
                    return number + '月';
                case 'w' :
                case 'W' :
                    return number + '週';
                default :
                    return number;
            }
        },
        relativeTime : {
            future : '%s內',
            past : '%s前',
            s : '幾秒',
            ss : '%d 秒',
            m : '1 分鐘',
            mm : '%d 分鐘',
            h : '1 小時',
            hh : '%d 小時',
            d : '1 天',
            dd : '%d 天',
            M : '1 個月',
            MM : '%d 個月',
            y : '1 年',
            yy : '%d 年'
        }
    });

    return zhHk;

})));


/***/ }),
/* 200 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-tw.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ 0)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var zhTw = moment.defineLocale('zh-tw', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日dddd HH:mm',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天] LT',
            nextDay : '[明天] LT',
            nextWeek : '[下]dddd LT',
            lastDay : '[昨天] LT',
            lastWeek : '[上]dddd LT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd' :
                case 'D' :
                case 'DDD' :
                    return number + '日';
                case 'M' :
                    return number + '月';
                case 'w' :
                case 'W' :
                    return number + '週';
                default :
                    return number;
            }
        },
        relativeTime : {
            future : '%s內',
            past : '%s前',
            s : '幾秒',
            ss : '%d 秒',
            m : '1 分鐘',
            mm : '%d 分鐘',
            h : '1 小時',
            hh : '%d 小時',
            d : '1 天',
            dd : '%d 天',
            M : '1 個月',
            MM : '%d 個月',
            y : '1 年',
            yy : '%d 年'
        }
    });

    return zhTw;

})));


/***/ }),
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */
/*!***********************!*\
  !*** ./src/blocks.js ***!
  \***********************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__block_globals_editor_scss__ = __webpack_require__(/*! ./block-globals.editor.scss */ 207);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__block_globals_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__block_globals_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__blocks_i18n_js__ = __webpack_require__(/*! ./blocks/i18n.js */ 208);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__blocks_i18n_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__blocks_i18n_js__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__blocks_block_sharing__ = __webpack_require__(/*! ./blocks/block-sharing */ 209);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__blocks_block_cta__ = __webpack_require__(/*! ./blocks/block-cta */ 216);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__blocks_block_heading__ = __webpack_require__(/*! ./blocks/block-heading */ 225);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__blocks_block_grid_container__ = __webpack_require__(/*! ./blocks/block-grid-container */ 235);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__blocks_block_horizontal_tabs__ = __webpack_require__(/*! ./blocks/block-horizontal-tabs */ 249);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__blocks_block_vertical_tabs__ = __webpack_require__(/*! ./blocks/block-vertical-tabs */ 258);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__blocks_block_toggles__ = __webpack_require__(/*! ./blocks/block-toggles */ 268);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__blocks_block_posts_grid__ = __webpack_require__(/*! ./blocks/block-posts-grid */ 279);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__blocks_block_carousel__ = __webpack_require__(/*! ./blocks/block-carousel */ 287);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__blocks_block_image_carousel__ = __webpack_require__(/*! ./blocks/block-image-carousel */ 295);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__blocks_block_column_container__ = __webpack_require__(/*! ./blocks/block-column-container */ 303);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__blocks_block_column_container_components_column_js__ = __webpack_require__(/*! ./blocks/block-column-container/components/column.js */ 381);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__blocks_block_horizontal_tabs_components_horizontal_tab_js__ = __webpack_require__(/*! ./blocks/block-horizontal-tabs/components/horizontal-tab.js */ 382);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__blocks_block_vertical_tabs_components_vertical_tab_js__ = __webpack_require__(/*! ./blocks/block-vertical-tabs/components/vertical-tab.js */ 383);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__blocks_block_toggles_components_toggle_js__ = __webpack_require__(/*! ./blocks/block-toggles/components/toggle.js */ 384);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__blocks_block_carousel_components_slide_js__ = __webpack_require__(/*! ./blocks/block-carousel/components/slide.js */ 387);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__blocks_block_post_grid__ = __webpack_require__(/*! ./blocks/block-post-grid */ 388);
/**
 * Gutenberg Blocks
 *
 * All blocks related JavaScript files should be imported here.
 * You can create a new block folder in this dir and include code
 * for that block here as well.
 *
 * All blocks should be included here since this is the file that
 * Webpack is compiling as the input file.
 */

/**
 * Import global styles.
 */


// set locale


// main blocks











// child blocks








/***/ }),
/* 207 */
/*!***************************************!*\
  !*** ./src/block-globals.editor.scss ***!
  \***************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 208 */
/*!****************************!*\
  !*** ./src/blocks/i18n.js ***!
  \****************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

wp.i18n.setLocaleData({ "": {} }, "c9-blocks");

/***/ }),
/* 209 */
/*!*******************************************!*\
  !*** ./src/blocks/block-sharing/index.js ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 210);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 213);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 214);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_social_share_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-social-share.svg */ 215);


// Import CSS



// Import Fontawesome Icon


// Components
var __ = wp.i18n.__;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/social-share", {
	title: __("C9 Social Share", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_social_share_svg__["a" /* default */],
	category: "c9-blocks",
	keywords: [__("share", "c9-blocks"), __("social", "c9-blocks")],

	// Render the block components
	edit: __WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */],

	// Render via PHP
	save: function save() {
		return null;
	}
});

/***/ }),
/* 210 */
/*!******************************************!*\
  !*** ./src/blocks/block-sharing/edit.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 211);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_sharing__ = __webpack_require__(/*! ./components/sharing */ 212);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/anchor-is-valid */
// Import block dependencies and components



// Register editor components
var _wp$editor = wp.editor,
    AlignmentToolbar = _wp$editor.AlignmentToolbar,
    BlockControls = _wp$editor.BlockControls;

// Extend component

var Component = wp.element.Component;

// Components

var __ = wp.i18n.__;

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		return _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));
	}

	_createClass(Edit, [{
		key: "render",
		value: function render() {
			// Setup the props
			var setAttributes = this.props.setAttributes;
			var _props$attributes = this.props.attributes,
			    twitter = _props$attributes.twitter,
			    facebook = _props$attributes.facebook,
			    google = _props$attributes.google,
			    linkedin = _props$attributes.linkedin,
			    pinterest = _props$attributes.pinterest,
			    email = _props$attributes.email,
			    reddit = _props$attributes.reddit,
			    shareAlignment = _props$attributes.shareAlignment;


			return [
			// Show the alignment toolbar on focus
			wp.element.createElement(
				BlockControls,
				{ key: "controls" },
				wp.element.createElement(AlignmentToolbar, {
					value: shareAlignment,
					onChange: function onChange(value) {
						setAttributes({ shareAlignment: value });
					}
				})
			),
			// Show the block controls on focus
			wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__components_inspector__["a" /* default */], this.props),
			// Show the button markup in the editor
			wp.element.createElement(
				__WEBPACK_IMPORTED_MODULE_1__components_sharing__["a" /* default */],
				this.props,
				!twitter && !facebook && !google && !linkedin && !pinterest && !email && !reddit && wp.element.createElement(
					"span",
					{ className: "text-danger" },
					"Choose a sharing link to display... otherwise remove this block."
				),
				wp.element.createElement(
					"ul",
					{ className: "c9-share-list" },
					twitter && wp.element.createElement(
						"li",
						null,
						wp.element.createElement(
							"a",
							{ className: "c9-share-twitter" },
							wp.element.createElement("i", { className: "fab fa-twitter" }),
							wp.element.createElement(
								"span",
								{ className: "c9-social-text" },
								__("Share on Twitter", "c9-blocks")
							),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"(Link opens in new window)"
							)
						)
					),
					facebook && wp.element.createElement(
						"li",
						null,
						wp.element.createElement(
							"a",
							{ className: "c9-share-facebook" },
							wp.element.createElement("i", { className: "fab fa-facebook-f" }),
							wp.element.createElement(
								"span",
								{ className: "c9-social-text" },
								__("Share on Facebook", "c9-blocks")
							),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"(Link opens in new window)"
							)
						)
					),
					pinterest && wp.element.createElement(
						"li",
						null,
						wp.element.createElement(
							"a",
							{ className: "c9-share-pinterest" },
							wp.element.createElement("i", { className: "fab fa-pinterest-p" }),
							wp.element.createElement(
								"span",
								{ className: "c9-social-text" },
								__("Share on Pinterest", "c9-blocks")
							),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"(Link opens in new window)"
							)
						)
					),
					linkedin && wp.element.createElement(
						"li",
						null,
						wp.element.createElement(
							"a",
							{ className: "c9-share-linkedin" },
							wp.element.createElement("i", { className: "fab fa-linkedin" }),
							wp.element.createElement(
								"span",
								{ className: "c9-social-text" },
								__("Share on LinkedIn", "c9-blocks")
							),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"(Link opens in new window)"
							)
						)
					),
					reddit && wp.element.createElement(
						"li",
						null,
						wp.element.createElement(
							"a",
							{ className: "c9-share-reddit" },
							wp.element.createElement("i", { className: "fab fa-reddit-alien" }),
							wp.element.createElement(
								"span",
								{ className: "c9-social-text" },
								__("Share on reddit", "c9-blocks")
							),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"(Link opens in new window)"
							)
						)
					),
					email && wp.element.createElement(
						"li",
						null,
						wp.element.createElement(
							"a",
							{ className: "c9-share-email" },
							wp.element.createElement("i", { className: "fas fa-envelope" }),
							wp.element.createElement(
								"span",
								{ className: "c9-social-text" },
								__("Share via Email", "c9-blocks")
							),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"(Link opens in new window)"
							)
						)
					)
				)
			)];
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Edit);

/***/ }),
/* 211 */
/*!**********************************************************!*\
  !*** ./src/blocks/block-sharing/components/inspector.js ***!
  \**********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Inspector Controls
 */

// Setup the block
var __ = wp.i18n.__;
var Component = wp.element.Component;

// Import block components

var InspectorControls = wp.editor.InspectorControls;

// Import Inspector components

var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		return _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			// Setup the attributes
			var _props$attributes = this.props.attributes,
			    twitter = _props$attributes.twitter,
			    facebook = _props$attributes.facebook,
			    linkedin = _props$attributes.linkedin,
			    pinterest = _props$attributes.pinterest,
			    email = _props$attributes.email,
			    reddit = _props$attributes.reddit,
			    shareButtonStyle = _props$attributes.shareButtonStyle,
			    shareButtonShape = _props$attributes.shareButtonShape,
			    shareButtonSize = _props$attributes.shareButtonSize,
			    shareButtonColor = _props$attributes.shareButtonColor;

			// Button style values

			var buttonStyleOptions = [{ value: "c9-share-icon-text", label: __("Icon and Text") }, { value: "c9-share-icon-only", label: __("Icon Only") }, { value: "c9-share-text-only", label: __("Text Only") }];

			// Button shape values
			var buttonShapeOptions = [{ value: "c9-share-shape-square", label: __("Square") }, { value: "c9-share-shape-rounded", label: __("Rounded Square") }, { value: "c9-share-shape-circular", label: __("Circular") }];

			// Button size values
			var shareButtonSizeOptions = [{ value: "c9-share-size-small", label: __("Small") }, { value: "c9-share-size-medium", label: __("Medium") }, { value: "c9-share-size-large", label: __("Large") }];

			// Button color values
			var shareButtonColorOptions = [{ value: "c9-share-color-standard", label: __("Standard") }, { value: "c9-share-color-social", label: __("Social Colors") }];

			return wp.element.createElement(
				InspectorControls,
				{ key: "inspector" },
				wp.element.createElement(
					PanelBody,
					null,
					wp.element.createElement(
						"p",
						null,
						__("Enable or disable the sharing links you want to output.")
					),
					wp.element.createElement(ToggleControl, {
						label: __("Twitter"),
						checked: !!twitter,
						onChange: function onChange() {
							return _this2.props.setAttributes({ twitter: !twitter });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Facebook"),
						checked: !!facebook,
						onChange: function onChange() {
							return _this2.props.setAttributes({ facebook: !facebook });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Pinterest"),
						checked: !!pinterest,
						onChange: function onChange() {
							return _this2.props.setAttributes({ pinterest: !pinterest });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("LinkedIn"),
						checked: !!linkedin,
						onChange: function onChange() {
							return _this2.props.setAttributes({ linkedin: !linkedin });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Reddit"),
						checked: !!reddit,
						onChange: function onChange() {
							return _this2.props.setAttributes({ reddit: !reddit });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Email"),
						checked: !!email,
						onChange: function onChange() {
							return _this2.props.setAttributes({ email: !email });
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Sharing Button Options"), initialOpen: false },
					wp.element.createElement(SelectControl, {
						label: __("Button Style"),
						value: shareButtonStyle,
						options: buttonStyleOptions.map(function (_ref) {
							var value = _ref.value,
							    label = _ref.label;
							return {
								value: value,
								label: label
							};
						}),
						onChange: function onChange(value) {
							_this2.props.setAttributes({ shareButtonStyle: value });
						}
					}),
					wp.element.createElement(SelectControl, {
						label: __("Button Shape"),
						value: shareButtonShape,
						options: buttonShapeOptions.map(function (_ref2) {
							var value = _ref2.value,
							    label = _ref2.label;
							return {
								value: value,
								label: label
							};
						}),
						onChange: function onChange(value) {
							_this2.props.setAttributes({ shareButtonShape: value });
						}
					}),
					wp.element.createElement(SelectControl, {
						label: __("Button Size"),
						value: shareButtonSize,
						options: shareButtonSizeOptions.map(function (_ref3) {
							var value = _ref3.value,
							    label = _ref3.label;
							return {
								value: value,
								label: label
							};
						}),
						onChange: function onChange(value) {
							_this2.props.setAttributes({ shareButtonSize: value });
						}
					}),
					wp.element.createElement(SelectControl, {
						label: __("Button Color"),
						value: shareButtonColor,
						options: shareButtonColorOptions.map(function (_ref4) {
							var value = _ref4.value,
							    label = _ref4.label;
							return {
								value: value,
								label: label
							};
						}),
						onChange: function onChange(value) {
							_this2.props.setAttributes({ shareButtonColor: value });
						}
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 212 */
/*!********************************************************!*\
  !*** ./src/blocks/block-sharing/components/sharing.js ***!
  \********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Sharing Wrapper
 */

// Setup the block
var Component = wp.element.Component;

// Import block dependencies and components



var applyFilters = wp.hooks.applyFilters;

/**
 * Create a ShareLinks wrapper Component
 */

var ShareLinks = function (_Component) {
	_inherits(ShareLinks, _Component);

	function ShareLinks() {
		_classCallCheck(this, ShareLinks);

		return _possibleConstructorReturn(this, (ShareLinks.__proto__ || Object.getPrototypeOf(ShareLinks)).apply(this, arguments));
	}

	_createClass(ShareLinks, [{
		key: "render",
		value: function render() {
			var _props = this.props,
			    _props$attributes = _props.attributes,
			    shareButtonStyle = _props$attributes.shareButtonStyle,
			    shareButtonShape = _props$attributes.shareButtonShape,
			    shareButtonSize = _props$attributes.shareButtonSize,
			    shareButtonColor = _props$attributes.shareButtonColor,
			    shareAlignment = _props$attributes.shareAlignment,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className;


			return wp.element.createElement(
				"div",
				{
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), shareButtonStyle, shareButtonShape, shareButtonSize, shareButtonColor, shareAlignment, "c9-block-sharing")
				},
				this.props.children
			);
		}
	}]);

	return ShareLinks;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (ShareLinks);

/***/ }),
/* 213 */
/*!****************************************************!*\
  !*** ./src/blocks/block-sharing/styles/style.scss ***!
  \****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 214 */
/*!*****************************************************!*\
  !*** ./src/blocks/block-sharing/styles/editor.scss ***!
  \*****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 215 */
/*!*****************************************!*\
  !*** ./assets/icon-c9-social-share.svg ***!
  \*****************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-social-share_svg__cls-2{fill:#fff}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  d: "M2 24a5 5 0 115 5 5 5 0 01-5-5zm5.62 1.88l2.48-2.48-2.49-2.52v1.23h-.54a3.87 3.87 0 00-.67.17 3.74 3.74 0 00-1.58 1 3.56 3.56 0 00-.61.93 3.34 3.34 0 00-.3 1 3.53 3.53 0 00-.05.56 3.07 3.07 0 01.41-.47 2.88 2.88 0 011.16-.67 4 4 0 011-.17 5 5 0 01.94.06h.19z",
  fill: "#3b5999"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-social-share_svg__cls-2",
  d: "M7.61 25.85v-1.24h-.19a5 5 0 00-.94-.06 4 4 0 00-1 .17 2.88 2.88 0 00-1.16.67 3.07 3.07 0 00-.41.47 3.53 3.53 0 01.05-.56 3.34 3.34 0 01.3-1 3.56 3.56 0 01.61-.93 3.74 3.74 0 011.58-1 3.87 3.87 0 01.67-.17h.54v-1.32l2.49 2.49-2.53 2.48z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  d: "M13.32 24a5 5 0 115 5 5 5 0 01-5-5zm5.62 1.88l2.49-2.48-2.5-2.49v1.23h-.5a3.87 3.87 0 00-.67.17 3.74 3.74 0 00-1.58 1 3.83 3.83 0 00-.61.93 4.11 4.11 0 00-.3 1 3.53 3.53 0 00-.05.56 2.88 2.88 0 011.56-1.14 4 4 0 011-.17 4.9 4.9 0 01.94.06h.19z",
  fill: "#2baae1"
});

var _ref5 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-social-share_svg__cls-2",
  d: "M18.94 25.85v-1.24h-.19a4.9 4.9 0 00-.94-.06 4 4 0 00-1 .17 2.88 2.88 0 00-1.56 1.14 3.53 3.53 0 01.05-.56 4.11 4.11 0 01.3-1 3.83 3.83 0 01.61-.93 3.74 3.74 0 011.58-1 3.87 3.87 0 01.67-.17h.5v-1.32l2.5 2.49L19 25.85z"
});

var _ref6 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  d: "M24.65 24a5 5 0 115 5 5 5 0 01-5-5zm5.62 1.88l2.49-2.48-2.5-2.49v1.23h-.49a4 4 0 00-.68.17 3.7 3.7 0 00-1.57 1 3.87 3.87 0 00-.62.93 4.11 4.11 0 00-.3 1 3.52 3.52 0 000 .56 2.61 2.61 0 01.41-.47 2.91 2.91 0 011.15-.67 4.11 4.11 0 011-.17 4.85 4.85 0 01.93.06h.19z",
  fill: "#f15922"
});

var _ref7 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-social-share_svg__cls-2",
  d: "M30.27 25.85v-1.24h-.19a4.85 4.85 0 00-.93-.06 4.11 4.11 0 00-1 .17 2.91 2.91 0 00-1.15.67 2.61 2.61 0 00-.41.47 3.52 3.52 0 010-.56 4.11 4.11 0 01.3-1 3.87 3.87 0 01.62-.93 3.7 3.7 0 011.57-1 4 4 0 01.68-.17h.49v-1.32l2.5 2.49-2.49 2.48z"
});

var _ref8 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  d: "M36 24a5 5 0 115 5 5 5 0 01-5-5zm5.62 1.88l2.48-2.48-2.49-2.49v1.23h-.49a3.87 3.87 0 00-.67.17 3.74 3.74 0 00-1.58 1 3.56 3.56 0 00-.61.93 3.34 3.34 0 00-.3 1 3.53 3.53 0 000 .56 3.07 3.07 0 01.41-.47 2.88 2.88 0 011.16-.67 4 4 0 011-.17 5 5 0 01.94.06h.19z",
  fill: "#231f20"
});

var _ref9 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-social-share_svg__cls-2",
  d: "M41.61 25.85v-1.24h-.19a5 5 0 00-.94-.06 4 4 0 00-1 .17 2.88 2.88 0 00-1.16.67 3.07 3.07 0 00-.41.47 3.53 3.53 0 010-.56 3.34 3.34 0 01.3-1 3.56 3.56 0 01.61-.93 3.74 3.74 0 011.58-1 3.87 3.87 0 01.67-.17h.49v-1.32l2.49 2.49-2.48 2.48z"
});

var SvgIconC9SocialShare = function SvgIconC9SocialShare(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-social-share_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9SocialShare);

/***/ }),
/* 216 */
/*!***************************************!*\
  !*** ./src/blocks/block-cta/index.js ***!
  \***************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 217);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 220);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 221);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 222);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__styles_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__assets_icon_c9_cta_bar_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-cta-bar.svg */ 223);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__attributes__ = __webpack_require__(/*! ./attributes */ 224);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };




// Import CSS



// Import Icon


// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var withSelect = wp.data.withSelect;

// Register block

var registerBlockType = wp.blocks.registerBlockType;




// Register the block
registerBlockType("c9-blocks/cta", {
	title: __("C9 Call To Action", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_4__assets_icon_c9_cta_bar_svg__["a" /* default */],
	category: "c9-blocks",
	keywords: [__("call to action", "c9-blocks"), __("cta", "c9-blocks")],

	attributes: __WEBPACK_IMPORTED_MODULE_5__attributes__["a" /* default */],

	/* Add alignment to block wrapper. */
	getEditWrapperProps: function getEditWrapperProps(_ref) {
		var align = _ref.align;

		if ("full" === align || "wide" === align || "narrow" === align || "" === align) {
			return { "data-align": align };
		}
	},


	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: __WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */]
});

/* Add the container class to the cta block. */
var withClientIdClassName = wp.compose.createHigherOrderComponent(function (BlockListBlock) {
	return function (props) {
		var blockName = props.block.name;

		if ("c9-blocks/cta" === blockName) {
			return wp.element.createElement(BlockListBlock, _extends({}, props, {
				className: props.attributes.ctaWidth
			}));
		} else {
			return wp.element.createElement(BlockListBlock, props);
		}
	};
}, "withClientIdClassName");

wp.hooks.addFilter("editor.BlockListBlock", "c9-blocks/add-container-class", withClientIdClassName);

/***/ }),
/* 217 */
/*!**************************************!*\
  !*** ./src/blocks/block-cta/edit.js ***!
  \**************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 218);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_cta__ = __webpack_require__(/*! ./components/cta */ 41);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_width_toolbar__ = __webpack_require__(/*! ./components/width-toolbar */ 219);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Import block dependencies and components






// Extend component
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;

// Register editor components

var _wp$editor = wp.editor,
    AlignmentToolbar = _wp$editor.AlignmentToolbar,
    URLInput = _wp$editor.URLInput,
    BlockControls = _wp$editor.BlockControls,
    RichText = _wp$editor.RichText;

// Register components

var _wp$components = wp.components,
    IconButton = _wp$components.IconButton,
    Dashicon = _wp$components.Dashicon,
    Button = _wp$components.Button;

// Components

var __ = wp.i18n.__;

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.state = {
			hideForm: false
		};
		return _this;
	}

	_createClass(Edit, [{
		key: "layoutClass",
		value: function layoutClass(ctaWidth, textOrButton) {
			if ("two-thirds" == ctaWidth) {
				if ("text" == textOrButton) {
					return "col-md-8";
				}
				return "col-md-4";
			} else if ("three-quarters" == ctaWidth) {
				if ("text" == textOrButton) {
					return "col-md-9";
				}
				return "col-md-3";
			}
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			// Setup the attributes
			var _props = this.props,
			    _props$attributes = _props.attributes,
			    buttonText = _props$attributes.buttonText,
			    buttonUrl = _props$attributes.buttonUrl,
			    buttonAlignment = _props$attributes.buttonAlignment,
			    buttonBackgroundColor = _props$attributes.buttonBackgroundColor,
			    buttonTextColor = _props$attributes.buttonTextColor,
			    buttonSize = _props$attributes.buttonSize,
			    buttonShape = _props$attributes.buttonShape,
			    ctaText = _props$attributes.ctaText,
			    ctaWidth = _props$attributes.ctaWidth,
			    ctaTextColor = _props$attributes.ctaTextColor,
			    ctaLayout = _props$attributes.ctaLayout,
			    align = _props$attributes.align,
			    type = _props$attributes.type,
			    disableToolbar = _props$attributes.disableToolbar,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot,
			    setAttributes = _props.setAttributes;


			var currWidth = void 0;
			if (0 != align.length) {
				if ("container" == ctaWidth) {
					currWidth = "wide";
				} else if ("container-fluid" == ctaWidth) {
					currWidth = "full";
				} else {
					currWidth = "narrow";
				}
			}

			return (
				// Show the alignment toolbar on focus
				wp.element.createElement(
					Fragment,
					null,
					wp.element.createElement(
						BlockControls,
						null,
						!disableToolbar && wp.element.createElement(__WEBPACK_IMPORTED_MODULE_3__components_width_toolbar__["a" /* default */], {
							value: currWidth,
							onChange: function onChange(value) {
								if ("wide" == value) {
									setAttributes({ ctaWidth: "container", align: "wide" });
								} else if ("full" == value) {
									setAttributes({
										ctaWidth: "container-fluid",
										align: "full"
									});
								} else if ("narrow" == value) {
									setAttributes({
										ctaWidth: "container-narrow",
										align: "narrow"
									});
								} else {
									setAttributes({ ctaWidth: "container", align: "" });
								}
							}
						}),
						wp.element.createElement(AlignmentToolbar, {
							value: buttonAlignment,
							onChange: function onChange(value) {
								setAttributes({ buttonAlignment: value });
							}
						})
					),
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_inspector__["a" /* default */], Object.assign({ setAttributes: setAttributes }, this.props)),
					wp.element.createElement(
						__WEBPACK_IMPORTED_MODULE_2__components_cta__["a" /* default */],
						this.props,
						wp.element.createElement(
							"div",
							{
								className: "c9-cta-content col-12 " + this.layoutClass(ctaLayout, "text")
							},
							wp.element.createElement(RichText, {
								tagName: "div",
								multiline: "p",
								placeholder: __("Call To Action Text", "c9-blocks"),
								keepPlaceholderOnFocus: true,
								value: ctaText,
								className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(this.layoutClass(ctaLayout, "text"), "c9-cta-text", type),
								style: {
									color: ctaTextColor
								},
								onChange: function onChange(value) {
									return setAttributes({ ctaText: value });
								}
							})
						),
						wp.element.createElement(
							"div",
							{
								className: "c9-cta-content col-12 " + this.layoutClass(ctaLayout, "button")
							},
							wp.element.createElement(RichText, {
								tagName: "a",
								placeholder: __("Button text...", "c9-blocks"),
								keepPlaceholderOnFocus: true,
								value: buttonText,
								formattingControls: [],
								className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("wp-block-button__link", "c9-button-shape-" + buttonShape, buttonSize),
								style: {
									color: buttonTextColor,
									backgroundColor: buttonBackgroundColor
								},
								onChange: function onChange(value) {
									return setAttributes({ buttonText: value });
								}
							}),
							isSelectedBlockInRoot && wp.element.createElement(
								Button,
								{
									className: "c9-cta-reveal-anchor",
									onClick: function onClick() {
										return _this2.setState({ hideForm: !_this2.state.hideForm });
									}
								},
								wp.element.createElement(Dashicon, { icon: "admin-links" })
							),
							isSelectedBlockInRoot && !this.state.hideForm && wp.element.createElement(
								"form",
								{
									key: "form-link",
									className: "blocks-button__inline-link c9-button-" + buttonAlignment,
									onSubmit: function onSubmit(event) {
										return event.preventDefault();
									},
									style: {
										textAlign: buttonAlignment
									}
								},
								wp.element.createElement(URLInput, {
									className: "button-url",
									value: buttonUrl,
									onChange: function onChange(value) {
										return setAttributes({ buttonUrl: value });
									}
								}),
								wp.element.createElement(IconButton, {
									icon: "editor-break",
									label: __("Apply", "c9-blocks"),
									type: "submit"
								})
							)
						)
					)
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Edit);

/***/ }),
/* 218 */
/*!******************************************************!*\
  !*** ./src/blocks/block-cta/components/inspector.js ***!
  \******************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Inspector Controls
 */



// Setup the block
var __ = wp.i18n.__;
var Component = wp.element.Component;
var ContrastChecker = wp.blockEditor.ContrastChecker;

// Import block components

var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    PanelColorSettings = _wp$editor.PanelColorSettings,
    MediaUpload = _wp$editor.MediaUpload,
    ColorPalette = _wp$editor.ColorPalette;

// Import Inspector components

var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    RangeControl = _wp$components.RangeControl,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl,
    IconButton = _wp$components.IconButton,
    RadioControl = _wp$components.RadioControl,
    FocalPointPicker = _wp$components.FocalPointPicker;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));

		_initialiseProps.call(_this);

		_this.linkedPaddingRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.togglePaddingLinkage = _this.togglePaddingLinkage.bind(_this);
		_this.linkedMarginRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.toggleMarginLinkage = _this.toggleMarginLinkage.bind(_this);

		var _this$props = _this.props,
		    _this$props$attribute = _this$props.attributes,
		    ctaPadding = _this$props$attribute.ctaPadding,
		    ctaMargin = _this$props$attribute.ctaMargin,
		    setAttributes = _this$props.setAttributes;


		_this.setAttributes = setAttributes;

		_this.state = {
			ctaPadding: ctaPadding,
			ctaMargin: ctaMargin,
			setAttributes: setAttributes
		};
		return _this;
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			// Setup the attributes
			var _props$attributes = this.props.attributes,
			    buttonSize = _props$attributes.buttonSize,
			    buttonShape = _props$attributes.buttonShape,
			    buttonTarget = _props$attributes.buttonTarget,
			    ctaBackgroundColor = _props$attributes.ctaBackgroundColor,
			    ctaBackgroundOpacity = _props$attributes.ctaBackgroundOpacity,
			    ctaTextColor = _props$attributes.ctaTextColor,
			    ctaLayout = _props$attributes.ctaLayout,
			    ctaPadding = _props$attributes.ctaPadding,
			    ctaMargin = _props$attributes.ctaMargin,
			    imgURL = _props$attributes.imgURL,
			    imgID = _props$attributes.imgID,
			    imgAttach = _props$attributes.imgAttach,
			    imgSize = _props$attributes.imgSize,
			    focalPoint = _props$attributes.focalPoint,
			    blendMode = _props$attributes.blendMode,
			    type = _props$attributes.type;
			var _props = this.props,
			    setAttributes = _props.setAttributes,
			    buttonTextColor = _props.buttonTextColor,
			    buttonBackgroundColor = _props.buttonBackgroundColor;


			var sizeTypes = [{ value: "cover", label: __("Cover", "c9-blocks") }, { value: "contain", label: __("Contain", "c9-blocks") }];

			// Button size values
			var buttonSizeOptions = [{ value: "c9-button-size-small", label: __("Small") }, { value: "c9-button-size-medium", label: __("Medium") }, { value: "c9-button-size-large", label: __("Large") }, { value: "c9-button-size-extralarge", label: __("Extra Large") }];

			// Button shape
			var buttonShapeOptions = [{ value: "square", label: __("Square") }, { value: "round", label: __("Round") }, { value: "outline", label: __("Outline") }];

			var paddingOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Padding 0", "c9-blocks") }, { value: "1", label: __("Padding 1", "c9-blocks") }, { value: "2", label: __("Padding 2", "c9-blocks") }, { value: "3", label: __("Padding 3", "c9-blocks") }, { value: "4", label: __("Padding 4", "c9-blocks") }, { value: "5", label: __("Padding 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var marginOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Margin 0", "c9-blocks") }, { value: "1", label: __("Margin 1", "c9-blocks") }, { value: "2", label: __("Margin 2", "c9-blocks") }, { value: "3", label: __("Margin 3", "c9-blocks") }, { value: "4", label: __("Margin 4", "c9-blocks") }, { value: "5", label: __("Margin 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var fontTypes = [{ value: "c9-p", label: __("Paragraph", "c9-blocks") }, { value: "c9-h", label: __("Heading", "c9-blocks") }, {
				value: "c9-sh",
				label: __("Subheading", "c9-blocks")
			}];

			// Change the image
			var onSelectImage = function onSelectImage(img) {
				setAttributes({
					imgID: img.id,
					imgURL: img.url,
					imgAlt: img.alt
				});
			};

			// Clear the image
			var onRemoveImage = function onRemoveImage() {
				setAttributes({
					imgID: null,
					imgURL: null,
					imgAlt: null
				});
			};

			return wp.element.createElement(
				InspectorControls,
				{ key: "inspector" },
				wp.element.createElement(
					PanelBody,
					null,
					wp.element.createElement(RadioControl, {
						label: __("Content Width", "c9-blocks"),
						selected: ctaLayout,
						options: [{ label: "2/3", value: "two-thirds" }, { label: "3/4", value: "three-quarters" }, { label: "Full", value: "full" }],
						onChange: function onChange(ctaLayout) {
							return setAttributes({ ctaLayout: ctaLayout });
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{
						title: __("Button Configurations", "c9-blocks"),
						initialOpen: true
					},
					wp.element.createElement(ToggleControl, {
						label: __("Open link in new window", "c9-blocks"),
						checked: buttonTarget,
						onChange: function onChange() {
							return setAttributes({ buttonTarget: !buttonTarget });
						}
					}),
					wp.element.createElement(SelectControl, {
						label: __("Button Size", "c9-blocks"),
						value: buttonSize,
						options: buttonSizeOptions.map(function (_ref) {
							var value = _ref.value,
							    label = _ref.label;
							return {
								value: value,
								label: label
							};
						}),
						onChange: function onChange(value) {
							setAttributes({ buttonSize: value });
						}
					}),
					wp.element.createElement(SelectControl, {
						label: __("Button Shape", "c9-blocks"),
						value: buttonShape,
						options: buttonShapeOptions.map(function (_ref2) {
							var value = _ref2.value,
							    label = _ref2.label;
							return {
								value: value,
								label: label
							};
						}),
						onChange: function onChange(value) {
							setAttributes({ buttonShape: value });
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{
						title: __("CTA Text Options", "c9-blocks"),
						initialOpen: true
					},
					wp.element.createElement(SelectControl, {
						label: __("Font Type", "c9-blocks"),
						help: __("Choose between paragraph, heading, or subheading.", "c9-blocks"),
						options: fontTypes,
						value: type,
						onChange: function onChange(value) {
							return setAttributes({ type: value });
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Spacing", "c9-blocks"), initialOpen: false },
					wp.element.createElement(
						"h5",
						{ className: "padding-label" },
						__("Padding", "c9-blocks")
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of padding for each side.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "padding-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: ctaPadding.top,
							onChange: function onChange(value) {
								return _this2.updatePadding("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-sides-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: ctaPadding.left,
							onChange: function onChange(value) {
								return _this2.updatePadding("left", value);
							}
						}),
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.ctaPadding.icon,
							onClick: this.togglePaddingLinkage,
							ref: this.state.linkedPaddingRef
						}),
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: ctaPadding.right,
							onChange: function onChange(value) {
								return _this2.updatePadding("right", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: ctaPadding.bottom,
							onChange: function onChange(value) {
								return _this2.updatePadding("bottom", value);
							}
						})
					),
					wp.element.createElement("hr", null),
					wp.element.createElement(
						"h5",
						{ className: "margin-label" },
						"Margins"
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of margin for top and bottom sides.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "margin-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: ctaMargin.top,
							onChange: function onChange(value) {
								return _this2.updateMargin("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-sides-wrapper" },
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.ctaMargin.icon,
							onClick: this.toggleMarginLinkage,
							ref: this.state.linkedMarginRef
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: ctaMargin.bottom,
							onChange: function onChange(value) {
								return _this2.updateMargin("bottom", value);
							}
						})
					)
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						initialOpen: false,
						title: __("Message Text Color", "c9-blocks"),
						colorSettings: [{
							value: ctaTextColor,
							onChange: function onChange(value) {
								return setAttributes({ ctaTextColor: value });
							},
							label: __("Text Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						textColor: ctaTextColor,
						fallbackTextColor: "white"
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						initialOpen: false,
						title: __("Button Colors", "c9-blocks"),
						colorSettings: [{
							value: buttonTextColor,
							onChange: function onChange(value) {
								return setAttributes({ buttonTextColor: value });
							},
							label: __("Button Text Color", "c9-blocks")
						}, {
							value: buttonBackgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ buttonBackgroundColor: value });
							},
							label: __("Button Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						backgroundColor: buttonBackgroundColor,
						fallbackBackgroundColor: "black",
						textColor: buttonTextColor,
						fallbackTextColor: "white"
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Background", "c9-blocks"), initialOpen: false },
					wp.element.createElement(MediaUpload, {
						id: "bg-image-select",
						label: __("Background Image", "c9-blocks"),
						onSelect: onSelectImage,
						type: "image",
						value: imgID,
						render: function render(_ref3) {
							var open = _ref3.open;
							return wp.element.createElement(
								"div",
								null,
								wp.element.createElement(
									IconButton,
									{
										label: __("Edit image", "c9-blocks"),
										icon: "format-image",
										onClick: open
									},
									__("Background Image", "c9-blocks")
								),
								imgURL && !!imgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										IconButton,
										{
											label: __("Remove Image", "c9-blocks"),
											icon: "dismiss",
											onClick: onRemoveImage
										},
										__("Remove", "c9-blocks")
									),
									wp.element.createElement(
										"h5",
										null,
										"Position"
									),
									wp.element.createElement(FocalPointPicker, {
										label: __("Focal Point Picker", "c9-blocks"),
										url: imgURL,
										value: focalPoint,
										onChange: function onChange(value) {
											return setAttributes({ focalPoint: value });
										}
									})
								),
								wp.element.createElement(
									"span",
									null,
									__("Background Color", "c9-blocks")
								),
								wp.element.createElement(ColorPalette, {
									label: __("Background Color", "c9-blocks"),
									value: ctaBackgroundColor,
									onChange: function onChange(value) {
										return setAttributes({ ctaBackgroundColor: value });
									}
								}),
								ctaBackgroundColor && !!ctaBackgroundColor.length && wp.element.createElement(RangeControl, {
									beforeIcon: "arrow-left-alt2",
									afterIcon: "arrow-right-alt2",
									label: __("Opacity", "c9-blocks"),
									value: ctaBackgroundOpacity,
									onChange: function onChange(ctaBackgroundOpacity) {
										return setAttributes({ ctaBackgroundOpacity: ctaBackgroundOpacity });
									},
									min: 1,
									max: 10
								}),
								ctaBackgroundColor && imgURL && !!imgURL.length && wp.element.createElement(SelectControl, {
									label: __("Blend Mode", "c9-blocks"),
									value: blendMode,
									options: [{ value: "overlay", label: __("Overlay", "c9-blocks") }, { value: "normal", label: __("Normal", "c9-blocks") }, {
										value: "multiply",
										label: __("Multiply", "c9-blocks")
									}, { value: "screen", label: __("Screen", "c9-blocks") }, { value: "darken", label: __("Darken", "c9-blocks") }, { value: "lighten", label: __("Lighten", "c9-blocks") }, {
										value: "color-dodge",
										label: __("Color Dodge", "c9-blocks")
									}, {
										value: "color-burn",
										label: __("Color Burn", "c9-blocks")
									}, {
										value: "hard-light",
										label: __("Hard Light", "c9-blocks")
									}, {
										value: "soft-light",
										label: __("Soft Light", "c9-blocks")
									}, {
										value: "difference",
										label: __("Difference", "c9-blocks")
									}, {
										value: "exclusion",
										label: __("Exclusion", "c9-blocks")
									}, { value: "hue", label: __("Hue", "c9-blocks") }, {
										value: "saturation",
										label: __("Saturation", "c9-blocks")
									}, { value: "color", label: __("Color", "c9-blocks") }, {
										value: "luminosity",
										label: __("Luminosity", "c9-blocks")
									}],
									onChange: function onChange(blendMode) {
										return setAttributes({ blendMode: blendMode });
									}
								}),
								wp.element.createElement("hr", null),
								imgURL && !!imgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										"h5",
										null,
										__("Attachment", "c9-blocks")
									),
									wp.element.createElement(ToggleControl, {
										label: __("Scroll | Fixed", "c9-blocks"),
										checked: imgAttach,
										onChange: function onChange(imgAttach) {
											return setAttributes({ imgAttach: imgAttach });
										}
									}),
									wp.element.createElement("hr", null),
									wp.element.createElement(
										"div",
										null,
										wp.element.createElement(
											"h5",
											null,
											__("Size", "c9-blocks")
										),
										wp.element.createElement(SelectControl, {
											help: __("Choose between cover or contain.", "c9-blocks"),
											options: sizeTypes,
											value: imgSize,
											onChange: function onChange(value) {
												return setAttributes({ imgSize: value });
											}
										})
									)
								)
							);
						}
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.togglePaddingLinkage = function () {
		var ctaPadding = _this3.props.attributes.ctaPadding;


		ctaPadding = Object.assign({}, ctaPadding);
		ctaPadding.linked = !ctaPadding.linked;
		ctaPadding.icon = ctaPadding.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ ctaPadding: ctaPadding });
		_this3.setAttributes({ ctaPadding: ctaPadding });
	};

	this.setPaddingUnit = function (value) {
		var ctaPadding = _this3.props.attributes.ctaPadding;


		var spacingObject = Object.assign({}, ctaPadding);
		spacingObject.unit = value;
		_this3.setState({ ctaPadding: spacingObject });
		_this3.setAttributes({ ctaPadding: spacingObject });
	};

	this.updatePadding = function (position, value) {
		if (_this3.state.ctaPadding.linked) {
			var spacingObject = {
				linked: _this3.state.ctaPadding.linked,
				unit: _this3.state.ctaPadding.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.ctaPadding.icon
			};
			_this3.setState({ ctaPadding: spacingObject });
			_this3.setAttributes({ ctaPadding: spacingObject });
		} else {
			var _spacingObject = Object.assign({}, _this3.state.ctaPadding);
			_spacingObject[position] = value;
			_this3.setState({ ctaPadding: _spacingObject });
			_this3.setAttributes({ ctaPadding: _spacingObject });
		}
	};

	this.toggleMarginLinkage = function () {
		var ctaMargin = _this3.props.attributes.ctaMargin;


		ctaMargin = Object.assign({}, ctaMargin);
		ctaMargin.linked = !ctaMargin.linked;
		ctaMargin.icon = ctaMargin.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ ctaMargin: ctaMargin });
		_this3.setAttributes({ ctaMargin: ctaMargin });
	};

	this.setMarginUnit = function (value) {
		var ctaMargin = _this3.props.attributes.ctaMargin;


		var spacingObject = Object.assign({}, ctaMargin);
		spacingObject.unit = value;
		_this3.setState({ ctaMargin: spacingObject });
		_this3.setAttributes({ ctaMargin: spacingObject });
	};

	this.updateMargin = function (position, value) {
		if (_this3.state.ctaMargin.linked) {
			var spacingObject = {
				linked: _this3.state.ctaMargin.linked,
				unit: _this3.state.ctaMargin.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.ctaMargin.icon
			};
			_this3.setState({ ctaMargin: spacingObject });
			_this3.setAttributes({ ctaMargin: spacingObject });
		} else {
			var _spacingObject2 = Object.assign({}, _this3.state.ctaMargin);
			_spacingObject2[position] = value;
			_this3.setState({ ctaMargin: _spacingObject2 });
			_this3.setAttributes({ ctaMargin: _spacingObject2 });
		}
	};
};

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 219 */
/*!**********************************************************!*\
  !*** ./src/blocks/block-cta/components/width-toolbar.js ***!
  \**********************************************************/
/*! exports provided: WidthToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export WidthToolbar */
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;


var DEFAULT_WIDTH_CONTROLS = [{
	icon: "align-center",
	title: __("Narrow Width", "c9-blocks"),
	width: "narrow"
}, {
	icon: "align-wide",
	title: __("Wide Width", "c9-blocks"),
	width: "wide"
}, {
	icon: "align-full-width",
	title: __("Full Width", "c9-blocks"),
	width: "full"
}];

function WidthToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$widthControls = _ref.widthControls,
	    widthControls = _ref$widthControls === undefined ? DEFAULT_WIDTH_CONTROLS : _ref$widthControls;

	function applyOrUnset(width) {
		return function () {
			return onChange(value === width ? undefined : width);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Change Widths", "c9-blocks"),
		controls: widthControls.map(function (control) {
			var width = control.width;

			var isActive = value === width;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(width)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (WidthToolbar);

/***/ }),
/* 220 */
/*!**************************************!*\
  !*** ./src/blocks/block-cta/save.js ***!
  \**************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_cta__ = __webpack_require__(/*! ./components/cta */ 41);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Import block dependencies and components




// Extend component
var Component = wp.element.Component;

// Register editor components

var RichText = wp.editor.RichText;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "layoutClass",
		value: function layoutClass(ctaWidth, textOrButton) {
			if ("two-thirds" == ctaWidth) {
				if ("text" == textOrButton) {
					return "col-md-8";
				}
				return "col-md-4";
			} else if ("three-quarters" == ctaWidth) {
				if ("text" == textOrButton) {
					return "col-md-9";
				}
				return "col-md-3";
			}
		}
	}, {
		key: "dimRatioToClass",
		value: function dimRatioToClass(ratio) {
			return 0 === ratio || 50 === ratio ? null : "has-background-dim-" + 10 * Math.round(ratio / 10);
		}
	}, {
		key: "render",
		value: function render() {
			// Setup the attributes
			var _props$attributes = this.props.attributes,
			    buttonText = _props$attributes.buttonText,
			    buttonUrl = _props$attributes.buttonUrl,
			    buttonBackgroundColor = _props$attributes.buttonBackgroundColor,
			    buttonTextColor = _props$attributes.buttonTextColor,
			    buttonSize = _props$attributes.buttonSize,
			    buttonShape = _props$attributes.buttonShape,
			    buttonTarget = _props$attributes.buttonTarget,
			    ctaText = _props$attributes.ctaText,
			    ctaTextColor = _props$attributes.ctaTextColor,
			    imgURL = _props$attributes.imgURL,
			    imgAlt = _props$attributes.imgAlt,
			    dimRatio = _props$attributes.dimRatio,
			    ctaLayout = _props$attributes.ctaLayout,
			    type = _props$attributes.type;


			return wp.element.createElement(
				__WEBPACK_IMPORTED_MODULE_1__components_cta__["a" /* default */],
				_extends({}, this.props, { save: true }),
				imgURL && !!imgURL.length && wp.element.createElement(
					"div",
					{ className: "c9-cta-image-wrap" },
					wp.element.createElement("img", {
						className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-cta-image", this.dimRatioToClass(dimRatio), {
							"has-background-dim": 0 !== dimRatio
						}),
						src: imgURL,
						alt: imgAlt
					})
				),
				wp.element.createElement(
					"div",
					{
						className: "c9-cta-content col-12 " + this.layoutClass(ctaLayout, "text")
					},
					ctaText && wp.element.createElement(RichText.Content, {
						tagName: "div",
						className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-cta-text", type),
						style: {
							color: ctaTextColor
						},
						value: ctaText
					})
				),
				buttonText && wp.element.createElement(
					"div",
					{
						className: "c9-cta-button col-12 " + this.layoutClass(ctaLayout, "button")
					},
					wp.element.createElement(
						"a",
						{
							href: buttonUrl,
							target: buttonTarget ? "_blank" : "_self",
							rel: "noopener noreferrer",
							className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("wp-block-button__link", "c9-button-shape-" + buttonShape, buttonSize),
							style: {
								color: buttonTextColor,
								backgroundColor: buttonBackgroundColor
							}
						},
						wp.element.createElement(RichText.Content, { value: buttonText }),
						buttonTarget && wp.element.createElement(
							"span",
							{ className: "sr-only" },
							"(Link opens in new window)"
						)
					)
				)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 221 */
/*!************************************************!*\
  !*** ./src/blocks/block-cta/styles/style.scss ***!
  \************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 222 */
/*!*************************************************!*\
  !*** ./src/blocks/block-cta/styles/editor.scss ***!
  \*************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 223 */
/*!************************************!*\
  !*** ./assets/icon-c9-cta-bar.svg ***!
  \************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-cta-bar_svg__cls-2{fill:#6d6e71}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  fill: "#fff",
  d: "M2.55 9.05h42.89v23.89H2.55z"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-cta-bar_svg__cls-2",
  d: "M3.11 9.61h41.78v22.78H3.11V9.61M2 8.5v25h44v-25z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  strokeWidth: 1.06,
  fill: "none",
  stroke: "#6d6e71",
  strokeMiterlimit: 10,
  d: "M6.04 13.47h36M6.06 18.5H32"
});

var _ref5 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("rect", {
  className: "icon-c9-cta-bar_svg__cls-2",
  x: 6,
  y: 23.5,
  width: 11,
  height: 4.79,
  rx: 2.31
});

var _ref6 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  d: "M34 25.57L35.66 39a.53.53 0 001 .13l2.13-5.4a.53.53 0 01.5-.34h6a.52.52 0 00.28-1l-11-7.24a.39.39 0 00-.57.42z",
  fill: "#731012"
});

var SvgIconC9CtaBar = function SvgIconC9CtaBar(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-cta-bar_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9CtaBar);

/***/ }),
/* 224 */
/*!********************************************!*\
  !*** ./src/blocks/block-cta/attributes.js ***!
  \********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var blockAttributes = {
	type: {
		type: "string",
		value: "c9-p"
	},
	buttonText: {
		type: "string"
	},
	buttonUrl: {
		type: "string",
		source: "attribute",
		selector: "a",
		attribute: "href"
	},
	buttonAlignment: {
		type: "string",
		default: "center"
	},
	buttonBackgroundColor: {
		type: "string"
	},
	buttonTextColor: {
		type: "string",
		default: "#ffffff"
	},
	buttonSize: {
		type: "string",
		default: "c9-button-size-medium"
	},
	buttonShape: {
		type: "string",
		default: "square"
	},
	buttonTarget: {
		type: "boolean",
		default: false
	},
	blendMode: {
		type: "string",
		default: "overlay"
	},
	ctaTitle: {
		type: "array",
		selector: ".c9-cta-title",
		source: "children"
	},
	ctaLayout: {
		type: "string",
		default: "two-thirds"
	},
	ctaMargin: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			unit: "px",
			top: "-1",
			bottom: "-1"
		}
	},
	ctaPadding: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			top: "5",
			bottom: "5",
			left: "5",
			right: "5"
		}
	},
	ctaTextFontSize: {
		type: "number"
	},
	ctaText: {
		type: "array",
		selector: ".c9-cta-text",
		source: "children"
	},
	ctaWidth: {
		type: "string",
		default: "container"
	},
	ctaBackgroundColor: {
		type: "string"
	},
	ctaBackgroundOpacity: {
		type: "number",
		default: 10
	},
	ctaTextColor: {
		type: "string"
	},
	imgURL: {
		type: "string",
		source: "attribute",
		attribute: "src",
		selector: "img"
	},
	imgID: {
		type: "number"
	},
	imgAlt: {
		type: "string",
		source: "attribute",
		attribute: "alt",
		selector: "img"
	},
	imgSize: {
		type: "string",
		default: "cover"
	},
	focalPoint: {
		type: "object",
		default: {
			x: 0.5,
			y: 0.5
		}
	},
	// true evaluates to backgroundAttachment fixed, false to scroll
	imgAttach: {
		type: "boolean",
		default: false
	},
	// Deprecated
	ctaTitleFontSize: {
		type: "string",
		default: "32"
	},
	align: {
		type: "string",
		default: ""
	},
	disableToolbar: {
		type: "boolean",
		default: false
	}
};

/* harmony default export */ __webpack_exports__["a"] = (blockAttributes);

/***/ }),
/* 225 */
/*!*******************************************!*\
  !*** ./src/blocks/block-heading/index.js ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 226);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 230);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 231);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 232);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__styles_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__assets_icon_c9_heading_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-heading.svg */ 233);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__attributes__ = __webpack_require__(/*! ./attributes */ 234);
/**
 * BLOCK: Covertnine Blocks Custom Heading
 */




// Import CSS



// Import Icon


// Components
var __ = wp.i18n.__;

// Register block

var registerBlockType = wp.blocks.registerBlockType;
var compose = wp.compose.compose;
var withSelect = wp.data.withSelect;
var withViewportMatch = wp.viewport.withViewportMatch;




// Register the block
registerBlockType("c9-blocks/heading", {
	title: __("C9 Heading", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_4__assets_icon_c9_heading_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {},
	keywords: [__("heading", "c9-blocks"), __("c9", "c9-blocks"), __("covertnine", "c9-blocks")],

	attributes: __WEBPACK_IMPORTED_MODULE_5__attributes__["a" /* default */],

	// Render the block components
	edit: compose(withViewportMatch({ isLargeViewport: "medium" }), withSelect(function (select, _ref) {
		var clientId = _ref.clientId,
		    isLargeViewport = _ref.isLargeViewport,
		    isCollapsed = _ref.isCollapsed;

		var _select = select("core/block-editor"),
		    getBlockRootClientId = _select.getBlockRootClientId,
		    getSettings = _select.getSettings;

		var settings = getSettings();
		return {
			isCollapsed: isCollapsed || !isLargeViewport || !settings.hasFixedToolbar && !!getBlockRootClientId(clientId)
		};
	}))(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: __WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */]
});

/***/ }),
/* 226 */
/*!******************************************!*\
  !*** ./src/blocks/block-heading/edit.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_custom_heading__ = __webpack_require__(/*! ./components/custom-heading */ 42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 227);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_heading_toolbar__ = __webpack_require__(/*! ./components/heading-toolbar */ 43);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_subheading_toolbar__ = __webpack_require__(/*! ./components/subheading-toolbar */ 228);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// External Dependencies.


// Register editor components
var _wp$editor = wp.editor,
    AlignmentToolbar = _wp$editor.AlignmentToolbar,
    BlockControls = _wp$editor.BlockControls,
    RichText = _wp$editor.RichText;

// Extend component

var Fragment = wp.element.Fragment;

// Components





var __ = wp.i18n.__;

/**
 * WordPress dependencies
 */

var Component = wp.element.Component;

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		return _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));
	}

	_createClass(Edit, [{
		key: "c9TextStyleConfig",
		value: function c9TextStyleConfig(type, display, tag, override) {
			if (!override) {
				return type.split(" ")[0];
			} else if (0 == display) {
				return "" + type + tag;
			} else {
				return "" + type + display;
			}
		}
	}, {
		key: "render",
		value: function render() {
			// Setup the attributes
			var _props = this.props,
			    setAttributes = _props.setAttributes,
			    isCollapsed = _props.isCollapsed,
			    _props$attributes = _props.attributes,
			    heading = _props$attributes.heading,
			    displayLevel = _props$attributes.displayLevel,
			    tagLevel = _props$attributes.tagLevel,
			    textAlign = _props$attributes.textAlign,
			    backgroundColor = _props$attributes.backgroundColor,
			    textColor = _props$attributes.textColor,
			    type = _props$attributes.type,
			    weight = _props$attributes.weight,
			    overrideStyle = _props$attributes.overrideStyle,
			    subheading = _props$attributes.subheading,
			    addSubheading = _props$attributes.addSubheading;

			// Save the block markup for the front end

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(
					BlockControls,
					null,
					wp.element.createElement(AlignmentToolbar, {
						value: textAlign,
						onChange: function onChange(value) {
							return setAttributes({ textAlign: value });
						}
					}),
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_3__components_heading_toolbar__["a" /* default */], {
						minLevel: 1,
						maxLevel: 7,
						selectedLevel: tagLevel,
						onChange: function onChange(newLevel) {
							return setAttributes({ tagLevel: newLevel });
						},
						isCollapsed: isCollapsed
					}),
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_4__components_subheading_toolbar__["a" /* default */], {
						value: addSubheading,
						onChange: function onChange(value) {
							setAttributes({ addSubheading: value });
						}
					})
				),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_inspector__["a" /* default */], Object.assign({ setAttributes: setAttributes }, this.props)),
				wp.element.createElement(
					__WEBPACK_IMPORTED_MODULE_1__components_custom_heading__["a" /* default */],
					this.props,
					wp.element.createElement(RichText, {
						tagName: "h" + tagLevel,
						className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()([this.c9TextStyleConfig(type, displayLevel, tagLevel, overrideStyle), weight ? "font-weight-" + weight : null]),
						style: {
							backgroundColor: backgroundColor,
							color: textColor
						},
						keepPlaceholderOnFocus: true,
						placeholder: __("Write heading…", "c9-blocks"),
						value: heading,
						onChange: function onChange(value) {
							return setAttributes({ heading: value });
						}
					}),
					addSubheading && wp.element.createElement(
						"div",
						{
							className: function (type, display, tag) {
								if (0 == display) {
									return "" + type + tag;
								} else {
									return "" + type + display;
								}
							}(type, displayLevel, tagLevel)
						},
						wp.element.createElement(RichText, {
							tagName: "small",
							className: "text-muted",
							placeholder: __("Write subheading…", "c9-blocks"),
							value: subheading,
							onChange: function onChange(value) {
								return setAttributes({ subheading: value });
							}
						})
					)
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Edit);

/***/ }),
/* 227 */
/*!**********************************************************!*\
  !*** ./src/blocks/block-heading/components/inspector.js ***!
  \**********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__heading_toolbar__ = __webpack_require__(/*! ./heading-toolbar */ 43);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Inspector Controls
 */

// Setup the block
var __ = wp.i18n.__;
var Component = wp.element.Component;
var AlignmentToolbar = wp.editor.AlignmentToolbar;
var ContrastChecker = wp.blockEditor.ContrastChecker;




// Import block components
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    PanelColorSettings = _wp$editor.PanelColorSettings;

// Import Inspector components

var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    SelectControl = _wp$components.SelectControl,
    ToggleControl = _wp$components.ToggleControl;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		return _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			// Setup the attributes
			var _props = this.props,
			    setAttributes = _props.setAttributes,
			    _props$attributes = _props.attributes,
			    displayLevel = _props$attributes.displayLevel,
			    textAlign = _props$attributes.textAlign,
			    type = _props$attributes.type,
			    weight = _props$attributes.weight,
			    backgroundColor = _props$attributes.backgroundColor,
			    textColor = _props$attributes.textColor,
			    tagLevel = _props$attributes.tagLevel,
			    overrideStyle = _props$attributes.overrideStyle,
			    addSubheading = _props$attributes.addSubheading;


			var weightTypes = [{ value: undefined, label: __("Default", "c9-blocks") }, { value: "light", label: __("Light (300)", "c9-blocks") }, { value: "normal", label: __("Normal (400)", "c9-blocks") }, { value: "bold", label: __("Bold (700)", "c9-blocks") }];

			var fontTypes = [{ value: "c9-h h", label: __("Heading", "c9-blocks") }, {
				value: "c9-sh subhead-h",
				label: __("Subheading", "c9-blocks")
			}, { value: "c9-txl display-", label: __("Text-XL", "c9-blocks") }];

			var sizeTypes = [{ value: "0", label: __("Same as Tag", "c9-blocks") }, { value: "1", label: __("H1", "c9-blocks") }, { value: "2", label: __("H2", "c9-blocks") }, { value: "3", label: __("H3", "c9-blocks") }, { value: "4", label: __("H4", "c9-blocks") }, { value: "5", label: __("H5", "c9-blocks") }, { value: "6", label: __("H6", "c9-blocks") }];

			// Update color values
			return wp.element.createElement(
				InspectorControls,
				{ key: "inspector" },
				wp.element.createElement(
					PanelBody,
					{ title: __("Heading Options", "c9-blocks") },
					wp.element.createElement(
						"p",
						null,
						__("Element Tag Type", "c9-blocks")
					),
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__heading_toolbar__["a" /* default */], {
						isCollapsed: false,
						minLevel: 1,
						maxLevel: 7,
						selectedLevel: tagLevel,
						onChange: function onChange(newLevel) {
							return setAttributes({ tagLevel: newLevel });
						}
					}),
					wp.element.createElement("hr", null),
					wp.element.createElement(SelectControl, {
						label: __("Font Type", "c9-blocks"),
						help: __("Choose between heading, subheading, or text-xl.", "c9-blocks"),
						options: fontTypes,
						value: type,
						onChange: function onChange(value) {
							return setAttributes({ type: value });
						}
					}),
					wp.element.createElement("hr", null),
					wp.element.createElement(ToggleControl, {
						label: __("Override Base Tag Style", "c9-blocks"),
						checked: overrideStyle,
						onChange: function onChange(value) {
							return setAttributes({ overrideStyle: value });
						}
					}),
					overrideStyle && wp.element.createElement(SelectControl, {
						label: __("Font Size", "c9-blocks"),
						help: __("Choose between different heading sizes.", "c9-blocks"),
						options: sizeTypes,
						value: displayLevel,
						onChange: function onChange(newLevel) {
							return setAttributes({ displayLevel: newLevel });
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Text Settings", "c9-blocks"), initialOpen: false },
					wp.element.createElement(SelectControl, {
						label: __("Font Weight", "c9-blocks"),
						help: __("Choose between light, normal, or bold.", "c9-blocks"),
						options: weightTypes,
						value: weight,
						onChange: function onChange(value) {
							return setAttributes({ weight: value });
						}
					}),
					wp.element.createElement("hr", null),
					wp.element.createElement(
						"p",
						null,
						__("Text Alignment", "c9-blocks")
					),
					wp.element.createElement(AlignmentToolbar, {
						value: textAlign,
						onChange: function onChange(value) {
							return setAttributes({ textAlign: value });
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{
						title: __("Subheading Options", "c9-blocks"),
						initialOpen: false
					},
					wp.element.createElement(ToggleControl, {
						label: __("Enable Additional Subheading", "c9-blocks"),
						checked: addSubheading,
						onChange: function onChange(value) {
							return setAttributes({ addSubheading: value });
						}
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						title: __("Color Settings", "c9-blocks"),
						initialOpen: false,
						colorSettings: [{
							value: textColor,
							onChange: function onChange(value) {
								return setAttributes({ textColor: value });
							},
							label: __("Text Color", "c9-blocks")
						}, {
							value: backgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ backgroundColor: value });
							},
							label: __("Background Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						textColor: textColor,
						backgroundColor: backgroundColor,
						fallbackTextColor: "black",
						fallbackBackgroundColor: "white"
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 228 */
/*!*******************************************************************!*\
  !*** ./src/blocks/block-heading/components/subheading-toolbar.js ***!
  \*******************************************************************/
/*! exports provided: SubheadingToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export SubheadingToolbar */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assets_text_muted_icon__ = __webpack_require__(/*! ../../../../assets/text-muted-icon */ 229);
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;




var DEFAULT_ENABLE_CONTROLS = [{
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_text_muted_icon__["a" /* default */],
	title: __("Enable Subheading", "c9-blocks"),
	enabled: true
}];

function SubheadingToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$enableControls = _ref.enableControls,
	    enableControls = _ref$enableControls === undefined ? DEFAULT_ENABLE_CONTROLS : _ref$enableControls;

	function applyOrUnset(enabled) {
		return function () {
			return onChange(value === enabled ? false : enabled);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Change Vertical Alignment", "c9-blocks"),
		controls: enableControls.map(function (control) {
			var enabled = control.enabled;

			var isActive = value === enabled;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(enabled)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (SubheadingToolbar);

/***/ }),
/* 229 */
/*!***********************************!*\
  !*** ./assets/text-muted-icon.js ***!
  \***********************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (wp.element.createElement(
	"svg",
	{ id: "Layer_1", "data-name": "Layer 1", xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 48 48" },
	wp.element.createElement(
		"defs",
		null,
		wp.element.createElement(
			"style",
			null,
			".cls-1{fill:#6d6e71;}.cls-2{fill:#939598;}"
		)
	),
	wp.element.createElement(
		"title",
		null,
		"Artboard 1 copy 10"
	),
	wp.element.createElement("path", { className: "cls-1", d: "M10.25,38.79H3.33v-30h6.92v12h9.81v-12H27v30H20.06V26.84H10.25Z" }),
	wp.element.createElement("path", { className: "cls-2", d: "M35,38.79H32v-17h3v6.78h6V21.79h3.14v17H41V32H35Z" })
));

/***/ }),
/* 230 */
/*!******************************************!*\
  !*** ./src/blocks/block-heading/save.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_custom_heading__ = __webpack_require__(/*! ./components/custom-heading */ 42);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// External Dependencies.




/**
 * WordPress dependencies
 */
var Component = wp.element.Component;
var RichText = wp.editor.RichText;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "c9TextStyleConfig",
		value: function c9TextStyleConfig(type, display, tag, override) {
			if (!override) {
				return type.split(" ")[0];
			} else if (0 == display) {
				return "" + type + tag;
			} else {
				return "" + type + display;
			}
		}
	}, {
		key: "render",
		value: function render() {
			// Setup the attributes
			var _props$attributes = this.props.attributes,
			    heading = _props$attributes.heading,
			    subheading = _props$attributes.subheading,
			    textColor = _props$attributes.textColor,
			    tagLevel = _props$attributes.tagLevel,
			    type = _props$attributes.type,
			    displayLevel = _props$attributes.displayLevel,
			    weight = _props$attributes.weight,
			    overrideStyle = _props$attributes.overrideStyle,
			    addSubheading = _props$attributes.addSubheading;

			// Save the block markup for the front end

			return wp.element.createElement(
				__WEBPACK_IMPORTED_MODULE_1__components_custom_heading__["a" /* default */],
				this.props,
				wp.element.createElement(RichText.Content, {
					tagName: "h" + tagLevel,
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()([this.c9TextStyleConfig(type, displayLevel, tagLevel, overrideStyle), weight ? "font-weight-" + weight : null]),
					style: {
						color: textColor
					},
					value: heading
				}),
				addSubheading && wp.element.createElement(
					"div",
					{
						className: function (type, display, tag) {
							if (0 == display) {
								return "" + type + tag;
							} else {
								return "" + type + display;
							}
						}(type, displayLevel, tagLevel)
					},
					wp.element.createElement(
						"small",
						{ className: "text-muted" },
						subheading.startsWith("&nbsp;") ? subheading : "&nbsp;" + subheading
					)
				)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 231 */
/*!****************************************************!*\
  !*** ./src/blocks/block-heading/styles/style.scss ***!
  \****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 232 */
/*!*****************************************************!*\
  !*** ./src/blocks/block-heading/styles/editor.scss ***!
  \*****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 233 */
/*!************************************!*\
  !*** ./assets/icon-c9-heading.svg ***!
  \************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  d: "M19.1 39h-6.93V9h6.93v12h9.8V9h6.93v30H28.9V27.05h-9.8z",
  fill: "#6d6e71"
});

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("text", {
  transform: "translate(38.65 44.22)",
  fontSize: 12,
  fontFamily: "Muli-Bold,Muli",
  fontWeight: 700,
  fill: "#6d6e71"
}, "1");

var SvgIconC9Heading = function SvgIconC9Heading(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9Heading);

/***/ }),
/* 234 */
/*!************************************************!*\
  !*** ./src/blocks/block-heading/attributes.js ***!
  \************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	isCollapsed: {
		type: "boolean",
		default: false
	},
	heading: {
		type: "string",
		default: ""
	},
	subheading: {
		type: "string",
		default: ""
	},
	addSubheading: {
		type: "boolean",
		default: false
	},
	wrapper: {
		type: "array",
		source: "query",
		selector: ".section-heading",
		query: {
			class: {
				type: "string",
				source: "attribute",
				attribute: "class"
			}
		}
	},
	tagLevel: {
		type: "int",
		default: 1
	},
	displayLevel: {
		type: "string",
		default: ""
	},
	type: {
		type: "string",
		default: "c9-h h"
	},
	backgroundColor: {
		type: "string"
	},
	textColor: {
		type: "string"
	},
	textAlign: {
		type: "string",
		default: "left"
	},
	weight: {
		type: "string"
	},
	overrideStyle: {
		type: "boolean",
		default: false
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 235 */
/*!**************************************************!*\
  !*** ./src/blocks/block-grid-container/index.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 236);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 244);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 245);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_grid_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-grid.svg */ 246);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 247);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 248);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__);
// Import block dependencies and components







// Import CSS



// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var withSelect = wp.data.withSelect;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/grid", {
	title: __("C9 Grid", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_grid_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {
		// fill in features
	},
	keywords: [__("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],
	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/***/ }),
/* 236 */
/*!*************************************************!*\
  !*** ./src/blocks/block-grid-container/edit.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 237);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_container__ = __webpack_require__(/*! ./components/container */ 45);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_memize__ = __webpack_require__(/*! memize */ 23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_memize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_memize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_times__ = __webpack_require__(/*! lodash/times */ 24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_times___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash_times__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal dependencies
 */



/**
 * WordPress dependencies
 */




var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$editor = wp.editor,
    InnerBlocks = _wp$editor.InnerBlocks,
    BlockControls = _wp$editor.BlockControls;
var withInstanceId = wp.compose.withInstanceId;
var IconButton = wp.components.IconButton;


var ALLOWED_BLOCKS = ["c9-blocks/column-container"];

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.getRowsTemplate = __WEBPACK_IMPORTED_MODULE_2_memize___default()(function (rows) {
			return __WEBPACK_IMPORTED_MODULE_3_lodash_times___default()(rows, function () {
				return ["c9-blocks/column-container"];
			});
		});
		return _this;
	}

	_createClass(Edit, [{
		key: "render",
		value: function render() {
			var _props = this.props,
			    instanceId = _props.instanceId,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot;
			var rows = attributes.rows;


			if (instanceId != attributes.instanceId) {
				setAttributes({ instanceId: instanceId });
			}

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(BlockControls, { key: "controls" }),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__components_inspector__["a" /* default */], this.props),
				wp.element.createElement(
					__WEBPACK_IMPORTED_MODULE_1__components_container__["a" /* default */],
					this.props,
					wp.element.createElement(InnerBlocks, {
						template: this.getRowsTemplate(rows),
						templateLock: "all",
						allowedBlocks: ALLOWED_BLOCKS
					})
				),
				isSelectedBlockInRoot && wp.element.createElement(
					"div",
					{ className: "c9-add-remove-rows" },
					wp.element.createElement(
						IconButton,
						{
							label: __("Remove Image", "c9-blocks"),
							icon: "dismiss",
							onClick: function onClick() {
								if (1 < rows) {
									setAttributes({ rows: rows - 1 });
								}
							}
						},
						__("Remove Row", "c9-blocks")
					),
					wp.element.createElement(
						IconButton,
						{
							label: __("Remove Image", "c9-blocks"),
							icon: "plus-alt",
							onClick: function onClick() {
								if (20 > rows) {
									setAttributes({ rows: rows + 1 });
								}
							}
						},
						__("Add Row", "c9-blocks")
					)
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (withInstanceId(Edit));

/***/ }),
/* 237 */
/*!*****************************************************************!*\
  !*** ./src/blocks/block-grid-container/components/inspector.js ***!
  \*****************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-cond-assign */
/**
 * Internal block libraries
 */
// import CustomRadio from './custom-radio';


var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    MediaUpload = _wp$editor.MediaUpload,
    ColorPalette = _wp$editor.ColorPalette;
var _wp$components = wp.components,
    RadioControl = _wp$components.RadioControl,
    PanelBody = _wp$components.PanelBody,
    RangeControl = _wp$components.RangeControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl,
    SelectControl = _wp$components.SelectControl,
    IconButton = _wp$components.IconButton,
    Button = _wp$components.Button,
    FocalPointPicker = _wp$components.FocalPointPicker,
    BaseControl = _wp$components.BaseControl;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));

		_initialiseProps.call(_this);

		var _this$props = _this.props,
		    _this$props$attribute = _this$props.attributes,
		    containerPadding = _this$props$attribute.containerPadding,
		    containerMargin = _this$props$attribute.containerMargin,
		    containerVideoID = _this$props$attribute.containerVideoID,
		    preview = _this$props$attribute.preview,
		    bgCustomX = _this$props$attribute.bgCustomX,
		    bgCustomY = _this$props$attribute.bgCustomY,
		    setAttributes = _this$props.setAttributes;


		_this.setAttributes = setAttributes;
		_this.preview = preview;

		_this.linkedPaddingRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.togglePaddingLinkage = _this.togglePaddingLinkage.bind(_this);
		_this.linkedMarginRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.toggleMarginLinkage = _this.toggleMarginLinkage.bind(_this);

		_this.state = {
			containerPadding: containerPadding,
			containerMargin: containerMargin,
			setAttributes: setAttributes,
			ID: containerVideoID || "",
			customX: "auto" != bgCustomX.size,
			customY: "auto" != bgCustomY.size,
			bgCustomX: bgCustomX,
			bgCustomY: bgCustomY
		};
		return _this;
	}

	_createClass(Inspector, [{
		key: "componentDidUpdate",
		value: function componentDidUpdate() {
			var preview = this.props.attributes.preview;


			this.preview = preview;
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    _props$attributes = _props.attributes,
			    containerImgURL = _props$attributes.containerImgURL,
			    containerImgID = _props$attributes.containerImgID,
			    bgImgSize = _props$attributes.bgImgSize,
			    bgImgAttach = _props$attributes.bgImgAttach,
			    bgImgRepeat = _props$attributes.bgImgRepeat,
			    overlayHue = _props$attributes.overlayHue,
			    overlayOpacity = _props$attributes.overlayOpacity,
			    blendMode = _props$attributes.blendMode,
			    containerPadding = _props$attributes.containerPadding,
			    containerMargin = _props$attributes.containerMargin,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    focalPoint = _props$attributes.focalPoint,
			    videoType = _props$attributes.videoType,
			    containerVideoURL = _props$attributes.containerVideoURL,
			    cannotEmbed = _props$attributes.cannotEmbed,
			    containerHue = _props$attributes.containerHue,
			    containerOpacity = _props$attributes.containerOpacity,
			    instanceId = _props$attributes.instanceId,
			    rows = _props$attributes.rows,
			    setAttributes = _props.setAttributes;


			var cssUnits = [{ value: "px", label: __("Pixel (px)", "c9-blocks") }, { value: "%", label: __("Percent (%)", "c9-blocks") }, { value: "em", label: __("Em (em)", "c9-blocks") }];

			var paddingOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Padding 0", "c9-blocks") }, { value: "1", label: __("Padding 1", "c9-blocks") }, { value: "2", label: __("Padding 2", "c9-blocks") }, { value: "3", label: __("Padding 3", "c9-blocks") }, { value: "4", label: __("Padding 4", "c9-blocks") }, { value: "5", label: __("Padding 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var marginOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Margin 0", "c9-blocks") }, { value: "1", label: __("Margin 1", "c9-blocks") }, { value: "2", label: __("Margin 2", "c9-blocks") }, { value: "3", label: __("Margin 3", "c9-blocks") }, { value: "4", label: __("Margin 4", "c9-blocks") }, { value: "5", label: __("Margin 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var sizeTypes = [{ value: "cover", label: __("Cover", "c9-blocks") }, { value: "contain", label: __("Contain", "c9-blocks") }, { value: "", label: __("Custom", "c9-blocks") }];

			var repeatTypes = [{ value: "no-repeat", label: __("no-repeat", "c9-blocks") }, { value: "repeat", label: __("repeat", "c9-blocks") }, { value: "round", label: __("round", "c9-blocks") }, { value: "space", label: __("space", "c9-blocks") }];

			var onSelectImage = function onSelectImage(img) {
				setAttributes({
					containerImgURL: img.url
				});
			};

			var onRemoveImage = function onRemoveImage() {
				setAttributes({
					containerImgURL: null,
					bgImgSize: "cover"
				});
			};

			var onSelectVideo = function onSelectVideo(video) {
				var replace = containerVideoURL && !!containerVideoURL.length;

				setAttributes({
					containerVideoURL: video.url,
					cannotEmbed: false
				});

				if (replace) {
					var vidElement = document.getElementById("containerVideo-" + instanceId);
					vidElement.load();
					vidElement.play();
				}
			};

			var onRemoveVideo = function onRemoveVideo() {
				setAttributes({
					containerVideoURL: null
				});
			};

			return wp.element.createElement(
				InspectorControls,
				null,
				wp.element.createElement(
					BaseControl,
					{ className: "c9-container-base-control" },
					wp.element.createElement(RangeControl, {
						className: "c9-height-range-control",
						beforeIcon: "arrow-left-alt2",
						afterIcon: "arrow-right-alt2",
						label: __("Window Height (vh)", "c9-blocks"),
						value: minScreenHeight,
						onChange: function onChange(minScreenHeight) {
							return setAttributes({ minScreenHeight: minScreenHeight });
						},
						min: 10,
						max: 100
					})
				),
				wp.element.createElement(
					PanelBody,
					null,
					wp.element.createElement(RangeControl, {
						label: __("Number of rows to produce", "c9-blocks"),
						value: rows,
						onChange: function onChange(value) {
							return setAttributes({ rows: value });
						},
						min: 1,
						max: 20,
						help: __("Note: Changing the row count can cause loss of content.", "c9-blocks")
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Spacing", "c9-blocks"), initialOpen: false },
					wp.element.createElement(
						"h5",
						{ className: "padding-label" },
						__("Padding", "c9-blocks")
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of padding for each side.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "padding-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.top,
							onChange: function onChange(value) {
								return _this2.updatePadding("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-sides-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.left,
							onChange: function onChange(value) {
								return _this2.updatePadding("left", value);
							}
						}),
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.containerPadding.icon,
							onClick: this.togglePaddingLinkage,
							ref: this.state.linkedPaddingRef
						}),
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.right,
							onChange: function onChange(value) {
								return _this2.updatePadding("right", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.bottom,
							onChange: function onChange(value) {
								return _this2.updatePadding("bottom", value);
							}
						})
					),
					wp.element.createElement("hr", null),
					wp.element.createElement(
						"h5",
						{ className: "margin-label" },
						"Margins"
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of margin for top and bottom sides.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "margin-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: containerMargin.top,
							onChange: function onChange(value) {
								return _this2.updateMargin("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-sides-wrapper" },
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.containerMargin.icon,
							onClick: this.toggleMarginLinkage,
							ref: this.state.linkedMarginRef
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: containerMargin.bottom,
							onChange: function onChange(value) {
								return _this2.updateMargin("bottom", value);
							}
						})
					)
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Background", "c9-blocks"), initialOpen: false },
					wp.element.createElement(MediaUpload, {
						id: "bg-image-select",
						label: __("Background Image", "c9-blocks"),
						onSelect: onSelectImage,
						type: "image",
						value: containerImgID,
						render: function render(_ref) {
							var open = _ref.open;
							return wp.element.createElement(
								"div",
								null,
								wp.element.createElement(
									IconButton,
									{
										label: __("Edit image", "c9-blocks"),
										icon: "format-image",
										onClick: open
									},
									__("Background Image", "c9-blocks")
								),
								containerImgURL && !!containerImgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										IconButton,
										{
											label: __("Remove Image", "c9-blocks"),
											icon: "dismiss",
											onClick: onRemoveImage
										},
										__("Remove", "c9-blocks")
									),
									wp.element.createElement(
										"h5",
										null,
										"Position"
									),
									wp.element.createElement(FocalPointPicker, {
										label: __("Focal Point Picker", "c9-blocks"),
										url: containerImgURL,
										value: focalPoint,
										onChange: function onChange(value) {
											return setAttributes({ focalPoint: value });
										}
									})
								),
								wp.element.createElement(
									"span",
									null,
									__("Background Color", "c9-blocks")
								),
								wp.element.createElement(ColorPalette, {
									label: __("Overlay Color", "c9-blocks"),
									value: containerHue,
									onChange: function onChange(containerHue) {
										return setAttributes({ containerHue: containerHue });
									}
								}),
								containerHue && !!containerHue.length && wp.element.createElement(RangeControl, {
									beforeIcon: "arrow-left-alt2",
									afterIcon: "arrow-right-alt2",
									label: __("Opacity", "c9-blocks"),
									value: containerOpacity,
									onChange: function onChange(containerOpacity) {
										return setAttributes({ containerOpacity: containerOpacity });
									},
									min: 1,
									max: 10
								}),
								wp.element.createElement(
									"span",
									null,
									__("Color Overlay", "c9-blocks")
								),
								wp.element.createElement(ColorPalette, {
									label: __("Overlay Color", "c9-blocks"),
									value: overlayHue,
									onChange: function onChange(overlayHue) {
										return setAttributes({ overlayHue: overlayHue });
									}
								}),
								overlayHue && !!overlayHue.length && wp.element.createElement(RangeControl, {
									beforeIcon: "arrow-left-alt2",
									afterIcon: "arrow-right-alt2",
									label: __("Opacity", "c9-blocks"),
									value: overlayOpacity,
									onChange: function onChange(overlayOpacity) {
										return setAttributes({ overlayOpacity: overlayOpacity });
									},
									min: 1,
									max: 10
								}),
								overlayHue && wp.element.createElement(SelectControl, {
									label: __("Blend Mode", "c9-blocks"),
									value: blendMode,
									options: [{ value: "overlay", label: __("Overlay", "c9-blocks") }, { value: "normal", label: __("Normal", "c9-blocks") }, {
										value: "multiply",
										label: __("Multiply", "c9-blocks")
									}, { value: "screen", label: __("Screen", "c9-blocks") }, { value: "darken", label: __("Darken", "c9-blocks") }, { value: "lighten", label: __("Lighten", "c9-blocks") }, {
										value: "color-dodge",
										label: __("Color Dodge", "c9-blocks")
									}, {
										value: "color-burn",
										label: __("Color Burn", "c9-blocks")
									}, {
										value: "hard-light",
										label: __("Hard Light", "c9-blocks")
									}, {
										value: "soft-light",
										label: __("Soft Light", "c9-blocks")
									}, {
										value: "difference",
										label: __("Difference", "c9-blocks")
									}, {
										value: "exclusion",
										label: __("Exclusion", "c9-blocks")
									}, { value: "hue", label: __("Hue", "c9-blocks") }, {
										value: "saturation",
										label: __("Saturation", "c9-blocks")
									}, { value: "color", label: __("Color", "c9-blocks") }, {
										value: "luminosity",
										label: __("Luminosity", "c9-blocks")
									}],
									onChange: function onChange(blendMode) {
										return setAttributes({ blendMode: blendMode });
									}
								}),
								wp.element.createElement("hr", null),
								containerImgURL && !!containerImgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										"h5",
										null,
										__("Attachment", "c9-blocks")
									),
									wp.element.createElement(ToggleControl, {
										label: __("Scroll | Fixed", "c9-blocks"),
										checked: bgImgAttach,
										onChange: function onChange(bgImgAttach) {
											return setAttributes({ bgImgAttach: bgImgAttach });
										}
									}),
									wp.element.createElement("hr", null),
									wp.element.createElement(
										"div",
										null,
										wp.element.createElement(
											"h5",
											null,
											__("Size", "c9-blocks")
										),
										wp.element.createElement(SelectControl, {
											help: __("Choose between cover, contain, or custom.", "c9-blocks"),
											options: sizeTypes,
											value: bgImgSize,
											onChange: function onChange(value) {
												return setAttributes({ bgImgSize: value });
											}
										}),
										!bgImgSize && wp.element.createElement(
											"div",
											null,
											wp.element.createElement(
												"h5",
												null,
												__("Horizontal", "c9-blocks")
											),
											wp.element.createElement(ToggleControl, {
												label: __("Auto | Manual", "c9-blocks"),
												checked: _this2.state.customX,
												onChange: function onChange(value) {
													_this2.setState({ customX: value });

													if (value) {
														_this2.updateBgX("unit", "%");
														_this2.updateBgX("size", 100);
													} else {
														_this2.updateBgX("size", "auto");
													}
												}
											}),
											_this2.state.customX && wp.element.createElement(
												"div",
												{ style: { display: "flex" } },
												wp.element.createElement(RangeControl, {
													value: _this2.state.bgCustomX.size,
													onChange: function onChange(value) {
														return _this2.updateBgX("size", value);
													},
													className: "bgSize",
													min: 0,
													max: Number.MAX_SAFE_INTEGER
												}),
												wp.element.createElement(SelectControl, {
													options: cssUnits,
													value: _this2.state.bgCustomX.unit,
													onChange: function onChange(value) {
														return _this2.updateBgX("unit", value);
													},
													className: "bgSize"
												})
											),
											wp.element.createElement(
												"h5",
												null,
												__("Vertical", "c9-blocks")
											),
											wp.element.createElement(ToggleControl, {
												label: __("Auto | Manual", "c9-blocks"),
												checked: _this2.state.customY,
												onChange: function onChange(value) {
													_this2.setState({ customY: value });

													if (value) {
														_this2.updateBgY("unit", "%");
														_this2.updateBgY("size", 100);
													} else {
														_this2.updateBgY("size", "auto");
													}
												}
											}),
											_this2.state.customY && wp.element.createElement(
												"div",
												{ style: { display: "flex" } },
												wp.element.createElement(RangeControl, {
													value: _this2.state.bgCustomY.size,
													onChange: function onChange(value) {
														return _this2.updateBgY("size", value);
													},
													className: "bgSize",
													min: 0,
													max: Number.MAX_SAFE_INTEGER
												}),
												wp.element.createElement(SelectControl, {
													options: cssUnits,
													value: _this2.state.bgCustomY.unit,
													onChange: function onChange(value) {
														return _this2.updateBgY("unit", value);
													},
													className: "bgSize"
												})
											)
										),
										wp.element.createElement("hr", null),
										wp.element.createElement(
											"h5",
											null,
											__("Repeat", "c9-blocks")
										),
										wp.element.createElement(SelectControl, {
											help: __("Choose between no-repeat, repeat, round or space.", "c9-blocks"),
											options: repeatTypes,
											value: bgImgRepeat,
											onChange: function onChange(value) {
												return setAttributes({ bgImgRepeat: value });
											}
										})
									)
								)
							);
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Video", "c9-blocks"), initialOpen: false },
					wp.element.createElement(RadioControl, {
						label: __("Media Type", "c9-blocks"),
						selected: videoType,
						options: [{ label: "Upload File", value: "upload" }, { label: "Embed URL", value: "embed" }],
						onChange: function onChange(videoType) {
							setAttributes({
								videoType: videoType,
								containerVideoURL: "",
								containerVideoID: ""
							});
							_this2.setState({ ID: "" });

							var preview = _this2.props.attributes.preview;

							if (preview && preview.i) {
								preview.destroy();
							}
						}
					}),
					wp.element.createElement("hr", null),
					"upload" == videoType && wp.element.createElement(MediaUpload, {
						id: "bg-video-select",
						label: __("Background Video", "c9-blocks"),
						onSelect: onSelectVideo,
						type: "video",
						value: containerImgID,
						allowedTypes: ["video"],
						render: function render(_ref2) {
							var open = _ref2.open;
							return wp.element.createElement(
								"div",
								null,
								wp.element.createElement(
									IconButton,
									{
										label: __("Edit Video", "c9-blocks"),
										icon: "format-image",
										onClick: open
									},
									__("Background Video", "c9-blocks")
								)
							);
						}
					}),
					"upload" == videoType && containerVideoURL && !!containerVideoURL.length && wp.element.createElement(
						"div",
						null,
						wp.element.createElement(
							IconButton,
							{
								label: __("Remove Video", "c9-blocks"),
								icon: "dismiss",
								onClick: onRemoveVideo
							},
							__("Remove", "c9-blocks")
						)
					),
					"embed" == videoType && wp.element.createElement(
						"div",
						null,
						wp.element.createElement(TextControl, {
							label: "YouTube URL or Youtube ID",
							value: this.state.ID,
							onChange: function onChange(value) {
								return _this2.updateID(value);
							}
						}),
						cannotEmbed && wp.element.createElement(
							"p",
							{ className: "text-danger" },
							__("Given YouTube ID/URL is not correctly formatted!", "c9-blocks")
						),
						wp.element.createElement(
							"div",
							null,
							wp.element.createElement(
								Button,
								{
									isDefault: true,
									onClick: function onClick() {
										return _this2.submitID();
									},
									style: { marginRight: "10px" }
								},
								__("Set", "c9-blocks")
							),
							wp.element.createElement(
								Button,
								{ isDefault: true, onClick: function onClick() {
										return _this2.resetID();
									} },
								__("Reset", "c9-blocks")
							)
						)
					)
				)
			);
		}
	}]);

	return Inspector;
}(Component);

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.updateBgX = function (position, value) {
		var sizeObject = Object.assign({}, _this3.state.bgCustomX);

		sizeObject[position] = value;
		_this3.setState({ bgCustomX: sizeObject });
		_this3.setAttributes({ bgCustomX: sizeObject });
	};

	this.updateBgY = function (position, value) {
		var sizeObject = Object.assign({}, _this3.state.bgCustomY);

		sizeObject[position] = value;
		_this3.setState({ bgCustomY: sizeObject });
		_this3.setAttributes({ bgCustomY: sizeObject });
	};

	this.togglePaddingLinkage = function () {
		var containerPadding = _this3.props.attributes.containerPadding;


		containerPadding = Object.assign({}, containerPadding);
		containerPadding.linked = !containerPadding.linked;
		containerPadding.icon = containerPadding.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ containerPadding: containerPadding });
		_this3.setAttributes({ containerPadding: containerPadding });
	};

	this.setPaddingUnit = function (value) {
		var containerPadding = _this3.props.attributes.containerPadding;


		var spacingObject = Object.assign({}, containerPadding);
		spacingObject.unit = value;
		_this3.setState({ containerPadding: spacingObject });
		_this3.setAttributes({ containerPadding: spacingObject });
	};

	this.updatePadding = function (position, value) {
		if (_this3.state.containerPadding.linked) {
			var spacingObject = {
				linked: _this3.state.containerPadding.linked,
				unit: _this3.state.containerPadding.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.containerPadding.icon
			};
			_this3.setState({ containerPadding: spacingObject });
			_this3.setAttributes({ containerPadding: spacingObject });
		} else {
			var _spacingObject = Object.assign({}, _this3.state.containerPadding);
			_spacingObject[position] = value;
			_this3.setState({ containerPadding: _spacingObject });
			_this3.setAttributes({ containerPadding: _spacingObject });
		}
	};

	this.toggleMarginLinkage = function () {
		var containerMargin = _this3.props.attributes.containerMargin;


		containerMargin = Object.assign({}, containerMargin);
		containerMargin.linked = !containerMargin.linked;
		containerMargin.icon = containerMargin.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ containerMargin: containerMargin });
		_this3.setAttributes({ containerMargin: containerMargin });
	};

	this.setMarginUnit = function (value) {
		var containerMargin = _this3.props.attributes.containerMargin;


		var spacingObject = Object.assign({}, containerMargin);
		spacingObject.unit = value;
		_this3.setState({ containerMargin: spacingObject });
		_this3.setAttributes({ containerMargin: spacingObject });
	};

	this.updateMargin = function (position, value) {
		if (_this3.state.containerMargin.linked) {
			var spacingObject = {
				linked: _this3.state.containerMargin.linked,
				unit: _this3.state.containerMargin.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.containerMargin.icon
			};
			_this3.setState({ containerMargin: spacingObject });
			_this3.setAttributes({ containerMargin: spacingObject });
		} else {
			var _spacingObject2 = Object.assign({}, _this3.state.containerMargin);
			_spacingObject2[position] = value;
			_this3.setState({ containerMargin: _spacingObject2 });
			_this3.setAttributes({ containerMargin: _spacingObject2 });
		}
	};

	this.updateID = function (value) {
		_this3.setState({ ID: value });
	};

	this.submitID = function () {
		// parse submitted item, check if valid id
		var checkURL = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;
		var checkAlphaNumeric = /^[a-zA-Z0-9-_]+$/;
		var result = void 0;

		if (result = _this3.state.ID.match(checkURL)) {
			_this3.setAttributes({ containerVideoID: result[1], cannotEmbed: false });
			_this3.setState({ ID: result[1] });
		} else if (result = _this3.state.ID.match(checkAlphaNumeric)) {
			_this3.setAttributes({ containerVideoID: result[0], cannotEmbed: false });
			_this3.setState({ ID: result[0] });
		} else {
			if (_this3.preview && _this3.preview.i) {
				_this3.preview.destroy();
			}
			_this3.setAttributes({ cannotEmbed: true });
		}

		// check if player exists
		if (_this3.preview && _this3.preview.i) {
			_this3.preview.loadVideoById(_this3.state.ID);
		}
	};

	this.resetID = function () {
		_this3.setState({ ID: "" });
		if (_this3.preview && _this3.preview.i) {
			_this3.preview.destroy();
			_this3.setAttributes({
				containerVideoID: "",
				cannotEmbed: false,
				preview: _this3.preview
			});
		}
	};
};

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 238 */
/*!*****************************************************************!*\
  !*** ./src/blocks/block-grid-container/components/video-box.js ***!
  \*****************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/media-has-caption */
/**
 * Internal block libraries
 */
// import CustomRadio from './custom-radio';


var Component = wp.element.Component;

/**
 * Create an VideoBox Controls wrapper Component
 */

var VideoBox = function (_Component) {
	_inherits(VideoBox, _Component);

	function VideoBox() {
		_classCallCheck(this, VideoBox);

		var _this = _possibleConstructorReturn(this, (VideoBox.__proto__ || Object.getPrototypeOf(VideoBox)).apply(this, arguments));

		_this.videoRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.videoContainerRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();

		var _this$props = _this.props,
		    _this$props$attribute = _this$props.attributes,
		    containerVideoURL = _this$props$attribute.containerVideoURL,
		    preview = _this$props$attribute.preview,
		    containerVideoID = _this$props$attribute.containerVideoID,
		    setAttributes = _this$props.setAttributes;


		_this.containerVideoURL = containerVideoURL;
		_this.containerVideoID = containerVideoID;
		_this.setAttributes = setAttributes;
		_this.preview = preview;

		_this.canPlay = _this.canPlay.bind(_this);
		_this.setYoutube = _this.setYoutube.bind(_this);
		_this.onPlayerReady = _this.onPlayerReady.bind(_this);
		return _this;
	}

	_createClass(VideoBox, [{
		key: "setYoutube",
		value: function setYoutube() {
			var _this2 = this;

			var instanceId = this.props.instanceId;


			if (!this.containerVideoID) {
				return;
			}

			var videoID = this.containerVideoID;

			var loadYT = window.YT;

			if (!loadYT) {
				loadYT = new Promise(function (resolve) {
					var tag = document.createElement("script");
					tag.src = "https://www.youtube.com/player_api";
					var firstScriptTag = document.getElementsByTagName("script")[0];
					firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
					window.onYouTubeIframeAPIReady = function () {
						return resolve(window.YT);
					};
				});
				loadYT.then(function (YT) {
					var player = new YT.Player("player-" + videoID + "-" + instanceId, {
						playerVars: {
							autoplay: 1,
							controls: 0,
							disablekb: 0,
							autohide: 1,
							wmode: "opaque",
							hd: 1,
							enablejsapi: 1,
							loop: 1,
							showinfo: 0,
							// eslint-disable-next-line camelcase
							iv_load_policy: 3,
							rel: 0,
							modestbranding: 1,
							playlist: videoID
						},
						videoId: videoID,
						events: {
							onReady: _this2.onPlayerReady
						}
					});
					_this2.setAttributes({ preview: player });
					_this2.preview = player;
				});
			} else {
				var player = new loadYT.Player("player-" + videoID + "-" + instanceId, {
					playerVars: {
						autoplay: 1,
						controls: 0,
						disablekb: 0,
						autohide: 1,
						wmode: "opaque",
						hd: 1,
						enablejsapi: 1,
						loop: 1,
						showinfo: 0,
						// eslint-disable-next-line camelcase
						iv_load_policy: 3,
						rel: 0,
						modestbranding: 1,
						playlist: videoID
					},
					videoId: videoID,
					events: {
						onReady: this.onPlayerReady
					}
				});

				this.setAttributes({ preview: player });
				this.preview = player;
			}
		}

		// API will call this function when the video player is ready.

	}, {
		key: "onPlayerReady",
		value: function onPlayerReady(event) {
			event.target.mute();

			if (this.videoContainerRef.current) {
				this.videoContainerRef.current.style.opacity = 1;
			}
		}
	}, {
		key: "canPlay",
		value: function canPlay() {
			if (this.videoContainerRef.current) {
				this.videoContainerRef.current.style.opacity = 1;
			}
		}
	}, {
		key: "componentDidMount",
		value: function componentDidMount() {
			this.setYoutube();
		}
	}, {
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    videoType = _props$attributes.videoType,
			    containerVideoURL = _props$attributes.containerVideoURL,
			    containerVideoID = _props$attributes.containerVideoID,
			    instanceId = _props$attributes.instanceId;


			var c9VideoStyles = function c9VideoStyles(videoType, containerVideoURL, minScreenHeight) {
				var styles = {};
				styles.minHeight = minScreenHeight + "vh";

				return styles;
			};

			if (containerVideoURL && "upload" == videoType) {
				return wp.element.createElement(
					"div",
					{ className: "c9-video-container", ref: this.videoContainerRef },
					wp.element.createElement(
						"div",
						{ className: "c9-embed-container" },
						wp.element.createElement(
							"video",
							{
								id: "containerVideo-" + instanceId,
								className: "c9-video-custom",
								playsinline: "playsinline",
								autoPlay: "autoplay",
								muted: "muted",
								loop: "loop",
								onCanPlayThrough: this.canPlay,
								ref: this.videoRef,
								style: c9VideoStyles(videoType, containerVideoURL, minScreenHeight)
							},
							wp.element.createElement("source", {
								src: "" + containerVideoURL,
								type: "video/mp4"
							})
						)
					)
				);
			} else {
				// return <WpEmbedPreview html={previewHTML} />;
				return wp.element.createElement(
					"div",
					{ className: "c9-video-container", ref: this.videoContainerRef },
					wp.element.createElement(
						"div",
						{ className: "c9-embed-container" },
						wp.element.createElement("div", {
							id: "player-" + containerVideoID + "-" + instanceId,
							className: "c9-video",
							"video-id": containerVideoID,
							style: c9VideoStyles(videoType, containerVideoURL, minScreenHeight)
						})
					)
				);
			}
		}
	}]);

	return VideoBox;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (VideoBox);

/***/ }),
/* 239 */
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 240 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_castFunction.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(/*! ./identity */ 47);

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;


/***/ }),
/* 241 */
/*!******************************************!*\
  !*** ./node_modules/lodash/toInteger.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var toFinite = __webpack_require__(/*! ./toFinite */ 242);

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;


/***/ }),
/* 242 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/toFinite.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var toNumber = __webpack_require__(/*! ./toNumber */ 243);

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),
/* 243 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ 9),
    isSymbol = __webpack_require__(/*! ./isSymbol */ 10);

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),
/* 244 */
/*!*************************************************!*\
  !*** ./src/blocks/block-grid-container/save.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_container__ = __webpack_require__(/*! ./components/container */ 45);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal dependencies
 */


/**
 * WordPress dependencies
 */
var Component = wp.element.Component;
var InnerBlocks = wp.editor.InnerBlocks;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "render",
		value: function render() {

			return wp.element.createElement(
				__WEBPACK_IMPORTED_MODULE_0__components_container__["a" /* default */],
				this.props,
				wp.element.createElement(InnerBlocks.Content, null)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 245 */
/*!*******************************************************!*\
  !*** ./src/blocks/block-grid-container/attributes.js ***!
  \*******************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	instanceId: {
		type: "number"
	},
	rows: {
		type: "number",
		default: 1
	},
	align: {
		type: "string",
		default: "full"
	},
	containerImgURL: {
		type: "string"
	},
	containerHue: {
		type: "string",
		default: undefined
	},
	containerOpacity: {
		type: "number",
		default: 10
	},
	bgImgSize: {
		type: "string",
		default: "cover"
	},
	bgCustomX: {
		type: "object",
		default: {
			size: "auto",
			unit: "px"
		}
	},
	bgCustomY: {
		type: "object",
		default: {
			size: "auto",
			unit: "px"
		}
	},
	bgImgRepeat: {
		type: "string",
		default: "no-repeat"
	},
	// true evaluates to backgroundAttachment fixed, false to scroll
	bgImgAttach: {
		type: "boolean",
		default: false
	},
	overlayHue: {
		type: "string",
		default: undefined
	},
	overlayOpacity: {
		type: "number",
		default: 5
	},
	blendMode: {
		type: "string",
		default: "overlay"
	},
	linkedValToggle: {
		type: "boolean",
		default: true
	},
	minScreenHeight: {
		type: "number",
		default: 20
	},
	containerMargin: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			unit: "px",
			top: "-1",
			bottom: "-1"
		}
	},
	containerPadding: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			top: "5",
			bottom: "5",
			left: "5",
			right: "5"
		}
	},
	focalPoint: {
		type: "object",
		default: {
			x: 0.5,
			y: 0.5
		}
	},
	videoType: {
		type: "string",
		default: "upload"
	},
	containerVideoURL: {
		type: "string",
		default: ""
	},
	containerVideoID: {
		type: "string",
		default: ""
	},
	cannotEmbed: {
		type: "boolean",
		default: false
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 246 */
/*!*********************************!*\
  !*** ./assets/icon-c9-grid.svg ***!
  \*********************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-grid_svg__cls-1{fill:#fff}.icon-c9-grid_svg__cls-2{fill:#6d6e71}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-grid_svg__cls-1",
  d: "M2.44 6.82h42.9v5.98H2.44z"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-grid_svg__cls-2",
  d: "M44.83 7.33v5H3v-5h41.83m1-1H1.93v7h43.92v-7z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-grid_svg__cls-1",
  d: "M2.36 6.81h42.99V41.8H2.36z"
});

var _ref5 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-grid_svg__cls-2",
  d: "M44.85 7.31v34h-42v-34h42m1-1h-44v36h44v-36z"
});

var _ref6 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-grid_svg__cls-1",
  d: "M17.35 12.81h13v29h-13z"
});

var _ref7 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-grid_svg__cls-2",
  d: "M29.85 13.31v28h-12v-28h12m1-1h-14v30h14v-30z"
});

var _ref8 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-grid_svg__cls-2",
  d: "M44.85 7.31v5h-42v-5h42m1-1h-44v7h44v-7z"
});

var SvgIconC9Grid = function SvgIconC9Grid(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-grid_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9Grid);

/***/ }),
/* 247 */
/*!***********************************************************!*\
  !*** ./src/blocks/block-grid-container/styles/style.scss ***!
  \***********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 248 */
/*!************************************************************!*\
  !*** ./src/blocks/block-grid-container/styles/editor.scss ***!
  \************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 249 */
/*!***************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/index.js ***!
  \***************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 250);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 253);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 254);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 255);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 256);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__assets_icon_c9_tabs_horizontal_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-tabs-horizontal.svg */ 257);
// Import block dependencies and components





// Import CSS





// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/horizontal-tabs", {
	title: __("C9 Horizontal Tabs", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_icon_c9_tabs_horizontal_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {
		// fill in features
	},
	keywords: [__("tabs", "c9-blocks"), __("container", "c9-blocks"), __("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],
	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    getBlock = _select.getBlock,
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			block: getBlock(clientId),
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	}), withDispatch(function (dispatch) {
		var _dispatch = dispatch("core/editor"),
		    updateBlockAttributes = _dispatch.updateBlockAttributes,
		    removeBlock = _dispatch.removeBlock;

		return {
			updateBlockAttributes: updateBlockAttributes,
			removeBlock: removeBlock
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/***/ }),
/* 250 */
/*!**************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/edit.js ***!
  \**************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 251);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_remove_button__ = __webpack_require__(/*! ./components/remove-button */ 252);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_slugify__ = __webpack_require__(/*! slugify */ 48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_slugify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_slugify__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal dependencies
 */



/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    IconButton = _wp$components.IconButton,
    Tooltip = _wp$components.Tooltip;
var _wp$editor = wp.editor,
    RichText = _wp$editor.RichText,
    InnerBlocks = _wp$editor.InnerBlocks,
    BlockControls = _wp$editor.BlockControls,
    AlignmentToolbar = _wp$editor.AlignmentToolbar;
var applyFilters = wp.hooks.applyFilters;
var _wp$data = wp.data,
    select = _wp$data.select,
    dispatch = _wp$data.dispatch;
var withInstanceId = wp.compose.withInstanceId;

// External Dependencies.




var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.getTabsTemplate = _this.getTabsTemplate.bind(_this);
		_this.getTabs = _this.getTabs.bind(_this);
		_this.isUniqueSlug = _this.isUniqueSlug.bind(_this);
		_this.getUniqueSlug = _this.getUniqueSlug.bind(_this);
		return _this;
	}

	/**
  * Returns the layouts configuration for a given number of tabs.
  *
  * @param {number} attributes tabs attributes.
  *
  * @return {Object[]} Tabs layout configuration.
  */


	_createClass(Edit, [{
		key: "getTabsTemplate",
		value: function getTabsTemplate() {
			var instanceId = this.props.instanceId;
			var _props$attributes = this.props.attributes,
			    _props$attributes$tab = _props$attributes.tabsData,
			    tabsData = _props$attributes$tab === undefined ? [] : _props$attributes$tab,
			    tabActive = _props$attributes.tabActive;

			var result = [];

			tabsData.forEach(function (tabData) {
				result.push(["c9-blocks/horizontal-tabs-tab", Object.assign({}, tabData, { tabActive: tabActive, id: instanceId })]);
			});

			return result;
		}
	}, {
		key: "getTabs",
		value: function getTabs() {
			return this.props.block.innerBlocks;
		}
	}, {
		key: "isUniqueSlug",
		value: function isUniqueSlug(slug, ignoreClientId) {
			var tabs = this.getTabs();
			var isUnique = true;

			tabs.forEach(function (tabProps) {
				if (tabProps.clientId !== ignoreClientId && tabProps.attributes.slug === slug) {
					isUnique = false;
				}
			});

			return isUnique;
		}
	}, {
		key: "getUniqueSlug",
		value: function getUniqueSlug(newTitle, tabData) {
			var newSlug = "";
			var i = 0;

			while (!newSlug || !this.isUniqueSlug(newSlug, tabData.clientId)) {
				if (newSlug) {
					i += 1;
				}
				newSlug = __WEBPACK_IMPORTED_MODULE_3_slugify___default()("tab-" + newTitle + (i ? "-" + i : ""), {
					replacement: "-",
					lower: true
				});
			}

			return newSlug;
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes,
			    updateBlockAttributes = _props.updateBlockAttributes,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot,
			    block = _props.block,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className,
			    clientId = _props.clientId,
			    instanceId = _props.instanceId;
			var tabActive = attributes.tabActive,
			    buttonsAlign = attributes.buttonsAlign,
			    _attributes$tabsData = attributes.tabsData,
			    tabsData = _attributes$tabsData === undefined ? [] : _attributes$tabsData,
			    tabBackgroundColor = attributes.tabBackgroundColor,
			    tabTextColor = attributes.tabTextColor,
			    tabContentBackgroundColor = attributes.tabContentBackgroundColor,
			    blockBackgroundColor = attributes.blockBackgroundColor;


			if (instanceId != attributes.instanceId) {
				setAttributes({ instanceId: instanceId });

				// eslint-disable-next-line no-unused-vars
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = block.innerBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var child = _step.value;

						if (instanceId != child.attributes.id) {
							updateBlockAttributes(child.clientId, { id: instanceId });
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
			}

			var tabs = this.getTabs();

			var align = void 0;
			if ("start" == buttonsAlign) {
				align = "left";
			} else if ("end" == buttonsAlign) {
				align = "right";
			} else {
				align = buttonsAlign;
			}

			select("core/editor").getBlocksByClientId(clientId)[0].innerBlocks.forEach(function (block) {
				dispatch("core/editor").updateBlockAttributes(block.clientId, {
					tabActive: tabActive
				});
			});

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(
					BlockControls,
					null,
					wp.element.createElement(AlignmentToolbar, {
						value: align,
						onChange: function onChange(value) {
							if ("left" == value) {
								setAttributes({ buttonsAlign: "start" });
							} else if ("right" == value) {
								setAttributes({ buttonsAlign: "end" });
							} else {
								setAttributes({ buttonsAlign: value });
							}
						},
						controls: ["left", "center", "right"]
					})
				),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__components_inspector__["a" /* default */], this.props),
				wp.element.createElement(
					"div",
					{
						className: applyFilters("c9-blocks.blocks.className", className),
						"data-tab-active": tabActive,
						style: {
							backgroundColor: blockBackgroundColor
						}
					},
					wp.element.createElement(
						"ul",
						{
							className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()("nav nav-tabs d-flex", buttonsAlign ? "justify-content-" + buttonsAlign : "nav-justified"),
							role: "tablist"
						},
						tabsData.map(function (tabData, i) {
							var slug = tabData.slug,
							    title = tabData.title;

							var selected = tabActive === slug;

							return wp.element.createElement(
								"li",
								{ className: "nav-item" },
								wp.element.createElement(RichText, {
									style: {
										backgroundColor: tabBackgroundColor,
										color: tabTextColor
									},
									tagName: "a",
									"data-toggle": "tab",
									role: "tab",
									href: "#tab-" + slug + "-" + instanceId,
									className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()("nav-link", selected ? "active" : ""),
									id: "tab-button-" + slug,
									placeholder: __("Tab label", "c9-blocks"),
									value: title,
									unstableOnFocus: function unstableOnFocus() {
										return setAttributes({ tabActive: slug });
									},
									onChange: function onChange(value) {
										if (tabs[i]) {
											var newSlug = _this2.getUniqueSlug(value, tabs[i]);
											var newTabsData = tabsData.map(function (oldTabData, newIndex) {
												if (i === newIndex) {
													return Object.assign({}, oldTabData, {
														title: value,
														slug: newSlug
													});
												}

												return oldTabData;
											});

											setAttributes({
												tabActive: newSlug,
												tabsData: newTabsData
											});
											updateBlockAttributes(tabs[i].clientId, {
												slug: newSlug
											});
										}
									},
									formattingControls: ["bold", "italic", "strikethrough"],
									keepPlaceholderOnFocus: true
								}),
								wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_remove_button__["a" /* default */], {
									show: isSelectedBlockInRoot,
									tooltipText: __("Remove tab?", "c9-blocks"),
									onRemove: function onRemove() {
										if (1 >= block.innerBlocks.length) {
											_this2.props.removeBlock(block.clientId);
										} else if (block.innerBlocks[i]) {
											_this2.props.removeBlock(block.innerBlocks[i].clientId);

											if (tabsData[i]) {
												var newTabsData = Object.assign([], tabsData);
												newTabsData.splice(i, 1);

												setAttributes({
													tabsData: newTabsData
												});
											}
										}
									}
								})
							);
						}),
						isSelectedBlockInRoot ? wp.element.createElement(
							Tooltip,
							{ text: __("Add Tab", "c9-blocks") },
							wp.element.createElement(IconButton, {
								icon: "insert",
								onClick: function onClick() {
									var newTabsData = [];
									var newDataLength = tabsData.length + 1;

									for (var k = 0; k < newDataLength; k += 1) {
										if (tabsData[k]) {
											newTabsData.push(tabsData[k]);
										} else {
											newTabsData.push({
												slug: "tab-" + (k + 1),
												title: "Tab " + (k + 1)
											});
										}
									}

									setAttributes({ tabsData: newTabsData });
								}
							})
						) : ""
					),
					wp.element.createElement(
						"div",
						{
							className: "c9-tabs-content tab-content",
							style: {
								backgroundColor: tabContentBackgroundColor
							}
						},
						wp.element.createElement(InnerBlocks, {
							template: this.getTabsTemplate(),
							templateLock: "all",
							allowedBlocks: ["c9-blocks/horizontal-tabs-tab"]
						})
					)
				),
				wp.element.createElement(
					"style",
					null,
					"\n                    [data-block=\"" + this.props.clientId + "\"] > .c9-horizontal-tabs > .tab-content > .editor-inner-blocks > .editor-block-list__layout [data-tab=\"" + tabActive + "\"] {\n                        display: block;\n                    }\n                    "
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (withInstanceId(Edit));

/***/ }),
/* 251 */
/*!******************************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/components/inspector.js ***!
  \******************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$editor = wp.editor,
    AlignmentToolbar = _wp$editor.AlignmentToolbar,
    InspectorControls = _wp$editor.InspectorControls,
    PanelColorSettings = _wp$editor.PanelColorSettings;
var BaseControl = wp.components.BaseControl;
var ContrastChecker = wp.blockEditor.ContrastChecker;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		return _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes;
			var buttonsAlign = attributes.buttonsAlign,
			    tabBackgroundColor = attributes.tabBackgroundColor,
			    tabTextColor = attributes.tabTextColor,
			    tabContentBackgroundColor = attributes.tabContentBackgroundColor,
			    blockBackgroundColor = attributes.blockBackgroundColor;


			var align = void 0;
			if ("start" == buttonsAlign) {
				align = "left";
			} else if ("end" == buttonsAlign) {
				align = "right";
			} else {
				align = buttonsAlign;
			}

			return wp.element.createElement(
				InspectorControls,
				null,
				wp.element.createElement(
					BaseControl,
					{ label: __("Tabs Align", "c9-blocks") },
					wp.element.createElement(AlignmentToolbar, {
						value: align,
						onChange: function onChange(value) {
							if ("left" == value) {
								setAttributes({ buttonsAlign: "start" });
							} else if ("right" == value) {
								setAttributes({ buttonsAlign: "end" });
							} else {
								setAttributes({ buttonsAlign: value });
							}
						},
						controls: ["left", "center", "right"]
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						title: __("Block Color Settings", "c9-blocks"),
						initialOpen: true,
						colorSettings: [{
							value: blockBackgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ blockBackgroundColor: value });
							},
							label: __("Background Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						backgroundColor: tabContentBackgroundColor,
						fallbackBackgroundColor: "white"
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						title: __("Tab Color Settings", "c9-blocks"),
						initialOpen: false,
						colorSettings: [{
							value: tabBackgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ tabBackgroundColor: value });
							},
							label: __("Background Color", "c9-blocks")
						}, {
							value: tabTextColor,
							onChange: function onChange(value) {
								return setAttributes({ tabTextColor: value });
							},
							label: __("Text Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						textColor: tabTextColor,
						backgroundColor: tabBackgroundColor,
						fallbackTextColor: "black",
						fallbackBackgroundColor: "white"
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						title: __("Tab Content Color Settings", "c9-blocks"),
						initialOpen: false,
						colorSettings: [{
							value: tabContentBackgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ tabContentBackgroundColor: value });
							},
							label: __("Background Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						backgroundColor: tabContentBackgroundColor,
						fallbackBackgroundColor: "white"
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 252 */
/*!**********************************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/components/remove-button.js ***!
  \**********************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Import CSS
var Component = wp.element.Component;
var _wp$components = wp.components,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG;
var __ = wp.i18n.__;
var _wp$components2 = wp.components,
    Button = _wp$components2.Button,
    Popover = _wp$components2.Popover;

var RemoveButton = function (_Component) {
	_inherits(RemoveButton, _Component);

	function RemoveButton() {
		_classCallCheck(this, RemoveButton);

		var _this = _possibleConstructorReturn(this, (RemoveButton.__proto__ || Object.getPrototypeOf(RemoveButton)).apply(this, arguments));

		_this.state = {
			confirmed: -1
		};
		return _this;
	}

	_createClass(RemoveButton, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    onRemove = _props.onRemove,
			    show = _props.show,
			    style = _props.style,
			    _props$tooltipText = _props.tooltipText,
			    tooltipText = _props$tooltipText === undefined ? __("Remove block?", "c9-blocks") : _props$tooltipText,
			    _props$tooltipRemoveT = _props.tooltipRemoveText,
			    tooltipRemoveText = _props$tooltipRemoveT === undefined ? __("Remove", "c9-blocks") : _props$tooltipRemoveT,
			    _props$tooltipCancelT = _props.tooltipCancelText,
			    tooltipCancelText = _props$tooltipCancelT === undefined ? __("Cancel", "c9-blocks") : _props$tooltipCancelT;
			var confirmed = this.state.confirmed;


			if (!show) {
				return "";
			}

			return wp.element.createElement(
				Button,
				{
					className: "c9-component-remove-button",
					onClick: function onClick() {
						if (-1 === confirmed) {
							_this2.setState({
								confirmed: 0
							});
						}
					},
					style: style
				},
				0 === confirmed ? wp.element.createElement(
					Popover,
					{
						className: "c9-component-remove-button-confirm",
						onClose: function onClose() {
							_this2.setState({
								confirmed: -1
							});
						},
						onClickOutside: function onClickOutside() {
							_this2.setState({
								confirmed: -1
							});
						}
					},
					tooltipText,
					wp.element.createElement(
						Button,
						{
							className: "c9-component-remove-button-confirm-yep",
							onClick: onRemove
						},
						tooltipRemoveText
					),
					wp.element.createElement(
						Button,
						{
							className: "c9-component-remove-button-confirm-nope",
							onClick: function onClick() {
								_this2.setState({
									confirmed: -1
								});
							}
						},
						tooltipCancelText
					)
				) : "",
				wp.element.createElement(
					SVG,
					{
						xmlns: "http://www.w3.org/2000/svg",
						"aria-hidden": "true",
						focusable: "false",
						width: "1em",
						height: "1em",
						style: { transform: "rotate(360deg)", height: "1.2em", width: "auto" },
						preserveAspectRatio: "xMidYMid meet",
						viewBox: "0 0 20 20"
					},
					wp.element.createElement(Path, {
						d: "M12 4h3c.6 0 1 .4 1 1v1H3V5c0-.6.5-1 1-1h3c.2-1.1 1.3-2 2.5-2s2.3.9 2.5 2zM8 4h3c-.2-.6-.9-1-1.5-1S8.2 3.4 8 4zM4 7h11l-.9 10.1c0 .5-.5.9-1 .9H5.9c-.5 0-.9-.4-1-.9L4 7z",
						fill: "#fff"
					})
				)
			);
		}
	}]);

	return RemoveButton;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (RemoveButton);

/***/ }),
/* 253 */
/*!**************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/save.js ***!
  \**************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// External Dependencies.


var applyFilters = wp.hooks.applyFilters;

/**
 * WordPress dependencies
 */

var Component = wp.element.Component;
var _wp$editor = wp.editor,
    RichText = _wp$editor.RichText,
    InnerBlocks = _wp$editor.InnerBlocks;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    tabActive = _props$attributes.tabActive,
			    buttonsAlign = _props$attributes.buttonsAlign,
			    _props$attributes$tab = _props$attributes.tabsData,
			    tabsData = _props$attributes$tab === undefined ? [] : _props$attributes$tab,
			    tabBackgroundColor = _props$attributes.tabBackgroundColor,
			    tabTextColor = _props$attributes.tabTextColor,
			    tabContentBackgroundColor = _props$attributes.tabContentBackgroundColor,
			    blockBackgroundColor = _props$attributes.blockBackgroundColor,
			    instanceId = _props$attributes.instanceId;
			var _props$className = this.props.className,
			    className = _props$className === undefined ? "" : _props$className;


			return [wp.element.createElement(
				"div",
				{
					className: applyFilters("c9-blocks.blocks.className", className),
					"data-tab-active": tabActive,
					style: {
						backgroundColor: blockBackgroundColor
					}
				},
				wp.element.createElement(
					"ul",
					{
						className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("nav nav-tabs d-flex", buttonsAlign ? "justify-content-" + buttonsAlign : "nav-justified"),
						role: "tablist"
					},
					tabsData.map(function (tabData) {
						var slug = tabData.slug,
						    title = tabData.title;

						var selected = tabActive === slug;
						return wp.element.createElement(
							"li",
							{ className: "nav-item" },
							wp.element.createElement(RichText.Content, {
								style: {
									backgroundColor: tabBackgroundColor,
									color: tabTextColor
								},
								tagName: "a",
								"data-toggle": "tab",
								role: "tab",
								href: "#tab-" + slug + "-" + instanceId,
								className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("nav-link", selected ? "active" : ""),
								id: "tab-button-" + slug,
								value: title
							})
						);
					})
				),
				wp.element.createElement(
					"div",
					{
						className: "c9-tabs-content tab-content",
						style: {
							backgroundColor: tabContentBackgroundColor
						}
					},
					wp.element.createElement(InnerBlocks.Content, null)
				)
			)];
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 254 */
/*!********************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/attributes.js ***!
  \********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	tabActive: {
		type: "string",
		default: "tab-1"
	},
	buttonsAlign: {
		type: "string"
	},
	tabsData: {
		type: "array",
		default: [{
			slug: "tab-1",
			title: "Tab 1"
		}, {
			slug: "tab-2",
			title: "Tab 2"
		}]
	},
	instanceId: {
		type: "number"
	},
	tabBackgroundColor: {
		type: "string"
	},
	tabTextColor: {
		type: "string"
	},
	tabContentBackgroundColor: {
		type: "string"
	},
	blockBackgroundColor: {
		type: "string"
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 255 */
/*!************************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/styles/style.scss ***!
  \************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 256 */
/*!*************************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/styles/editor.scss ***!
  \*************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 257 */
/*!********************************************!*\
  !*** ./assets/icon-c9-tabs-horizontal.svg ***!
  \********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-tabs-horizontal_svg__cls-1{fill:none;stroke:#6d6e71;stroke-miterlimit:10}.icon-c9-tabs-horizontal_svg__cls-2{fill:#6d6e71}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-tabs-horizontal_svg__cls-1",
  d: "M7.85 18.96h32M7.85 26.96h32M7.85 34.96h32"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-tabs-horizontal_svg__cls-2",
  d: "M44.85 14v27h-42V14h42m1-1h-44v29h44V13zM29.87 6.94v3h-11v-3h11m1-1h-13v5h13V6zM44.87 6.94v3h-11v-3h11m1-1h-13v5h13V6zM2.33 6.44h12.04v4.04H2.33z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-tabs-horizontal_svg__cls-2",
  d: "M13.89 6.92V10H2.82V6.92h11.07m1-1h-13v5h13V6z"
});

var SvgIconC9TabsHorizontal = function SvgIconC9TabsHorizontal(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-tabs-horizontal_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9TabsHorizontal);

/***/ }),
/* 258 */
/*!*************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/index.js ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 259);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 263);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 264);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_tabs_vertical_tabs_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-tabs-vertical-tabs.svg */ 265);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 266);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 267);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__);
// Import block dependencies and components







// Import CSS



// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/vertical-tabs", {
	title: __("C9 Vertical Tabs", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_tabs_vertical_tabs_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {
		// fill in features
	},
	keywords: [__("tabs", "c9-blocks"), __("container", "c9-blocks"), __("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],
	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    getBlock = _select.getBlock,
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			block: getBlock(clientId),
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	}), withDispatch(function (dispatch) {
		var _dispatch = dispatch("core/editor"),
		    updateBlockAttributes = _dispatch.updateBlockAttributes,
		    removeBlock = _dispatch.removeBlock;

		return {
			updateBlockAttributes: updateBlockAttributes,
			removeBlock: removeBlock
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/***/ }),
/* 259 */
/*!************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/edit.js ***!
  \************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 260);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_remove_button__ = __webpack_require__(/*! ./components/remove-button */ 261);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_vertical_align_toolbar__ = __webpack_require__(/*! ./components/vertical-align-toolbar */ 262);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_slugify__ = __webpack_require__(/*! slugify */ 48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_slugify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_slugify__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal dependencies
 */




/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    IconButton = _wp$components.IconButton,
    Tooltip = _wp$components.Tooltip;
var _wp$editor = wp.editor,
    RichText = _wp$editor.RichText,
    InnerBlocks = _wp$editor.InnerBlocks,
    BlockControls = _wp$editor.BlockControls,
    AlignmentToolbar = _wp$editor.AlignmentToolbar;
var applyFilters = wp.hooks.applyFilters;
var withInstanceId = wp.compose.withInstanceId;
var _wp$data = wp.data,
    select = _wp$data.select,
    dispatch = _wp$data.dispatch;

// External Dependencies.




var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.getTabsTemplate = _this.getTabsTemplate.bind(_this);
		_this.getTabs = _this.getTabs.bind(_this);
		_this.isUniqueSlug = _this.isUniqueSlug.bind(_this);
		_this.getUniqueSlug = _this.getUniqueSlug.bind(_this);
		return _this;
	}

	/**
  * Returns the layouts configuration for a given number of tabs.
  *
  * @param {number} attributes tabs attributes.
  *
  * @return {Object[]} Tabs layout configuration.
  */


	_createClass(Edit, [{
		key: "getTabsTemplate",
		value: function getTabsTemplate() {
			var instanceId = this.props.instanceId;
			var _props$attributes = this.props.attributes,
			    _props$attributes$tab = _props$attributes.tabsData,
			    tabsData = _props$attributes$tab === undefined ? [] : _props$attributes$tab,
			    tabActive = _props$attributes.tabActive;

			var result = [];

			tabsData.forEach(function (tabData) {
				result.push(["c9-blocks/vertical-tabs-tab", Object.assign({}, tabData, { tabActive: tabActive, id: instanceId })]);
			});

			return result;
		}
	}, {
		key: "getTabs",
		value: function getTabs() {
			return this.props.block.innerBlocks;
		}
	}, {
		key: "isUniqueSlug",
		value: function isUniqueSlug(slug, ignoreClientId) {
			var tabs = this.getTabs();
			var isUnique = true;

			tabs.forEach(function (tabProps) {
				if (tabProps.clientId !== ignoreClientId && tabProps.attributes.slug === slug) {
					isUnique = false;
				}
			});

			return isUnique;
		}
	}, {
		key: "getUniqueSlug",
		value: function getUniqueSlug(newTitle, tabData) {
			var newSlug = "";
			var i = 0;

			while (!newSlug || !this.isUniqueSlug(newSlug, tabData.clientId)) {
				if (newSlug) {
					i += 1;
				}
				newSlug = __WEBPACK_IMPORTED_MODULE_4_slugify___default()("tab-" + newTitle + (i ? "-" + i : ""), {
					replacement: "-",
					lower: true
				});
			}

			return newSlug;
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes,
			    updateBlockAttributes = _props.updateBlockAttributes,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot,
			    block = _props.block,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className,
			    clientId = _props.clientId,
			    instanceId = _props.instanceId;
			var tabActive = attributes.tabActive,
			    _attributes$tabsData = attributes.tabsData,
			    tabsData = _attributes$tabsData === undefined ? [] : _attributes$tabsData,
			    tabBackgroundColor = attributes.tabBackgroundColor,
			    tabTextColor = attributes.tabTextColor,
			    tabContentBackgroundColor = attributes.tabContentBackgroundColor,
			    blockBackgroundColor = attributes.blockBackgroundColor,
			    verticalAlign = attributes.verticalAlign,
			    textAlign = attributes.textAlign;


			if (instanceId != attributes.instanceId) {
				setAttributes({ instanceId: instanceId });

				// eslint-disable-next-line no-unused-vars
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = block.innerBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var child = _step.value;

						if (instanceId != child.attributes.id) {
							updateBlockAttributes(child.clientId, { id: instanceId });
						}
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
			}

			var tabs = this.getTabs();

			select("core/editor").getBlocksByClientId(clientId)[0].innerBlocks.forEach(function (block) {
				dispatch("core/editor").updateBlockAttributes(block.clientId, {
					tabActive: tabActive
				});
			});

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(
					BlockControls,
					null,
					wp.element.createElement(AlignmentToolbar, {
						value: textAlign,
						onChange: function onChange(value) {
							return setAttributes({ textAlign: value });
						}
					}),
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_vertical_align_toolbar__["a" /* default */], {
						value: verticalAlign,
						onChange: function onChange(value) {
							setAttributes({ verticalAlign: value });
						}
					})
				),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__components_inspector__["a" /* default */], this.props),
				wp.element.createElement(
					"div",
					{
						className: __WEBPACK_IMPORTED_MODULE_3_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "row"),
						style: {
							backgroundColor: blockBackgroundColor
						},
						"data-tab-active": tabActive
					},
					wp.element.createElement(
						"div",
						{ className: "col-xs-12 col-sm-3" },
						wp.element.createElement(
							"div",
							{
								className: __WEBPACK_IMPORTED_MODULE_3_classnames___default()("nav flex-column nav-pills", textAlign ? "text-" + textAlign : null),
								role: "tablist"
							},
							tabsData.map(function (tabData, i) {
								var slug = tabData.slug,
								    title = tabData.title;

								var selected = tabActive === slug;

								return wp.element.createElement(
									"div",
									{ className: "c9-tab-admin-wrapper" },
									wp.element.createElement(RichText, {
										style: {
											backgroundColor: tabBackgroundColor,
											color: tabTextColor
										},
										tagName: "a",
										"data-toggle": "pill",
										role: "tab",
										href: "#tab-" + slug + "-" + instanceId,
										className: __WEBPACK_IMPORTED_MODULE_3_classnames___default()("nav-link", selected ? "active" : ""),
										id: "tab-button-" + slug,
										placeholder: __("Tab label", "c9-blocks"),
										value: title,
										unstableOnFocus: function unstableOnFocus() {
											return setAttributes({ tabActive: slug });
										},
										onChange: function onChange(value) {
											if (tabs[i]) {
												var newSlug = _this2.getUniqueSlug(value, tabs[i]);
												var newTabsData = tabsData.map(function (oldTabData, newIndex) {
													if (i === newIndex) {
														return Object.assign({}, oldTabData, {
															title: value,
															slug: newSlug
														});
													}

													return oldTabData;
												});

												setAttributes({
													tabActive: newSlug,
													tabsData: newTabsData
												});
												updateBlockAttributes(tabs[i].clientId, {
													slug: newSlug
												});
											}
										},
										formattingControls: ["bold", "italic", "strikethrough"],
										keepPlaceholderOnFocus: true
									}),
									wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_remove_button__["a" /* default */], {
										show: isSelectedBlockInRoot,
										tooltipText: __("Remove tab?", "c9-blocks"),
										onRemove: function onRemove() {
											if (1 >= block.innerBlocks.length) {
												_this2.props.removeBlock(block.clientId);
											} else if (block.innerBlocks[i]) {
												_this2.props.removeBlock(block.innerBlocks[i].clientId);

												if (tabsData[i]) {
													var newTabsData = Object.assign([], tabsData);
													newTabsData.splice(i, 1);

													setAttributes({
														tabsData: newTabsData
													});
												}
											}
										}
									})
								);
							}),
							isSelectedBlockInRoot ? wp.element.createElement(
								Tooltip,
								{ text: __("Add Tab", "c9-blocks") },
								wp.element.createElement(IconButton, {
									icon: "insert",
									onClick: function onClick() {
										var newTabsData = [];
										var newDataLength = tabsData.length + 1;

										for (var k = 0; k < newDataLength; k += 1) {
											if (tabsData[k]) {
												newTabsData.push(tabsData[k]);
											} else {
												newTabsData.push({
													slug: "tab-" + (k + 1),
													title: "Tab " + (k + 1)
												});
											}
										}

										setAttributes({ tabsData: newTabsData });
									}
								})
							) : ""
						)
					),
					wp.element.createElement(
						"div",
						{ className: "col-xs-12 col-sm-9 c9-tabs-content-wrapper" },
						wp.element.createElement(
							"div",
							{
								className: __WEBPACK_IMPORTED_MODULE_3_classnames___default()("c9-tabs-content tab-content", verticalAlign ? "align-self-" + verticalAlign : null),
								style: {
									backgroundColor: tabContentBackgroundColor
								}
							},
							wp.element.createElement(InnerBlocks, {
								template: this.getTabsTemplate(),
								templateLock: "all",
								allowedBlocks: ["c9-blocks/vertical-tabs-tab"]
							})
						)
					)
				),
				wp.element.createElement(
					"style",
					null,
					"\n                    [data-block=\"" + this.props.clientId + "\"] > .c9-vertical-tabs > div > .tab-content > .editor-inner-blocks > .editor-block-list__layout [data-tab=\"" + tabActive + "\"] {\n                        display: block;\n                    }\n                    "
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (withInstanceId(Edit));

/***/ }),
/* 260 */
/*!****************************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/components/inspector.js ***!
  \****************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$editor = wp.editor,
    AlignmentToolbar = _wp$editor.AlignmentToolbar,
    InspectorControls = _wp$editor.InspectorControls,
    PanelColorSettings = _wp$editor.PanelColorSettings;
var BaseControl = wp.components.BaseControl;
var ContrastChecker = wp.blockEditor.ContrastChecker;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		return _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes;
			var buttonsAlign = attributes.buttonsAlign,
			    tabBackgroundColor = attributes.tabBackgroundColor,
			    tabTextColor = attributes.tabTextColor,
			    tabContentBackgroundColor = attributes.tabContentBackgroundColor,
			    blockBackgroundColor = attributes.blockBackgroundColor;


			return wp.element.createElement(
				InspectorControls,
				null,
				wp.element.createElement(
					BaseControl,
					{ label: __("Tabs Align", "c9-blocks") },
					wp.element.createElement(AlignmentToolbar, {
						value: buttonsAlign,
						onChange: function onChange(value) {
							return setAttributes({ buttonsAlign: value });
						},
						controls: ["left", "center", "right"]
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						title: __("Block Color Settings", "c9-blocks"),
						initialOpen: true,
						colorSettings: [{
							value: blockBackgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ blockBackgroundColor: value });
							},
							label: __("Background Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						backgroundColor: blockBackgroundColor,
						fallbackBackgroundColor: "white"
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						title: __("Tab Color Settings", "c9-blocks"),
						initialOpen: false,
						colorSettings: [{
							value: tabBackgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ tabBackgroundColor: value });
							},
							label: __("Background Color", "c9-blocks")
						}, {
							value: tabTextColor,
							onChange: function onChange(value) {
								return setAttributes({ tabTextColor: value });
							},
							label: __("Text Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						textColor: tabTextColor,
						backgroundColor: tabBackgroundColor,
						fallbackTextColor: "black",
						fallbackBackgroundColor: "white"
					})
				),
				wp.element.createElement(
					PanelColorSettings,
					{
						title: __("Tab Content Color Settings", "c9-blocks"),
						initialOpen: false,
						colorSettings: [{
							value: tabContentBackgroundColor,
							onChange: function onChange(value) {
								return setAttributes({ tabContentBackgroundColor: value });
							},
							label: __("Background Color", "c9-blocks")
						}]
					},
					wp.element.createElement(ContrastChecker, {
						backgroundColor: tabContentBackgroundColor,
						fallbackBackgroundColor: "white"
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 261 */
/*!********************************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/components/remove-button.js ***!
  \********************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Import CSS
var Component = wp.element.Component;
var _wp$components = wp.components,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG;
var __ = wp.i18n.__;
var _wp$components2 = wp.components,
    Button = _wp$components2.Button,
    Popover = _wp$components2.Popover;

var RemoveButton = function (_Component) {
	_inherits(RemoveButton, _Component);

	function RemoveButton() {
		_classCallCheck(this, RemoveButton);

		var _this = _possibleConstructorReturn(this, (RemoveButton.__proto__ || Object.getPrototypeOf(RemoveButton)).apply(this, arguments));

		_this.state = {
			confirmed: -1
		};
		return _this;
	}

	_createClass(RemoveButton, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    onRemove = _props.onRemove,
			    show = _props.show,
			    style = _props.style,
			    _props$tooltipText = _props.tooltipText,
			    tooltipText = _props$tooltipText === undefined ? __("Remove block?", "c9-blocks") : _props$tooltipText,
			    _props$tooltipRemoveT = _props.tooltipRemoveText,
			    tooltipRemoveText = _props$tooltipRemoveT === undefined ? __("Remove", "c9-blocks") : _props$tooltipRemoveT,
			    _props$tooltipCancelT = _props.tooltipCancelText,
			    tooltipCancelText = _props$tooltipCancelT === undefined ? __("Cancel", "c9-blocks") : _props$tooltipCancelT;
			var confirmed = this.state.confirmed;


			if (!show) {
				return "";
			}

			return wp.element.createElement(
				Button,
				{
					className: "c9-component-remove-button",
					onClick: function onClick() {
						if (-1 === confirmed) {
							_this2.setState({
								confirmed: 0
							});
						}
					},
					style: style
				},
				0 === confirmed ? wp.element.createElement(
					Popover,
					{
						className: "c9-component-remove-button-confirm",
						onClose: function onClose() {
							_this2.setState({
								confirmed: -1
							});
						},
						onClickOutside: function onClickOutside() {
							_this2.setState({
								confirmed: -1
							});
						}
					},
					tooltipText,
					wp.element.createElement(
						Button,
						{
							className: "c9-component-remove-button-confirm-yep",
							onClick: onRemove
						},
						tooltipRemoveText
					),
					wp.element.createElement(
						Button,
						{
							className: "c9-component-remove-button-confirm-nope",
							onClick: function onClick() {
								_this2.setState({
									confirmed: -1
								});
							}
						},
						tooltipCancelText
					)
				) : "",
				wp.element.createElement(
					SVG,
					{
						xmlns: "http://www.w3.org/2000/svg",
						"aria-hidden": "true",
						focusable: "false",
						width: "1em",
						height: "1em",
						style: { transform: "rotate(360deg)", height: "1.2em", width: "auto" },
						preserveAspectRatio: "xMidYMid meet",
						viewBox: "0 0 20 20"
					},
					wp.element.createElement(Path, {
						d: "M12 4h3c.6 0 1 .4 1 1v1H3V5c0-.6.5-1 1-1h3c.2-1.1 1.3-2 2.5-2s2.3.9 2.5 2zM8 4h3c-.2-.6-.9-1-1.5-1S8.2 3.4 8 4zM4 7h11l-.9 10.1c0 .5-.5.9-1 .9H5.9c-.5 0-.9-.4-1-.9L4 7z",
						fill: "#fff"
					})
				)
			);
		}
	}]);

	return RemoveButton;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (RemoveButton);

/***/ }),
/* 262 */
/*!*****************************************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/components/vertical-align-toolbar.js ***!
  \*****************************************************************************/
/*! exports provided: VerticalAlignmentToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export VerticalAlignmentToolbar */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__ = __webpack_require__(/*! ../../../../assets/c9-vertical-alignment-icons */ 28);
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;




var DEFAULT_ALIGN_CONTROLS = [{
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].top,
	title: __("Vertical Align Top", "c9-blocks"),
	align: "start"
}, {
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].center,
	title: __("Vertical Align Middle", "c9-blocks"),
	align: "center"
}, {
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].bottom,
	title: __("Vertical Align Bottom", "c9-blocks"),
	align: "end"
}];

function VerticalAlignmentToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$alignControls = _ref.alignControls,
	    alignControls = _ref$alignControls === undefined ? DEFAULT_ALIGN_CONTROLS : _ref$alignControls;

	function applyOrUnset(align) {
		return function () {
			return onChange(value === align ? undefined : align);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Change Vertical Alignment", "c9-blocks"),
		controls: alignControls.map(function (control) {
			var align = control.align;

			var isActive = value === align;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(align)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (VerticalAlignmentToolbar);

/***/ }),
/* 263 */
/*!************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/save.js ***!
  \************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// External Dependencies.


var applyFilters = wp.hooks.applyFilters;

/**
 * WordPress dependencies
 */

var Component = wp.element.Component;
var _wp$editor = wp.editor,
    RichText = _wp$editor.RichText,
    InnerBlocks = _wp$editor.InnerBlocks;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    tabActive = _props$attributes.tabActive,
			    textAlign = _props$attributes.textAlign,
			    _props$attributes$tab = _props$attributes.tabsData,
			    tabsData = _props$attributes$tab === undefined ? [] : _props$attributes$tab,
			    tabBackgroundColor = _props$attributes.tabBackgroundColor,
			    tabTextColor = _props$attributes.tabTextColor,
			    tabContentBackgroundColor = _props$attributes.tabContentBackgroundColor,
			    blockBackgroundColor = _props$attributes.blockBackgroundColor,
			    verticalAlign = _props$attributes.verticalAlign,
			    instanceId = _props$attributes.instanceId;
			var _props$className = this.props.className,
			    className = _props$className === undefined ? "" : _props$className;


			return [wp.element.createElement(
				"div",
				{
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "row"),
					style: {
						backgroundColor: blockBackgroundColor
					},
					"data-tab-active": tabActive
				},
				wp.element.createElement(
					"div",
					{ className: "col-xs-12 col-sm-3" },
					wp.element.createElement(
						"div",
						{
							className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("nav flex-column nav-pills", textAlign ? "text-" + textAlign : null),
							role: "tablist"
						},
						tabsData.map(function (tabData) {
							var slug = tabData.slug,
							    title = tabData.title;

							var selected = tabActive === slug;
							return wp.element.createElement(RichText.Content, {
								style: {
									backgroundColor: tabBackgroundColor,
									color: tabTextColor
								},
								tagName: "a",
								"data-toggle": "pill",
								role: "tab",
								href: "#tab-" + slug + "-" + instanceId,
								className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("nav-link", selected ? "active" : ""),
								id: "tab-button-" + slug,
								value: title
							});
						})
					)
				),
				wp.element.createElement(
					"div",
					{ className: "col-xs-12 col-sm-9" },
					wp.element.createElement(
						"div",
						{
							className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-tabs-content tab-content", verticalAlign ? "align-self-" + verticalAlign : null),
							style: {
								backgroundColor: tabContentBackgroundColor
							}
						},
						wp.element.createElement(InnerBlocks.Content, null)
					)
				)
			)];
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 264 */
/*!******************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/attributes.js ***!
  \******************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	tabActive: {
		type: "string",
		default: "tab-1"
	},
	tabsData: {
		type: "array",
		default: [{
			slug: "tab-1",
			title: "Tab 1"
		}, {
			slug: "tab-2",
			title: "Tab 2"
		}]
	},
	instanceId: {
		type: "number"
	},
	tabBackgroundColor: {
		type: "string"
	},
	tabTextColor: {
		type: "string"
	},
	tabContentBackgroundColor: {
		type: "string"
	},
	blockBackgroundColor: {
		type: "string"
	},
	verticalAlign: {
		type: "string"
	},
	textAlign: {
		type: "string"
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 265 */
/*!***********************************************!*\
  !*** ./assets/icon-c9-tabs-vertical-tabs.svg ***!
  \***********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-tabs-vertical-tabs_svg__cls-1{fill:#6d6e71}.icon-c9-tabs-vertical-tabs_svg__cls-2{fill:none;stroke:#6d6e71;stroke-miterlimit:10}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-tabs-vertical-tabs_svg__cls-1",
  d: "M44.85 10v28h-29V10h29m1-1h-31v30h31V9z"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-tabs-vertical-tabs_svg__cls-2",
  d: "M17.85 15.96h25M17.85 23.96h25M17.85 31.96h25"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-tabs-vertical-tabs_svg__cls-1",
  d: "M2.36 9.46h9.99v4.99H2.36z"
});

var _ref5 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-tabs-vertical-tabs_svg__cls-1",
  d: "M11.85 10v4h-9v-4h9m1-1h-11v6h11V9zM11.76 18.05v3.81H2.92v-3.81h8.84M12.85 17h-11v6h11v-6zM11.76 26.05v3.81H3v-3.81h8.81M12.85 25h-11v6h11v-6zM11.81 34v3.91H2.9V34h8.91m1-1h-11v6h11v-6z"
});

var SvgIconC9TabsVerticalTabs = function SvgIconC9TabsVerticalTabs(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-tabs-vertical-tabs_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4, _ref5);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9TabsVerticalTabs);

/***/ }),
/* 266 */
/*!**********************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/styles/style.scss ***!
  \**********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 267 */
/*!***********************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/styles/editor.scss ***!
  \***********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 268 */
/*!*******************************************!*\
  !*** ./src/blocks/block-toggles/index.js ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 269);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 274);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 275);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_toggles_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-toggles.svg */ 276);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 277);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 278);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__);
// Import block dependencies and components







// Import CSS



// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;

// Register block

var _wp$blocks = wp.blocks,
    registerBlockType = _wp$blocks.registerBlockType,
    createBlock = _wp$blocks.createBlock;

// Register the block

registerBlockType("c9-blocks/toggles", {
	title: __("C9 Toggles", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_toggles_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {
		// fill in features
	},
	styles: [{ name: "default", label: __("Default", "c9-blocks") }, { name: "toggles-small", label: __("Small", "c9-blocks"), isDefault: true }],
	keywords: [__("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],
	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    getBlock = _select.getBlock,
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			block: getBlock(clientId),
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	}), withDispatch(function (dispatch, ownProps) {
		var _dispatch = dispatch("core/editor"),
		    insertBlock = _dispatch.insertBlock,
		    updateBlockAttributes = _dispatch.updateBlockAttributes;

		var clientId = ownProps.clientId;


		return {
			updateBlockAttributes: updateBlockAttributes,
			addToggle: function addToggle(id) {
				return insertBlock(createBlock("c9-blocks/toggles-toggle", { id: id }), undefined, clientId);
			}
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/***/ }),
/* 269 */
/*!******************************************!*\
  !*** ./src/blocks/block-toggles/edit.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 270);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_reverse_toolbar__ = __webpack_require__(/*! ./components/reverse-toolbar */ 271);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_block_selector__ = __webpack_require__(/*! ../../components/block-selector */ 49);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



/**
 * Internal dependencies
 */




/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment,
    createElement = _wp$element.createElement;
var _wp$editor = wp.editor,
    InnerBlocks = _wp$editor.InnerBlocks,
    BlockControls = _wp$editor.BlockControls;
var applyFilters = wp.hooks.applyFilters;
var IconButton = wp.components.IconButton;
var withInstanceId = wp.compose.withInstanceId;


var ALLOWED_BLOCKS = ["c9-blocks/toggles-toggle"];

var getTogglesTemplate = function getTogglesTemplate(toggleCount, id) {
	var result = [];

	for (var k = 1; k <= toggleCount; k++) {
		result.push(["c9-blocks/toggles-toggle", { toggleNumber: k, id: id }]);
	}

	return result;
};

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.checkToggleCountAndUpdate = _this.checkToggleCountAndUpdate.bind(_this);
		return _this;
	}

	_createClass(Edit, [{
		key: "componentDidMount",
		value: function componentDidMount() {
			this.checkToggleCountAndUpdate();
		}
	}, {
		key: "componentDidUpdate",
		value: function componentDidUpdate() {
			this.checkToggleCountAndUpdate();
		}
	}, {
		key: "componentWillUnmount",
		value: function componentWillUnmount() {
			var $ = window.jQuery;

			$(".c9-toggles-toggle").each(function () {
				// grab collapse id
				var id = $(".c9-toggles-item-content.collapse", this).attr("id");

				// remove each hook from collapse and expand event
				$("#" + id).off("show.bs.collapse", "**");
				$("#" + id).off("hide.bs.collapse", "**");
			});
		}
	}, {
		key: "checkToggleCountAndUpdate",
		value: function checkToggleCountAndUpdate() {
			var _props = this.props,
			    toggleCount = _props.attributes.toggleCount,
			    block = _props.block,
			    setAttributes = _props.setAttributes,
			    updateBlockAttributes = _props.updateBlockAttributes;


			if (block && toggleCount !== block.innerBlocks.length) {
				setAttributes({
					toggleCount: block.innerBlocks.length
				});

				var k = 1;

				// eslint-disable-next-line no-unused-vars
				var _iteratorNormalCompletion = true;
				var _didIteratorError = false;
				var _iteratorError = undefined;

				try {
					for (var _iterator = block.innerBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
						var child = _step.value;

						if (child.attributes.toggleNumber != k) {
							updateBlockAttributes(child.clientId, { toggleNumber: k });

							if (child.attributes.toggleNumber && child.attributes.toggleNumber > k) {
								var _$ = window.jQuery;
								_$("div[data-block=\"" + child.clientId + "\"] .c9-toggles-toggle").removeClass("toggle-collapse-ready");
							}
						}
						k += 1;
					}
				} catch (err) {
					_didIteratorError = true;
					_iteratorError = err;
				} finally {
					try {
						if (!_iteratorNormalCompletion && _iterator.return) {
							_iterator.return();
						}
					} finally {
						if (_didIteratorError) {
							throw _iteratorError;
						}
					}
				}
			}

			var $ = window.jQuery;

			setTimeout(function () {
				$(".c9-toggles-toggle:not(.toggle-collapse-ready)").each(function () {
					var $this = $(this);
					$this.addClass("toggle-collapse-ready");

					// grab collapse id
					var id = $(".c9-toggles-item-content.collapse", this).attr("id");

					// grab rotate arrow id
					var iconId = $(".c9-toggles-item-heading", this).attr("id");

					// insert hook into collapse and expand event
					$("#" + id).on("show.bs.collapse", function () {
						$("#" + iconId + " button.c9-toggles-item-collapse > svg").toggleClass("c9-toggle-item-expand");
					});
					$("#" + id).on("hide.bs.collapse", function () {
						$("#" + iconId + " button.c9-toggles-item-collapse > svg").toggleClass("c9-toggle-item-expand");
					});
				});
			}, 350);
		}
	}, {
		key: "render",
		value: function render() {
			var _props2 = this.props,
			    attributes = _props2.attributes,
			    isSelectedBlockInRoot = _props2.isSelectedBlockInRoot,
			    setAttributes = _props2.setAttributes,
			    addToggle = _props2.addToggle,
			    block = _props2.block,
			    updateBlockAttributes = _props2.updateBlockAttributes,
			    _props2$className = _props2.className,
			    className = _props2$className === undefined ? "" : _props2$className,
			    instanceId = _props2.instanceId;
			var toggleCount = attributes.toggleCount,
			    reverseToggle = attributes.reverseToggle;


			if (instanceId != attributes.instanceId) {
				setAttributes({ instanceId: instanceId });

				if (block) {
					// eslint-disable-next-line no-unused-vars
					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;

					try {
						for (var _iterator2 = block.innerBlocks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var child = _step2.value;

							if (instanceId != child.attributes.id) {
								updateBlockAttributes(child.clientId, { id: instanceId });
							}
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}
				}
			}

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(
					BlockControls,
					{ key: "controls" },
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_reverse_toolbar__["a" /* default */], {
						value: reverseToggle,
						onChange: function onChange(value) {
							setAttributes({ reverseToggle: value });
						}
					})
				),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_inspector__["a" /* default */], this.props),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_3__components_block_selector__["a" /* default */], { text: "Toggles" }),
				wp.element.createElement(
					"div",
					{
						className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "accordion", reverseToggle ? "c9-toggles-reverse" : null),
						id: "accordion-" + instanceId
					},
					createElement("div", {},
					// Workaround logic for this bug https://github.com/WordPress/gutenberg/issues/9897
					"undefined" !== typeof this.props.insertBlocksAfter ? createElement(InnerBlocks, {
						allowedBlocks: ALLOWED_BLOCKS,
						template: getTogglesTemplate(toggleCount, instanceId)
					}) : createElement("div"))
				),
				isSelectedBlockInRoot ? wp.element.createElement(
					"div",
					{ className: "c9-toggles-add-item" },
					wp.element.createElement(
						IconButton,
						{
							icon: "insert",
							onClick: function onClick() {
								addToggle(instanceId);
							}
						},
						__("Add Toggle", "c9-blocks")
					)
				) : ""
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (withInstanceId(Edit));

/***/ }),
/* 270 */
/*!**********************************************************!*\
  !*** ./src/blocks/block-toggles/components/inspector.js ***!
  \**********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Component = wp.element.Component;
var InspectorControls = wp.editor.InspectorControls;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		return _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			return wp.element.createElement(InspectorControls, null);
		}
	}]);

	return Inspector;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 271 */
/*!****************************************************************!*\
  !*** ./src/blocks/block-toggles/components/reverse-toolbar.js ***!
  \****************************************************************/
/*! exports provided: ReverseToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ReverseToolbar */
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;


var DEFAULT_ENABLE_CONTROLS = [{
	icon: "controls-repeat",
	title: __("Reverse Toggle", "c9-blocks"),
	enabled: true
}];

function ReverseToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$enableControls = _ref.enableControls,
	    enableControls = _ref$enableControls === undefined ? DEFAULT_ENABLE_CONTROLS : _ref$enableControls;

	function applyOrUnset(enabled) {
		return function () {
			return onChange(value === enabled ? false : enabled);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Flip Toggle Layout", "c9-blocks"),
		controls: enableControls.map(function (control) {
			var enabled = control.enabled;

			var isActive = value === enabled;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(enabled)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (ReverseToolbar);

/***/ }),
/* 272 */
/*!***************************************************!*\
  !*** ./src/components/block-selector/editor.scss ***!
  \***************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports, __webpack_require__) {

var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js??ref--3-1!../../../node_modules/sass-loader/dist/cjs.js!./editor.scss */ 273);

if (typeof content === 'string') {
  content = [[module.i, content, '']];
}

var options = {}

options.insert = "head";
options.singleton = false;

var update = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ 16)(content, options);

if (content.locals) {
  module.exports = content.locals;
}


/***/ }),
/* 273 */
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??ref--3-1!./node_modules/sass-loader/dist/cjs.js!./src/components/block-selector/editor.scss ***!
  \******************************************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ 14)(false);
// Module
exports.push([module.i, ".block-selector{visibility:hidden;border:2px dashed #aaa;font-size:12px;text-align:center;cursor:pointer;text-transform:uppercase;font-weight:bold;color:#999;opacity:0;transition:opacity 1s}.is-hovered .block-selector,.is-selected .block-selector{visibility:visible;opacity:1}\n", ""]);


/***/ }),
/* 274 */
/*!******************************************!*\
  !*** ./src/blocks/block-toggles/save.js ***!
  \******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }


/**
 * Internal dependencies
 */

/**
 * WordPress dependencies
 */
var Component = wp.element.Component;
var applyFilters = wp.hooks.applyFilters;
var InnerBlocks = wp.editor.InnerBlocks;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "render",
		value: function render() {
			var _props = this.props,
			    reverseToggle = _props.attributes.reverseToggle,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className;

			return wp.element.createElement(
				"div",
				{
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "accordion", reverseToggle ? "c9-toggles-reverse" : null),
					id: "accordion-" + this.props.attributes.instanceId
				},
				wp.element.createElement(InnerBlocks.Content, null)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 275 */
/*!************************************************!*\
  !*** ./src/blocks/block-toggles/attributes.js ***!
  \************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	toggleCount: {
		type: "number",
		default: 2
	},
	instanceId: {
		type: "number"
	},
	reverseToggle: {
		type: "boolean",
		default: false
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 276 */
/*!************************************!*\
  !*** ./assets/icon-c9-toggles.svg ***!
  \************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-toggles_svg__cls-1{fill:none;stroke:#6d6e71;stroke-miterlimit:10}.icon-c9-toggles_svg__cls-2{fill:#6d6e71}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-toggles_svg__cls-1",
  d: "M2.03 28.57h44M2.03 34.07h44"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-toggles_svg__cls-2",
  d: "M2.03 6.07h44v7h-44zM46 23.07h-.75v-1H46zm-1.5 0h-.75v-1h.75zm-1.5 0h-.75v-1H43zm-1.5 0h-.74v-1h.74zm-1.49 0h-.75v-1H40zm-1.5 0h-.75v-1h.75zm-1.5 0h-.75v-1H37zm-1.5 0h-.75v-1h.75zm-1.5 0h-.75v-1H34zm-1.5 0h-.75v-1h.75zm-1.49 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.74v-1h.74zm-1.49 0h-.75v-1h.75zm-1.5 0h-.75v-1h.75zm-1.5 0h-.75v-1h.75zm-1.5 0h-.75v-1h.75zm-1.5 0h-.75v-1h.75zm-1.5 0h-.75v-1h.75zm-1.49 0h-.75v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0h-.72v-1h.75zm-1.5 0H2v-1h.54z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-toggles_svg__cls-2",
  d: "M45.06 23.07l-.04-13.45L3 10.05v13.02h-.97V9.03l43.96-.46.04 14.5h-.97z"
});

var SvgIconC9Toggles = function SvgIconC9Toggles(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-toggles_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9Toggles);

/***/ }),
/* 277 */
/*!****************************************************!*\
  !*** ./src/blocks/block-toggles/styles/style.scss ***!
  \****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 278 */
/*!*****************************************************!*\
  !*** ./src/blocks/block-toggles/styles/editor.scss ***!
  \*****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 279 */
/*!**********************************************!*\
  !*** ./src/blocks/block-posts-grid/index.js ***!
  \**********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 280);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 283);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 284);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_post_grid_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-post-grid.svg */ 51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 285);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 286);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__);
// Import block dependencies and components







// Import CSS



// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var withSelect = wp.data.withSelect;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/posts-grid", {
	title: __("C9 Posts Grid", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_3__assets_icon_c9_post_grid_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {
		// fill in features
	},
	keywords: [__("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],
	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/***/ }),
/* 280 */
/*!*********************************************!*\
  !*** ./src/blocks/block-posts-grid/edit.js ***!
  \*********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 281);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_container__ = __webpack_require__(/*! ./components/container */ 50);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal dependencies
 */



/**
 * WordPress dependencies
 */
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$editor = wp.editor,
    InnerBlocks = _wp$editor.InnerBlocks,
    BlockControls = _wp$editor.BlockControls;
var withInstanceId = wp.compose.withInstanceId;


var ALLOWED_BLOCKS = ["c9-blocks/post-grid"];

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		return _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));
	}

	_createClass(Edit, [{
		key: "render",
		value: function render() {
			var _props = this.props,
			    instanceId = _props.instanceId,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes;


			if (instanceId != attributes.instanceId) {
				setAttributes({ instanceId: instanceId });
			}

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(BlockControls, { key: "controls" }),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__components_inspector__["a" /* default */], this.props),
				wp.element.createElement(
					__WEBPACK_IMPORTED_MODULE_1__components_container__["a" /* default */],
					this.props,
					wp.element.createElement(InnerBlocks, {
						template: [["c9-blocks/post-grid"]],
						templateLock: "all",
						allowedBlocks: ALLOWED_BLOCKS
					})
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (withInstanceId(Edit));

/***/ }),
/* 281 */
/*!*************************************************************!*\
  !*** ./src/blocks/block-posts-grid/components/inspector.js ***!
  \*************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-cond-assign */
/**
 * Internal block libraries
 */
// import CustomRadio from './custom-radio';


var __ = wp.i18n.__;
var Component = wp.element.Component;
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    MediaUpload = _wp$editor.MediaUpload,
    ColorPalette = _wp$editor.ColorPalette;
var _wp$components = wp.components,
    RadioControl = _wp$components.RadioControl,
    PanelBody = _wp$components.PanelBody,
    RangeControl = _wp$components.RangeControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl,
    SelectControl = _wp$components.SelectControl,
    IconButton = _wp$components.IconButton,
    Button = _wp$components.Button,
    FocalPointPicker = _wp$components.FocalPointPicker,
    BaseControl = _wp$components.BaseControl;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));

		_initialiseProps.call(_this);

		var _this$props = _this.props,
		    _this$props$attribute = _this$props.attributes,
		    containerPadding = _this$props$attribute.containerPadding,
		    containerMargin = _this$props$attribute.containerMargin,
		    containerVideoID = _this$props$attribute.containerVideoID,
		    preview = _this$props$attribute.preview,
		    bgCustomX = _this$props$attribute.bgCustomX,
		    bgCustomY = _this$props$attribute.bgCustomY,
		    setAttributes = _this$props.setAttributes;


		_this.setAttributes = setAttributes;
		_this.preview = preview;

		_this.linkedPaddingRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.togglePaddingLinkage = _this.togglePaddingLinkage.bind(_this);
		_this.linkedMarginRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.toggleMarginLinkage = _this.toggleMarginLinkage.bind(_this);

		_this.state = {
			containerPadding: containerPadding,
			containerMargin: containerMargin,
			setAttributes: setAttributes,
			ID: containerVideoID || "",
			customX: "auto" != bgCustomX.size,
			customY: "auto" != bgCustomY.size,
			bgCustomX: bgCustomX,
			bgCustomY: bgCustomY
		};
		return _this;
	}

	_createClass(Inspector, [{
		key: "componentDidUpdate",
		value: function componentDidUpdate() {
			var preview = this.props.attributes.preview;


			this.preview = preview;
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    _props$attributes = _props.attributes,
			    containerImgURL = _props$attributes.containerImgURL,
			    containerImgID = _props$attributes.containerImgID,
			    bgImgSize = _props$attributes.bgImgSize,
			    bgImgAttach = _props$attributes.bgImgAttach,
			    bgImgRepeat = _props$attributes.bgImgRepeat,
			    overlayHue = _props$attributes.overlayHue,
			    overlayOpacity = _props$attributes.overlayOpacity,
			    blendMode = _props$attributes.blendMode,
			    containerPadding = _props$attributes.containerPadding,
			    containerMargin = _props$attributes.containerMargin,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    focalPoint = _props$attributes.focalPoint,
			    videoType = _props$attributes.videoType,
			    containerVideoURL = _props$attributes.containerVideoURL,
			    cannotEmbed = _props$attributes.cannotEmbed,
			    containerHue = _props$attributes.containerHue,
			    containerOpacity = _props$attributes.containerOpacity,
			    instanceId = _props$attributes.instanceId,
			    setAttributes = _props.setAttributes;


			var cssUnits = [{ value: "px", label: __("Pixel (px)", "c9-blocks") }, { value: "%", label: __("Percent (%)", "c9-blocks") }, { value: "em", label: __("Em (em)", "c9-blocks") }];

			var paddingOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Padding 0", "c9-blocks") }, { value: "1", label: __("Padding 1", "c9-blocks") }, { value: "2", label: __("Padding 2", "c9-blocks") }, { value: "3", label: __("Padding 3", "c9-blocks") }, { value: "4", label: __("Padding 4", "c9-blocks") }, { value: "5", label: __("Padding 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var marginOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Margin 0", "c9-blocks") }, { value: "1", label: __("Margin 1", "c9-blocks") }, { value: "2", label: __("Margin 2", "c9-blocks") }, { value: "3", label: __("Margin 3", "c9-blocks") }, { value: "4", label: __("Margin 4", "c9-blocks") }, { value: "5", label: __("Margin 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var sizeTypes = [{ value: "cover", label: __("Cover", "c9-blocks") }, { value: "contain", label: __("Contain", "c9-blocks") }, { value: "", label: __("Custom", "c9-blocks") }];

			var repeatTypes = [{ value: "no-repeat", label: __("no-repeat", "c9-blocks") }, { value: "repeat", label: __("repeat", "c9-blocks") }, { value: "round", label: __("round", "c9-blocks") }, { value: "space", label: __("space", "c9-blocks") }];

			var onSelectImage = function onSelectImage(img) {
				setAttributes({
					containerImgURL: img.url
				});
			};

			var onRemoveImage = function onRemoveImage() {
				setAttributes({
					containerImgURL: null,
					bgImgSize: "cover"
				});
			};

			var onSelectVideo = function onSelectVideo(video) {
				var replace = containerVideoURL && !!containerVideoURL.length;

				setAttributes({
					containerVideoURL: video.url,
					cannotEmbed: false
				});

				if (replace) {
					var vidElement = document.getElementById("containerVideo-" + instanceId);
					vidElement.load();
					vidElement.play();
				}
			};

			var onRemoveVideo = function onRemoveVideo() {
				setAttributes({
					containerVideoURL: null
				});
			};

			return wp.element.createElement(
				InspectorControls,
				null,
				wp.element.createElement(
					BaseControl,
					{ className: "c9-container-base-control" },
					wp.element.createElement(RangeControl, {
						className: "c9-height-range-control",
						beforeIcon: "arrow-left-alt2",
						afterIcon: "arrow-right-alt2",
						label: __("Window Height (vh)", "c9-blocks"),
						value: minScreenHeight,
						onChange: function onChange(minScreenHeight) {
							return setAttributes({ minScreenHeight: minScreenHeight });
						},
						min: 10,
						max: 100
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Spacing", "c9-blocks"), initialOpen: false },
					wp.element.createElement(
						"h5",
						{ className: "padding-label" },
						__("Padding", "c9-blocks")
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of padding for each side.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "padding-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.top,
							onChange: function onChange(value) {
								return _this2.updatePadding("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-sides-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.left,
							onChange: function onChange(value) {
								return _this2.updatePadding("left", value);
							}
						}),
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.containerPadding.icon,
							onClick: this.togglePaddingLinkage,
							ref: this.state.linkedPaddingRef
						}),
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.right,
							onChange: function onChange(value) {
								return _this2.updatePadding("right", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.bottom,
							onChange: function onChange(value) {
								return _this2.updatePadding("bottom", value);
							}
						})
					),
					wp.element.createElement("hr", null),
					wp.element.createElement(
						"h5",
						{ className: "margin-label" },
						"Margins"
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of margin for top and bottom sides.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "margin-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: containerMargin.top,
							onChange: function onChange(value) {
								return _this2.updateMargin("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-sides-wrapper" },
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.containerMargin.icon,
							onClick: this.toggleMarginLinkage,
							ref: this.state.linkedMarginRef
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: containerMargin.bottom,
							onChange: function onChange(value) {
								return _this2.updateMargin("bottom", value);
							}
						})
					)
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Background", "c9-blocks"), initialOpen: false },
					wp.element.createElement(MediaUpload, {
						id: "bg-image-select",
						label: __("Background Image", "c9-blocks"),
						onSelect: onSelectImage,
						type: "image",
						value: containerImgID,
						render: function render(_ref) {
							var open = _ref.open;
							return wp.element.createElement(
								"div",
								null,
								wp.element.createElement(
									IconButton,
									{
										label: __("Edit image", "c9-blocks"),
										icon: "format-image",
										onClick: open
									},
									__("Background Image", "c9-blocks")
								),
								containerImgURL && !!containerImgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										IconButton,
										{
											label: __("Remove Image", "c9-blocks"),
											icon: "dismiss",
											onClick: onRemoveImage
										},
										__("Remove", "c9-blocks")
									),
									wp.element.createElement(
										"h5",
										null,
										"Position"
									),
									wp.element.createElement(FocalPointPicker, {
										label: __("Focal Point Picker", "c9-blocks"),
										url: containerImgURL,
										value: focalPoint,
										onChange: function onChange(value) {
											return setAttributes({ focalPoint: value });
										}
									})
								),
								wp.element.createElement(
									"span",
									null,
									__("Background Color", "c9-blocks")
								),
								wp.element.createElement(ColorPalette, {
									label: __("Overlay Color", "c9-blocks"),
									value: containerHue,
									onChange: function onChange(containerHue) {
										return setAttributes({ containerHue: containerHue });
									}
								}),
								containerHue && !!containerHue.length && wp.element.createElement(RangeControl, {
									beforeIcon: "arrow-left-alt2",
									afterIcon: "arrow-right-alt2",
									label: __("Opacity", "c9-blocks"),
									value: containerOpacity,
									onChange: function onChange(containerOpacity) {
										return setAttributes({ containerOpacity: containerOpacity });
									},
									min: 1,
									max: 10
								}),
								wp.element.createElement(
									"span",
									null,
									__("Color Overlay", "c9-blocks")
								),
								wp.element.createElement(ColorPalette, {
									label: __("Overlay Color", "c9-blocks"),
									value: overlayHue,
									onChange: function onChange(overlayHue) {
										return setAttributes({ overlayHue: overlayHue });
									}
								}),
								overlayHue && !!overlayHue.length && wp.element.createElement(RangeControl, {
									beforeIcon: "arrow-left-alt2",
									afterIcon: "arrow-right-alt2",
									label: __("Opacity", "c9-blocks"),
									value: overlayOpacity,
									onChange: function onChange(overlayOpacity) {
										return setAttributes({ overlayOpacity: overlayOpacity });
									},
									min: 1,
									max: 10
								}),
								overlayHue && wp.element.createElement(SelectControl, {
									label: __("Blend Mode", "c9-blocks"),
									value: blendMode,
									options: [{ value: "overlay", label: __("Overlay", "c9-blocks") }, { value: "normal", label: __("Normal", "c9-blocks") }, {
										value: "multiply",
										label: __("Multiply", "c9-blocks")
									}, { value: "screen", label: __("Screen", "c9-blocks") }, { value: "darken", label: __("Darken", "c9-blocks") }, { value: "lighten", label: __("Lighten", "c9-blocks") }, {
										value: "color-dodge",
										label: __("Color Dodge", "c9-blocks")
									}, {
										value: "color-burn",
										label: __("Color Burn", "c9-blocks")
									}, {
										value: "hard-light",
										label: __("Hard Light", "c9-blocks")
									}, {
										value: "soft-light",
										label: __("Soft Light", "c9-blocks")
									}, {
										value: "difference",
										label: __("Difference", "c9-blocks")
									}, {
										value: "exclusion",
										label: __("Exclusion", "c9-blocks")
									}, { value: "hue", label: __("Hue", "c9-blocks") }, {
										value: "saturation",
										label: __("Saturation", "c9-blocks")
									}, { value: "color", label: __("Color", "c9-blocks") }, {
										value: "luminosity",
										label: __("Luminosity", "c9-blocks")
									}],
									onChange: function onChange(blendMode) {
										return setAttributes({ blendMode: blendMode });
									}
								}),
								wp.element.createElement("hr", null),
								containerImgURL && !!containerImgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										"h5",
										null,
										__("Attachment", "c9-blocks")
									),
									wp.element.createElement(ToggleControl, {
										label: __("Scroll | Fixed", "c9-blocks"),
										checked: bgImgAttach,
										onChange: function onChange(bgImgAttach) {
											return setAttributes({ bgImgAttach: bgImgAttach });
										}
									}),
									wp.element.createElement("hr", null),
									wp.element.createElement(
										"div",
										null,
										wp.element.createElement(
											"h5",
											null,
											__("Size", "c9-blocks")
										),
										wp.element.createElement(SelectControl, {
											help: __("Choose between cover, contain, or custom.", "c9-blocks"),
											options: sizeTypes,
											value: bgImgSize,
											onChange: function onChange(value) {
												return setAttributes({ bgImgSize: value });
											}
										}),
										!bgImgSize && wp.element.createElement(
											"div",
											null,
											wp.element.createElement(
												"h5",
												null,
												__("Horizontal", "c9-blocks")
											),
											wp.element.createElement(ToggleControl, {
												label: __("Auto | Manual", "c9-blocks"),
												checked: _this2.state.customX,
												onChange: function onChange(value) {
													_this2.setState({ customX: value });

													if (value) {
														_this2.updateBgX("unit", "%");
														_this2.updateBgX("size", 100);
													} else {
														_this2.updateBgX("size", "auto");
													}
												}
											}),
											_this2.state.customX && wp.element.createElement(
												"div",
												{ style: { display: "flex" } },
												wp.element.createElement(RangeControl, {
													value: _this2.state.bgCustomX.size,
													onChange: function onChange(value) {
														return _this2.updateBgX("size", value);
													},
													className: "bgSize",
													min: 0,
													max: Number.MAX_SAFE_INTEGER
												}),
												wp.element.createElement(SelectControl, {
													options: cssUnits,
													value: _this2.state.bgCustomX.unit,
													onChange: function onChange(value) {
														return _this2.updateBgX("unit", value);
													},
													className: "bgSize"
												})
											),
											wp.element.createElement(
												"h5",
												null,
												__("Vertical", "c9-blocks")
											),
											wp.element.createElement(ToggleControl, {
												label: __("Auto | Manual", "c9-blocks"),
												checked: _this2.state.customY,
												onChange: function onChange(value) {
													_this2.setState({ customY: value });

													if (value) {
														_this2.updateBgY("unit", "%");
														_this2.updateBgY("size", 100);
													} else {
														_this2.updateBgY("size", "auto");
													}
												}
											}),
											_this2.state.customY && wp.element.createElement(
												"div",
												{ style: { display: "flex" } },
												wp.element.createElement(RangeControl, {
													value: _this2.state.bgCustomY.size,
													onChange: function onChange(value) {
														return _this2.updateBgY("size", value);
													},
													className: "bgSize",
													min: 0,
													max: Number.MAX_SAFE_INTEGER
												}),
												wp.element.createElement(SelectControl, {
													options: cssUnits,
													value: _this2.state.bgCustomY.unit,
													onChange: function onChange(value) {
														return _this2.updateBgY("unit", value);
													},
													className: "bgSize"
												})
											)
										),
										wp.element.createElement("hr", null),
										wp.element.createElement(
											"h5",
											null,
											__("Repeat", "c9-blocks")
										),
										wp.element.createElement(SelectControl, {
											help: __("Choose between no-repeat, repeat, round or space.", "c9-blocks"),
											options: repeatTypes,
											value: bgImgRepeat,
											onChange: function onChange(value) {
												return setAttributes({ bgImgRepeat: value });
											}
										})
									)
								)
							);
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Video", "c9-blocks"), initialOpen: false },
					wp.element.createElement(RadioControl, {
						label: __("Media Type", "c9-blocks"),
						selected: videoType,
						options: [{ label: "Upload File", value: "upload" }, { label: "Embed URL", value: "embed" }],
						onChange: function onChange(videoType) {
							setAttributes({
								videoType: videoType,
								containerVideoURL: "",
								containerVideoID: ""
							});
							_this2.setState({ ID: "" });

							var preview = _this2.props.attributes.preview;

							if (preview && preview.i) {
								preview.destroy();
							}
						}
					}),
					wp.element.createElement("hr", null),
					"upload" == videoType && wp.element.createElement(MediaUpload, {
						id: "bg-video-select",
						label: __("Background Video", "c9-blocks"),
						onSelect: onSelectVideo,
						type: "video",
						value: containerImgID,
						allowedTypes: ["video"],
						render: function render(_ref2) {
							var open = _ref2.open;
							return wp.element.createElement(
								"div",
								null,
								wp.element.createElement(
									IconButton,
									{
										label: __("Edit Video", "c9-blocks"),
										icon: "format-image",
										onClick: open
									},
									__("Background Video", "c9-blocks")
								)
							);
						}
					}),
					"upload" == videoType && containerVideoURL && !!containerVideoURL.length && wp.element.createElement(
						"div",
						null,
						wp.element.createElement(
							IconButton,
							{
								label: __("Remove Video", "c9-blocks"),
								icon: "dismiss",
								onClick: onRemoveVideo
							},
							__("Remove", "c9-blocks")
						)
					),
					"embed" == videoType && wp.element.createElement(
						"div",
						null,
						wp.element.createElement(TextControl, {
							label: "YouTube URL or Youtube ID",
							value: this.state.ID,
							onChange: function onChange(value) {
								return _this2.updateID(value);
							}
						}),
						cannotEmbed && wp.element.createElement(
							"p",
							{ className: "text-danger" },
							__("Given YouTube ID/URL is not correctly formatted!", "c9-blocks")
						),
						wp.element.createElement(
							"div",
							null,
							wp.element.createElement(
								Button,
								{
									isDefault: true,
									onClick: function onClick() {
										return _this2.submitID();
									},
									style: { marginRight: "10px" }
								},
								__("Set", "c9-blocks")
							),
							wp.element.createElement(
								Button,
								{ isDefault: true, onClick: function onClick() {
										return _this2.resetID();
									} },
								__("Reset", "c9-blocks")
							)
						)
					)
				)
			);
		}
	}]);

	return Inspector;
}(Component);

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.updateBgX = function (position, value) {
		var sizeObject = Object.assign({}, _this3.state.bgCustomX);

		sizeObject[position] = value;
		_this3.setState({ bgCustomX: sizeObject });
		_this3.setAttributes({ bgCustomX: sizeObject });
	};

	this.updateBgY = function (position, value) {
		var sizeObject = Object.assign({}, _this3.state.bgCustomY);

		sizeObject[position] = value;
		_this3.setState({ bgCustomY: sizeObject });
		_this3.setAttributes({ bgCustomY: sizeObject });
	};

	this.togglePaddingLinkage = function () {
		var containerPadding = _this3.props.attributes.containerPadding;


		containerPadding = Object.assign({}, containerPadding);
		containerPadding.linked = !containerPadding.linked;
		containerPadding.icon = containerPadding.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ containerPadding: containerPadding });
		_this3.setAttributes({ containerPadding: containerPadding });
	};

	this.setPaddingUnit = function (value) {
		var containerPadding = _this3.props.attributes.containerPadding;


		var spacingObject = Object.assign({}, containerPadding);
		spacingObject.unit = value;
		_this3.setState({ containerPadding: spacingObject });
		_this3.setAttributes({ containerPadding: spacingObject });
	};

	this.updatePadding = function (position, value) {
		if (_this3.state.containerPadding.linked) {
			var spacingObject = {
				linked: _this3.state.containerPadding.linked,
				unit: _this3.state.containerPadding.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.containerPadding.icon
			};
			_this3.setState({ containerPadding: spacingObject });
			_this3.setAttributes({ containerPadding: spacingObject });
		} else {
			var _spacingObject = Object.assign({}, _this3.state.containerPadding);
			_spacingObject[position] = value;
			_this3.setState({ containerPadding: _spacingObject });
			_this3.setAttributes({ containerPadding: _spacingObject });
		}
	};

	this.toggleMarginLinkage = function () {
		var containerMargin = _this3.props.attributes.containerMargin;


		containerMargin = Object.assign({}, containerMargin);
		containerMargin.linked = !containerMargin.linked;
		containerMargin.icon = containerMargin.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ containerMargin: containerMargin });
		_this3.setAttributes({ containerMargin: containerMargin });
	};

	this.setMarginUnit = function (value) {
		var containerMargin = _this3.props.attributes.containerMargin;


		var spacingObject = Object.assign({}, containerMargin);
		spacingObject.unit = value;
		_this3.setState({ containerMargin: spacingObject });
		_this3.setAttributes({ containerMargin: spacingObject });
	};

	this.updateMargin = function (position, value) {
		if (_this3.state.containerMargin.linked) {
			var spacingObject = {
				linked: _this3.state.containerMargin.linked,
				unit: _this3.state.containerMargin.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.containerMargin.icon
			};
			_this3.setState({ containerMargin: spacingObject });
			_this3.setAttributes({ containerMargin: spacingObject });
		} else {
			var _spacingObject2 = Object.assign({}, _this3.state.containerMargin);
			_spacingObject2[position] = value;
			_this3.setState({ containerMargin: _spacingObject2 });
			_this3.setAttributes({ containerMargin: _spacingObject2 });
		}
	};

	this.updateID = function (value) {
		_this3.setState({ ID: value });
	};

	this.submitID = function () {
		// parse submitted item, check if valid id
		var checkURL = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;
		var checkAlphaNumeric = /^[a-zA-Z0-9-_]+$/;
		var result = void 0;

		if (result = _this3.state.ID.match(checkURL)) {
			_this3.setAttributes({ containerVideoID: result[1], cannotEmbed: false });
			_this3.setState({ ID: result[1] });
		} else if (result = _this3.state.ID.match(checkAlphaNumeric)) {
			_this3.setAttributes({ containerVideoID: result[0], cannotEmbed: false });
			_this3.setState({ ID: result[0] });
		} else {
			if (_this3.preview && _this3.preview.i) {
				_this3.preview.destroy();
			}
			_this3.setAttributes({ cannotEmbed: true });
		}

		// check if player exists
		if (_this3.preview && _this3.preview.i) {
			_this3.preview.loadVideoById(_this3.state.ID);
		}
	};

	this.resetID = function () {
		_this3.setState({ ID: "" });
		if (_this3.preview && _this3.preview.i) {
			_this3.preview.destroy();
			_this3.setAttributes({
				containerVideoID: "",
				cannotEmbed: false,
				preview: _this3.preview
			});
		}
	};
};

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 282 */
/*!*************************************************************!*\
  !*** ./src/blocks/block-posts-grid/components/video-box.js ***!
  \*************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/media-has-caption */
/**
 * Internal block libraries
 */
// import CustomRadio from './custom-radio';


var Component = wp.element.Component;

/**
 * Create an VideoBox Controls wrapper Component
 */

var VideoBox = function (_Component) {
	_inherits(VideoBox, _Component);

	function VideoBox() {
		_classCallCheck(this, VideoBox);

		var _this = _possibleConstructorReturn(this, (VideoBox.__proto__ || Object.getPrototypeOf(VideoBox)).apply(this, arguments));

		_this.videoRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.videoContainerRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();

		var _this$props = _this.props,
		    _this$props$attribute = _this$props.attributes,
		    containerVideoURL = _this$props$attribute.containerVideoURL,
		    preview = _this$props$attribute.preview,
		    containerVideoID = _this$props$attribute.containerVideoID,
		    setAttributes = _this$props.setAttributes;


		_this.containerVideoURL = containerVideoURL;
		_this.containerVideoID = containerVideoID;
		_this.setAttributes = setAttributes;
		_this.preview = preview;

		_this.canPlay = _this.canPlay.bind(_this);
		_this.setYoutube = _this.setYoutube.bind(_this);
		_this.onPlayerReady = _this.onPlayerReady.bind(_this);
		return _this;
	}

	_createClass(VideoBox, [{
		key: "setYoutube",
		value: function setYoutube() {
			var _this2 = this;

			var instanceId = this.props.instanceId;


			if (!this.containerVideoID) {
				return;
			}

			var videoID = this.containerVideoID;

			var loadYT = window.YT;

			if (!loadYT) {
				loadYT = new Promise(function (resolve) {
					var tag = document.createElement("script");
					tag.src = "https://www.youtube.com/player_api";
					var firstScriptTag = document.getElementsByTagName("script")[0];
					firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
					window.onYouTubeIframeAPIReady = function () {
						return resolve(window.YT);
					};
				});
				loadYT.then(function (YT) {
					var player = new YT.Player("player-" + videoID + "-" + instanceId, {
						playerVars: {
							autoplay: 1,
							controls: 0,
							disablekb: 0,
							autohide: 1,
							wmode: "opaque",
							hd: 1,
							enablejsapi: 1,
							loop: 1,
							showinfo: 0,
							// eslint-disable-next-line camelcase
							iv_load_policy: 3,
							rel: 0,
							modestbranding: 1,
							playlist: videoID
						},
						videoId: videoID,
						events: {
							onReady: _this2.onPlayerReady
						}
					});
					_this2.setAttributes({ preview: player });
					_this2.preview = player;
				});
			} else {
				var player = new loadYT.Player("player-" + videoID + "-" + instanceId, {
					playerVars: {
						autoplay: 1,
						controls: 0,
						disablekb: 0,
						autohide: 1,
						wmode: "opaque",
						hd: 1,
						enablejsapi: 1,
						loop: 1,
						showinfo: 0,
						// eslint-disable-next-line camelcase
						iv_load_policy: 3,
						rel: 0,
						modestbranding: 1,
						playlist: videoID
					},
					videoId: videoID,
					events: {
						onReady: this.onPlayerReady
					}
				});

				this.setAttributes({ preview: player });
				this.preview = player;
			}
		}

		// API will call this function when the video player is ready.

	}, {
		key: "onPlayerReady",
		value: function onPlayerReady(event) {
			event.target.mute();

			if (this.videoContainerRef.current) {
				this.videoContainerRef.current.style.opacity = 1;
			}
		}
	}, {
		key: "canPlay",
		value: function canPlay() {
			if (this.videoContainerRef.current) {
				this.videoContainerRef.current.style.opacity = 1;
			}
		}
	}, {
		key: "componentDidMount",
		value: function componentDidMount() {
			this.setYoutube();
		}
	}, {
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    videoType = _props$attributes.videoType,
			    containerVideoURL = _props$attributes.containerVideoURL,
			    containerVideoID = _props$attributes.containerVideoID,
			    instanceId = _props$attributes.instanceId;


			var c9VideoStyles = function c9VideoStyles(videoType, containerVideoURL, minScreenHeight) {
				var styles = {};
				styles.minHeight = minScreenHeight + "vh";

				return styles;
			};

			if (containerVideoURL && "upload" == videoType) {
				return wp.element.createElement(
					"div",
					{ className: "c9-video-container", ref: this.videoContainerRef },
					wp.element.createElement(
						"div",
						{ className: "c9-embed-container" },
						wp.element.createElement(
							"video",
							{
								id: "containerVideo-" + instanceId,
								className: "c9-video-custom",
								playsinline: "playsinline",
								autoPlay: "autoplay",
								muted: "muted",
								loop: "loop",
								onCanPlayThrough: this.canPlay,
								ref: this.videoRef,
								style: c9VideoStyles(videoType, containerVideoURL, minScreenHeight)
							},
							wp.element.createElement("source", {
								src: "" + containerVideoURL,
								type: "video/mp4"
							})
						)
					)
				);
			} else {
				// return <WpEmbedPreview html={previewHTML} />;
				return wp.element.createElement(
					"div",
					{ className: "c9-video-container", ref: this.videoContainerRef },
					wp.element.createElement(
						"div",
						{ className: "c9-embed-container" },
						wp.element.createElement("div", {
							id: "player-" + containerVideoID + "-" + instanceId,
							className: "c9-video",
							"video-id": containerVideoID,
							style: c9VideoStyles(videoType, containerVideoURL, minScreenHeight)
						})
					)
				);
			}
		}
	}]);

	return VideoBox;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (VideoBox);

/***/ }),
/* 283 */
/*!*********************************************!*\
  !*** ./src/blocks/block-posts-grid/save.js ***!
  \*********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_container__ = __webpack_require__(/*! ./components/container */ 50);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal dependencies
 */


/**
 * WordPress dependencies
 */
var Component = wp.element.Component;
var InnerBlocks = wp.editor.InnerBlocks;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "render",
		value: function render() {

			return wp.element.createElement(
				__WEBPACK_IMPORTED_MODULE_0__components_container__["a" /* default */],
				this.props,
				wp.element.createElement(InnerBlocks.Content, null)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 284 */
/*!***************************************************!*\
  !*** ./src/blocks/block-posts-grid/attributes.js ***!
  \***************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	instanceId: {
		type: "number"
	},
	align: {
		type: "string",
		default: "full"
	},
	containerImgURL: {
		type: "string"
	},
	containerHue: {
		type: "string",
		default: undefined
	},
	containerOpacity: {
		type: "number",
		default: 10
	},
	bgImgSize: {
		type: "string",
		default: "cover"
	},
	bgCustomX: {
		type: "object",
		default: {
			size: "auto",
			unit: "px"
		}
	},
	bgCustomY: {
		type: "object",
		default: {
			size: "auto",
			unit: "px"
		}
	},
	bgImgRepeat: {
		type: "string",
		default: "no-repeat"
	},
	// true evaluates to backgroundAttachment fixed, false to scroll
	bgImgAttach: {
		type: "boolean",
		default: false
	},
	overlayHue: {
		type: "string",
		default: undefined
	},
	overlayOpacity: {
		type: "number",
		default: 5
	},
	blendMode: {
		type: "string",
		default: "overlay"
	},
	linkedValToggle: {
		type: "boolean",
		default: true
	},
	minScreenHeight: {
		type: "number",
		default: 20
	},
	containerMargin: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			unit: "px",
			top: "-1",
			bottom: "-1"
		}
	},
	containerPadding: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			top: "5",
			bottom: "5",
			left: "5",
			right: "5"
		}
	},
	focalPoint: {
		type: "object",
		default: {
			x: 0.5,
			y: 0.5
		}
	},
	videoType: {
		type: "string",
		default: "upload"
	},
	containerVideoURL: {
		type: "string",
		default: ""
	},
	containerVideoID: {
		type: "string",
		default: ""
	},
	cannotEmbed: {
		type: "boolean",
		default: false
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 285 */
/*!*******************************************************!*\
  !*** ./src/blocks/block-posts-grid/styles/style.scss ***!
  \*******************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 286 */
/*!********************************************************!*\
  !*** ./src/blocks/block-posts-grid/styles/editor.scss ***!
  \********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 287 */
/*!********************************************!*\
  !*** ./src/blocks/block-carousel/index.js ***!
  \********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 288);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 290);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 291);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 292);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 293);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__assets_icon_c9_anything_carousel_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-anything-carousel.svg */ 294);
// Import block dependencies and components





// Import CSS





// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/carousel", {
	title: __("C9 Carousel", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_icon_c9_anything_carousel_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {
		// fill in features
	},
	keywords: [__("carousel", "c9-blocks"), __("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],
	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    getBlock = _select.getBlock,
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			block: getBlock(clientId),
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	}), withDispatch(function (dispatch) {
		var _dispatch = dispatch("core/editor"),
		    updateBlockAttributes = _dispatch.updateBlockAttributes,
		    removeBlock = _dispatch.removeBlock;

		return {
			updateBlockAttributes: updateBlockAttributes,
			removeBlock: removeBlock
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/***/ }),
/* 288 */
/*!*******************************************!*\
  !*** ./src/blocks/block-carousel/edit.js ***!
  \*******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 289);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_memize__ = __webpack_require__(/*! memize */ 23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_memize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_memize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_times__ = __webpack_require__(/*! lodash/times */ 24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash_times___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash_times__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_classnames__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Internal dependencies
 */






/**
 * WordPress dependencies
 */
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$editor = wp.editor,
    InnerBlocks = _wp$editor.InnerBlocks,
    BlockControls = _wp$editor.BlockControls;
var applyFilters = wp.hooks.applyFilters;
var withInstanceId = wp.compose.withInstanceId;


var ALLOWED_BLOCKS = ["c9-blocks/carousel-slide"];

// External Dependencies.


var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.getSlidesTemplate = __WEBPACK_IMPORTED_MODULE_2_memize___default()(function (slides) {
			var templates = __WEBPACK_IMPORTED_MODULE_3_lodash_times___default()(slides, function (id) {
				return ["c9-blocks/carousel-slide", { id: id, slideActive: _this.state.active, slides: slides }];
			});

			return templates;
		});
		var _this$props$attribute = _this.props.attributes,
		    autoSlide = _this$props$attribute.autoSlide,
		    wrapAround = _this$props$attribute.wrapAround,
		    slideTime = _this$props$attribute.slideTime;


		_this.carouselRef = __WEBPACK_IMPORTED_MODULE_1_react___default.a.createRef();
		_this.state = {
			auto: autoSlide,
			wrap: wrapAround,
			time: slideTime,
			active: 0
		};

		_this.createIndicators = _this.createIndicators.bind(_this);
		return _this;
	}

	_createClass(Edit, [{
		key: "componentDidMount",
		value: function componentDidMount() {
			var $ = window.jQuery;
			var self = this;

			$(this.carouselRef.current).on("slide.bs.carousel", function (_ref) {
				var to = _ref.to;

				self.setState({ active: to });
			});
		}
	}, {
		key: "shouldComponentUpdate",
		value: function shouldComponentUpdate(nextProps, nextState) {
			return 0 <= nextState.active && nextState.active < nextProps.attributes.slides;
		}
	}, {
		key: "componentDidUpdate",
		value: function componentDidUpdate() {
			var _props = this.props,
			    block = _props.block,
			    updateBlockAttributes = _props.updateBlockAttributes;

			// eslint-disable-next-line no-unused-vars

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = block.innerBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var child = _step.value;

					updateBlockAttributes(child.clientId, { slideActive: this.state.active });
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}

			var _state = this.state,
			    auto = _state.auto,
			    wrap = _state.wrap,
			    time = _state.time;
			var _props$attributes = this.props.attributes,
			    autoSlide = _props$attributes.autoSlide,
			    wrapAround = _props$attributes.wrapAround,
			    slideTime = _props$attributes.slideTime;

			var $ = window.jQuery;

			if ($(this.carouselRef.current).data()["bs.carousel"]) {
				var options = $(this.carouselRef.current).data()["bs.carousel"]._config;

				if (auto != autoSlide) {
					var interval = autoSlide ? slideTime : false;
					options.interval = interval;
					this.setState({ auto: autoSlide });

					if (autoSlide && time != slideTime) {
						this.setState({ time: slideTime });
					}
				} else if (autoSlide && time != slideTime) {
					options.interval = slideTime;
					this.setState({ time: slideTime });
				}

				if (wrap != wrapAround) {
					options.wrap = wrapAround;
					this.setState({ wrap: wrapAround });
				}
			}
		}
	}, {
		key: "createIndicators",
		value: function createIndicators(slides, id) {
			var active = this.state.active;
			var isSelectedBlockInRoot = this.props.isSelectedBlockInRoot;


			var indicators = [];
			for (var i = 0; i < slides; i++) {
				indicators.push(wp.element.createElement("li", {
					"data-target": "#c9-carousel-indicator-" + id,
					"data-slide-to": i,
					className: __WEBPACK_IMPORTED_MODULE_4_classnames___default()(i == active ? "active" : null, isSelectedBlockInRoot ? "editor-selected-controls-lift" : null)
				}));
			}

			return indicators;
		}
	}, {
		key: "render",
		value: function render() {
			var _props2 = this.props,
			    attributes = _props2.attributes,
			    _props2$className = _props2.className,
			    className = _props2$className === undefined ? "" : _props2$className,
			    instanceId = _props2.instanceId,
			    isSelectedBlockInRoot = _props2.isSelectedBlockInRoot,
			    setAttributes = _props2.setAttributes;
			var autoSlide = attributes.autoSlide,
			    slides = attributes.slides,
			    wrapAround = attributes.wrapAround,
			    showControls = attributes.showControls,
			    showIndicators = attributes.showIndicators,
			    slideTime = attributes.slideTime;


			if (instanceId != attributes.instanceId) {
				setAttributes({ instanceId: instanceId });
			}

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(BlockControls, null),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__components_inspector__["a" /* default */], _extends({}, this.props, {
					carouselRef: this.carouselRef,
					slideTarget: this.state.active
				})),
				wp.element.createElement(
					"div",
					{
						id: "c9-carousel-indicator-" + instanceId,
						className: __WEBPACK_IMPORTED_MODULE_4_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "carousel slide"),
						"data-ride": "carousel",
						"data-interval": autoSlide ? slideTime : false,
						"data-wrap": wrapAround,
						ref: this.carouselRef
					},
					wp.element.createElement(
						"ol",
						{
							className: __WEBPACK_IMPORTED_MODULE_4_classnames___default()("carousel-indicators", !showIndicators ? "hide-indicator" : null)
						},
						this.createIndicators(slides, instanceId)
					),
					wp.element.createElement(
						"div",
						{ className: "carousel-inner" },
						wp.element.createElement(InnerBlocks, {
							template: this.getSlidesTemplate(slides),
							templateLock: "all",
							allowedBlocks: ALLOWED_BLOCKS
						})
					),
					showControls && wp.element.createElement(
						Fragment,
						null,
						wp.element.createElement(
							"a",
							{
								className: __WEBPACK_IMPORTED_MODULE_4_classnames___default()("carousel-control-prev", isSelectedBlockInRoot ? "editor-selected-controls-lift" : null),
								href: "#c9-carousel-indicator-" + instanceId,
								role: "button",
								"data-slide": "prev"
							},
							wp.element.createElement("span", {
								className: "carousel-control-prev-icon",
								"aria-hidden": "true"
							}),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"Previous"
							)
						),
						wp.element.createElement(
							"a",
							{
								className: __WEBPACK_IMPORTED_MODULE_4_classnames___default()("carousel-control-next", isSelectedBlockInRoot ? "editor-selected-controls-lift" : null),
								href: "#c9-carousel-indicator-" + instanceId,
								role: "button",
								"data-slide": "next"
							},
							wp.element.createElement("span", {
								className: "carousel-control-next-icon",
								"aria-hidden": "true"
							}),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"Next"
							)
						)
					)
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (withInstanceId(Edit));

/***/ }),
/* 289 */
/*!***********************************************************!*\
  !*** ./src/blocks/block-carousel/components/inspector.js ***!
  \***********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var Component = wp.element.Component;
var InspectorControls = wp.editor.InspectorControls;
var _wp$components = wp.components,
    BaseControl = _wp$components.BaseControl,
    PanelBody = _wp$components.PanelBody,
    RangeControl = _wp$components.RangeControl,
    ToggleControl = _wp$components.ToggleControl;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		return _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes;
			var slides = attributes.slides,
			    autoSlide = attributes.autoSlide,
			    showControls = attributes.showControls,
			    showIndicators = attributes.showIndicators,
			    wrapAround = attributes.wrapAround,
			    slideTime = attributes.slideTime;


			return wp.element.createElement(
				InspectorControls,
				null,
				wp.element.createElement(BaseControl, null),
				wp.element.createElement(
					PanelBody,
					null,
					wp.element.createElement(RangeControl, {
						label: __("Number of slides to produce", "c9-blocks"),
						value: slides,
						onChange: function onChange(value) {
							var _props2 = _this2.props,
							    carouselRef = _props2.carouselRef,
							    slideTarget = _props2.slideTarget;

							var $ = window.jQuery;

							if (carouselRef.current && value < slides && 0 < slideTarget) {
								$(carouselRef.current).carousel("prev");
							}

							setAttributes({ slides: value });
						},
						min: 1,
						max: 20,
						help: __("Note: Changing the slide count can cause loss of content.", "c9-blocks")
					}),
					wp.element.createElement("hr", null),
					wp.element.createElement(ToggleControl, {
						label: __("Wrap Around", "c9-blocks"),
						checked: wrapAround,
						onChange: function onChange(wrapAround) {
							return setAttributes({ wrapAround: wrapAround });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Enable Auto Slide", "c9-blocks"),
						checked: autoSlide,
						onChange: function onChange(autoSlide) {
							return setAttributes({ autoSlide: autoSlide });
						}
					}),
					autoSlide && wp.element.createElement(RangeControl, {
						label: __("Time in between slides (ms)", "c9-blocks"),
						value: slideTime,
						onChange: function onChange(slideTime) {
							return setAttributes({ slideTime: slideTime });
						},
						min: 0,
						max: 1000000
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Show Controls", "c9-blocks"),
						checked: showControls,
						onChange: function onChange(showControls) {
							return setAttributes({ showControls: showControls });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Show indicators", "c9-blocks"),
						checked: showIndicators,
						onChange: function onChange(showIndicators) {
							return setAttributes({ showIndicators: showIndicators });
						}
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 290 */
/*!*******************************************!*\
  !*** ./src/blocks/block-carousel/save.js ***!
  \*******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// External Dependencies.


var applyFilters = wp.hooks.applyFilters;

/**
 * WordPress dependencies
 */

var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var InnerBlocks = wp.editor.InnerBlocks;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "createIndicators",
		value: function createIndicators(slides, id) {
			var indicators = [];
			for (var i = 0; i < slides; i++) {
				indicators.push(wp.element.createElement("li", {
					"data-target": "#c9-carousel-indicator-" + id,
					"data-slide-to": i,
					className: 0 === i ? "active" : null
				}));
			}

			return indicators;
		}
	}, {
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    showIndicators = _props$attributes.showIndicators,
			    autoSlide = _props$attributes.autoSlide,
			    slides = _props$attributes.slides,
			    showControls = _props$attributes.showControls,
			    instanceId = _props$attributes.instanceId,
			    wrapAround = _props$attributes.wrapAround,
			    slideTime = _props$attributes.slideTime;
			var _props$className = this.props.className,
			    className = _props$className === undefined ? "" : _props$className;


			return wp.element.createElement(
				"div",
				{
					id: "c9-carousel-indicator-" + instanceId,
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "carousel slide"),
					"data-ride": "carousel",
					"data-interval": autoSlide ? slideTime : false,
					"data-wrap": wrapAround
				},
				showIndicators && wp.element.createElement(
					"ol",
					{ className: "carousel-indicators" },
					this.createIndicators(slides, instanceId)
				),
				wp.element.createElement(
					"div",
					{ className: "carousel-inner" },
					wp.element.createElement(InnerBlocks.Content, null)
				),
				showControls && wp.element.createElement(
					Fragment,
					null,
					wp.element.createElement(
						"a",
						{
							className: "carousel-control-prev",
							href: "#c9-carousel-indicator-" + instanceId,
							role: "button",
							"data-slide": "prev"
						},
						wp.element.createElement("span", { className: "carousel-control-prev-icon", "aria-hidden": "true" }),
						wp.element.createElement(
							"span",
							{ className: "sr-only" },
							"Previous"
						)
					),
					wp.element.createElement(
						"a",
						{
							className: "carousel-control-next",
							href: "#c9-carousel-indicator-" + instanceId,
							role: "button",
							"data-slide": "next"
						},
						wp.element.createElement("span", { className: "carousel-control-next-icon", "aria-hidden": "true" }),
						wp.element.createElement(
							"span",
							{ className: "sr-only" },
							"Next"
						)
					)
				)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 291 */
/*!*************************************************!*\
  !*** ./src/blocks/block-carousel/attributes.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	instanceId: {
		type: "number"
	},
	slides: {
		type: "number",
		default: 3
	},
	showControls: {
		type: "boolean",
		default: true
	},
	showIndicators: {
		type: "boolean",
		default: true
	},
	autoSlide: {
		type: "boolean",
		default: true
	},
	wrapAround: {
		type: "boolean",
		default: true
	},
	slideTime: {
		type: "number",
		default: 5000
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 292 */
/*!*****************************************************!*\
  !*** ./src/blocks/block-carousel/styles/style.scss ***!
  \*****************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 293 */
/*!******************************************************!*\
  !*** ./src/blocks/block-carousel/styles/editor.scss ***!
  \******************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 294 */
/*!**********************************************!*\
  !*** ./assets/icon-c9-anything-carousel.svg ***!
  \**********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-anything-carousel_svg__cls-1{fill:#fff}.icon-c9-anything-carousel_svg__cls-2,.icon-c9-anything-carousel_svg__cls-3{fill:#6d6e71}.icon-c9-anything-carousel_svg__cls-3{font-size:3.35px;font-family:FontAwesome;letter-spacing:.01em}.icon-c9-anything-carousel_svg__cls-6{stroke:#6d6e71;stroke-miterlimit:10;fill:none}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-1",
  d: "M40.53 8.3h5.17v21.46h-5.17z"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-2",
  d: "M45.22 8.78v20.49H41V8.78h4.21m1-1H40v22.46h6.14V7.82z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-1",
  d: "M7.94 5.94h32.11v26.85H7.94z"
});

var _ref5 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-2",
  d: "M39.61 6.39v26H8.39v-26h31.22m.89-.89h-33v27.74h33V5.5z"
});

var _ref6 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("text", {
  className: "icon-c9-anything-carousel_svg__cls-3",
  transform: "translate(42.56 42.07)"
}, "\uF054");

var _ref7 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  strokeWidth: 0.76,
  stroke: "#6d6e71",
  strokeMiterlimit: 10,
  fill: "#fff",
  d: "M9 39.35h30v3.16H9z"
});

var _ref8 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-2",
  d: "M9 39.17h10v3.08H9z"
});

var _ref9 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  strokeWidth: 0.75,
  fill: "none",
  stroke: "#6d6e71",
  strokeMiterlimit: 10,
  d: "M19.06 39.34h10v3.08h-10z"
});

var _ref10 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("text", {
  className: "icon-c9-anything-carousel_svg__cls-3",
  transform: "translate(3.17 42.07)"
}, "\uF053");

var _ref11 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-1",
  d: "M2.66 8.3h5.17v21.46H2.66z"
});

var _ref12 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-2",
  d: "M7.35 8.78v20.49H3.14V8.78h4.21m1-1H2.18v22.46h6.13V7.82z"
});

var _ref13 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-1",
  d: "M10.56 13.33h13.11v9.11H10.56z"
});

var _ref14 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-2",
  d: "M23.23 13.77V22H11v-8.23h12.23m.89-.89h-14v10h14v-10z"
});

var _ref15 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-anything-carousel_svg__cls-6",
  d: "M27.12 14.88h11M27.12 17.88h10"
});

var SvgIconC9AnythingCarousel = function SvgIconC9AnythingCarousel(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-anything-carousel_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9AnythingCarousel);

/***/ }),
/* 295 */
/*!**************************************************!*\
  !*** ./src/blocks/block-image-carousel/index.js ***!
  \**************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 296);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 298);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 299);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 300);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 301);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__assets_icon_c9_image_carousel_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-image-carousel.svg */ 302);
// Import block dependencies and components





// Import CSS





// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/image-carousel", {
	title: __("C9 Image Carousel", "c9-blocks"),
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_icon_c9_image_carousel_svg__["a" /* default */],
	category: "c9-blocks",
	supports: {
		// fill in features
	},
	keywords: [__("carousel", "c9-blocks"), __("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],
	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    getBlock = _select.getBlock,
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			block: getBlock(clientId),
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	}), withDispatch(function (dispatch) {
		var _dispatch = dispatch("core/editor"),
		    updateBlockAttributes = _dispatch.updateBlockAttributes,
		    removeBlock = _dispatch.removeBlock;

		return {
			updateBlockAttributes: updateBlockAttributes,
			removeBlock: removeBlock
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/***/ }),
/* 296 */
/*!*************************************************!*\
  !*** ./src/blocks/block-image-carousel/edit.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 297);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash__ = __webpack_require__(/*! lodash */ 44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_lodash___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_lodash__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/alt-text */
/**
 * Internal dependencies
 */



/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$editor = wp.editor,
    RichText = _wp$editor.RichText,
    BlockControls = _wp$editor.BlockControls,
    MediaPlaceholder = _wp$editor.MediaPlaceholder;
var applyFilters = wp.hooks.applyFilters;
var withInstanceId = wp.compose.withInstanceId;
var isBlobURL = wp.blob.isBlobURL;
var IconButton = wp.components.IconButton;


var ALLOWED_MEDIA_TYPES = ["image"];
var DEFAULT_SIZE_SLUG = "large";

// External Dependencies.



var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit(_ref) {
		var autoSlide = _ref.autoSlide,
		    wrapAround = _ref.wrapAround,
		    slideTime = _ref.slideTime;

		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.pickRelevantMediaFiles = function (image) {
			var imageProps = Object(__WEBPACK_IMPORTED_MODULE_3_lodash__["pick"])(image, ["alt", "id", "link", "caption"]);
			imageProps.url = Object(__WEBPACK_IMPORTED_MODULE_3_lodash__["get"])(image, ["sizes", "large", "url"]) || Object(__WEBPACK_IMPORTED_MODULE_3_lodash__["get"])(image, ["media_details", "sizes", "large", "source_url"]) || image.url;
			return imageProps;
		};

		_this.isTemporaryImage = function (id, url) {
			return !id && isBlobURL(url);
		};

		_this.isExternalImage = function (id, url) {
			return url && !id && !isBlobURL(url);
		};

		_this.carouselRef = __WEBPACK_IMPORTED_MODULE_1_react___default.a.createRef();

		_this.state = {
			auto: autoSlide,
			wrap: wrapAround,
			time: slideTime,
			slideActive: 0,
			slideTarget: 0
		};

		_this.onSelectImage = _this.onSelectImage.bind(_this);
		_this.onSelectURL = _this.onSelectURL.bind(_this);
		_this.createIndicators = _this.createIndicators.bind(_this);
		_this.createSlides = _this.createSlides.bind(_this);
		return _this;
	}

	_createClass(Edit, [{
		key: "componentDidMount",
		value: function componentDidMount() {
			var $ = window.jQuery;
			var self = this;

			$(this.carouselRef.current).on("slide.bs.carousel", function (_ref2) {
				var to = _ref2.to;

				self.setState({ slideTarget: to, slideActive: to });
			});
		}
	}, {
		key: "shouldComponentUpdate",
		value: function shouldComponentUpdate(nextProps, nextState) {
			if (nextState.slideActive !== this.state.slideActive && this.props.attributes.slides === nextProps.attributes.slides) {
				return 0 >= nextState.slideActive;
			}

			return true;
		}
	}, {
		key: "componentDidUpdate",
		value: function componentDidUpdate() {
			var _state = this.state,
			    auto = _state.auto,
			    wrap = _state.wrap,
			    time = _state.time;
			var _props$attributes = this.props.attributes,
			    autoSlide = _props$attributes.autoSlide,
			    wrapAround = _props$attributes.wrapAround,
			    slideTime = _props$attributes.slideTime;

			var $ = window.jQuery;

			if (0 > this.state.slideActive) {
				this.setState({ slideTarget: 0, slideActive: 0 });
			}

			if ($(this.carouselRef.current).data()["bs.carousel"]) {
				var options = $(this.carouselRef.current).data()["bs.carousel"]._config;

				if (auto != autoSlide) {
					var interval = autoSlide ? slideTime : false;
					options.interval = interval;
					this.setState({ auto: autoSlide });

					if (autoSlide && time != slideTime) {
						this.setState({ time: slideTime });
					}
				} else if (autoSlide && time != slideTime) {
					options.interval = slideTime;
					this.setState({ time: slideTime });
				}

				if (wrap != wrapAround) {
					options.wrap = wrapAround;
					this.setState({ wrap: wrapAround });
				}
			}
		}
	}, {
		key: "onUploadError",
		value: function onUploadError(message, i) {
			var _props = this.props,
			    noticeOperations = _props.noticeOperations,
			    url = _props.url,
			    id = _props.id;

			noticeOperations.removeAllNotices();
			noticeOperations.createErrorNotice(message);

			// clone to new array
			url = [].concat(_toConsumableArray(url));
			id = [].concat(_toConsumableArray(id));

			url[i] = null;
			id[i] = null;

			this.props.setAttributes({
				url: url,
				id: id
			});
		}
	}, {
		key: "onSelectImage",
		value: function onSelectImage(media, i) {
			if (!media || !media.url) {
				var _props$attributes2 = this.props.attributes,
				    _url = _props$attributes2.url,
				    _id = _props$attributes2.id;
				// clone to new array

				_url = [].concat(_toConsumableArray(_url));
				_id = [].concat(_toConsumableArray(_id));

				_url[i] = undefined;
				_id[i] = undefined;

				this.props.setAttributes({
					url: _url,
					id: _id
				});
				return;
			}

			var _props$attributes3 = this.props.attributes,
			    id = _props$attributes3.id,
			    url = _props$attributes3.url;
			// clone to new array

			url = [].concat(_toConsumableArray(url));
			id = [].concat(_toConsumableArray(id));

			var mediaAttributes = this.pickRelevantMediaFiles(media);

			var additionalAttributes = void 0;
			// Reset the dimension attributes if changing to a different image.
			if (!media.id || media.id !== id[i]) {
				additionalAttributes = {
					width: undefined,
					height: undefined,
					sizeSlug: DEFAULT_SIZE_SLUG
				};
			} else {
				// Keep the same url when selecting the same file, so "Image Size" option is not changed.
				additionalAttributes = { url: url };
			}

			id[i] = mediaAttributes.id;
			url[i] = mediaAttributes.url;

			// update id, url attributes from mediaAttributes
			mediaAttributes.id = id;
			mediaAttributes.url = url;

			this.props.setAttributes(Object.assign({}, mediaAttributes, additionalAttributes));
		}
	}, {
		key: "onSelectURL",
		value: function onSelectURL(newURL, i) {
			var _props$attributes4 = this.props.attributes,
			    url = _props$attributes4.url,
			    id = _props$attributes4.id;
			// clone to new array

			url = [].concat(_toConsumableArray(url));
			id = [].concat(_toConsumableArray(id));

			if (newURL !== url[i]) {
				url[i] = newURL;
				id[i] = undefined;
				this.props.setAttributes({
					url: url,
					id: id,
					sizeSlug: DEFAULT_SIZE_SLUG
				});
			}
		}
	}, {
		key: "createIndicators",
		value: function createIndicators(slides, id) {
			var _state2 = this.state,
			    slideActive = _state2.slideActive,
			    slideTarget = _state2.slideTarget;
			var isSelectedBlockInRoot = this.props.isSelectedBlockInRoot;
			var url = this.props.attributes.url;


			var indicators = [];
			for (var i = 0; i < slides; i++) {
				indicators.push(wp.element.createElement("li", {
					"data-target": "#c9-image-carousel-indicator-" + id,
					"data-slide-to": i,
					className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()(i == slideActive ? "active" : null, url[slideTarget] && isSelectedBlockInRoot ? "editor-selected-controls-lift" : null)
				}));
			}

			return indicators;
		}
	}, {
		key: "createSlides",
		value: function createSlides(slides) {
			var _this2 = this;

			var _props2 = this.props,
			    isSelectedBlockInRoot = _props2.isSelectedBlockInRoot,
			    setAttributes = _props2.setAttributes;
			var _props$attributes5 = this.props.attributes,
			    id = _props$attributes5.id,
			    url = _props$attributes5.url,
			    captionTitle = _props$attributes5.captionTitle,
			    captionContent = _props$attributes5.captionContent;


			var template = [];

			var _loop = function _loop(i) {
				var labels = {
					title: !url[i] ? __("Image") : __("Edit image"),
					instructions: __("Upload an image file, pick one from your media library, or add one with a URL.")
				};

				var mediaPreview = !!url[i] && wp.element.createElement("img", {
					alt: __("Edit image"),
					title: __("Edit image"),
					className: "edit-image-preview",
					src: url[i]
				});

				var isExternal = _this2.isExternalImage(id[i], url[i]);

				var src = isExternal ? url[i] : undefined;

				template.push(wp.element.createElement(
					"div",
					{
						className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()("carousel-item", i == _this2.state.slideActive ? "active" : null)
					},
					!url[i] ? wp.element.createElement(MediaPlaceholder, {
						icon: "format-gallery",
						labels: labels,
						onSelect: function onSelect(media) {
							return _this2.onSelectImage(media, i);
						},
						onSelectURL: function onSelectURL(newURL) {
							return _this2.onSelectURL(newURL, i);
						},
						onError: function onError(message) {
							return _this2.onUploadError(message, i);
						},
						accept: "image/*",
						allowedTypes: ALLOWED_MEDIA_TYPES,
						value: { id: id[i], src: src },
						mediaPreview: mediaPreview,
						dropZoneUIOnly: url[i]
					}) : wp.element.createElement(
						Fragment,
						null,
						wp.element.createElement("img", { src: url[i], className: "d-block w-100" }),
						wp.element.createElement(
							"div",
							{
								className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()("carousel-caption d-none d-md-block", isSelectedBlockInRoot ? "editor-selected-lift" : null)
							},
							wp.element.createElement(RichText, {
								tagName: "h5",
								placeholder: __("Slide label", "c9-blocks"),
								value: captionTitle[i],
								onChange: function onChange(value) {
									var newCaptionTitle = [].concat(_toConsumableArray(captionTitle));
									newCaptionTitle[i] = value;

									setAttributes({
										captionTitle: newCaptionTitle
									});
								},
								formattingControls: ["bold", "italic", "strikethrough"],
								keepPlaceholderOnFocus: true
							}),
							wp.element.createElement(RichText, {
								tagName: "p",
								placeholder: __("Nulla vitae elit libero, a pharetra augue mollis interdum.", "c9-blocks"),
								value: captionContent[i],
								onChange: function onChange(value) {
									var newCaptionContent = [].concat(_toConsumableArray(captionContent));
									newCaptionContent[i] = value;

									setAttributes({
										captionContent: newCaptionContent
									});
								},
								formattingControls: ["bold", "italic", "strikethrough"],
								keepPlaceholderOnFocus: true
							})
						),
						isSelectedBlockInRoot && wp.element.createElement(
							"div",
							{ className: "c9-remove-image" },
							wp.element.createElement(
								IconButton,
								{
									label: __("Remove Image", "c9-blocks"),
									icon: "dismiss",
									onClick: function onClick() {
										// clone to new array
										var newUrl = [].concat(_toConsumableArray(url));
										var newId = [].concat(_toConsumableArray(id));
										var newCaptionTitle = [].concat(_toConsumableArray(captionTitle));
										var newCaptionContent = [].concat(_toConsumableArray(captionContent));

										newUrl[i] = null;
										newId[i] = null;
										newCaptionTitle[i] = null;
										newCaptionContent[i] = null;

										setAttributes({
											url: newUrl,
											id: newId,
											captionTitle: newCaptionTitle,
											captionContent: newCaptionContent
										});
									}
								},
								__("Remove", "c9-blocks")
							)
						)
					)
				));
			};

			for (var i = 0; i < slides; i++) {
				_loop(i);
			}

			return template;
		}
	}, {
		key: "render",
		value: function render() {
			var slideTarget = this.state.slideTarget;
			var _props3 = this.props,
			    attributes = _props3.attributes,
			    setAttributes = _props3.setAttributes,
			    _props3$className = _props3.className,
			    className = _props3$className === undefined ? "" : _props3$className,
			    instanceId = _props3.instanceId,
			    isSelectedBlockInRoot = _props3.isSelectedBlockInRoot;
			var autoSlide = attributes.autoSlide,
			    slides = attributes.slides,
			    wrapAround = attributes.wrapAround,
			    showIndicators = attributes.showIndicators,
			    showControls = attributes.showControls,
			    url = attributes.url,
			    slideTime = attributes.slideTime;


			if (instanceId != attributes.instanceId) {
				setAttributes({ instanceId: instanceId });
			}

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(BlockControls, null),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__components_inspector__["a" /* default */], _extends({}, this.props, {
					carouselRef: this.carouselRef,
					slideTarget: slideTarget
				})),
				wp.element.createElement(
					"div",
					{
						id: "c9-image-carousel-indicator-" + instanceId,
						className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "carousel slide"),
						"data-ride": "carousel",
						"data-interval": autoSlide ? slideTime : false,
						"data-wrap": wrapAround,
						ref: this.carouselRef
					},
					wp.element.createElement(
						"ol",
						{
							className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()("carousel-indicators", !showIndicators ? "hide-indicator" : null)
						},
						this.createIndicators(slides, instanceId)
					),
					wp.element.createElement(
						"div",
						{ className: "carousel-inner" },
						this.createSlides(slides)
					),
					showControls && wp.element.createElement(
						Fragment,
						null,
						wp.element.createElement(
							"a",
							{
								className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()("carousel-control-prev", url[slideTarget] && isSelectedBlockInRoot ? "editor-selected-controls-lift" : null),
								href: "#c9-image-carousel-indicator-" + instanceId,
								role: "button",
								"data-slide": "prev"
							},
							wp.element.createElement("span", {
								className: "carousel-control-prev-icon",
								"aria-hidden": "true"
							}),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"Previous"
							)
						),
						wp.element.createElement(
							"a",
							{
								className: __WEBPACK_IMPORTED_MODULE_2_classnames___default()("carousel-control-next", url[slideTarget] && isSelectedBlockInRoot ? "editor-selected-controls-lift" : null),
								href: "#c9-image-carousel-indicator-" + instanceId,
								role: "button",
								"data-slide": "next"
							},
							wp.element.createElement("span", {
								className: "carousel-control-next-icon",
								"aria-hidden": "true"
							}),
							wp.element.createElement(
								"span",
								{ className: "sr-only" },
								"Next"
							)
						)
					)
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (withInstanceId(Edit));

/***/ }),
/* 297 */
/*!*****************************************************************!*\
  !*** ./src/blocks/block-image-carousel/components/inspector.js ***!
  \*****************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var __ = wp.i18n.__;
var Component = wp.element.Component;
var InspectorControls = wp.editor.InspectorControls;
var _wp$components = wp.components,
    BaseControl = _wp$components.BaseControl,
    PanelBody = _wp$components.PanelBody,
    RangeControl = _wp$components.RangeControl,
    ToggleControl = _wp$components.ToggleControl;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		return _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));
	}

	_createClass(Inspector, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes;
			var slides = attributes.slides,
			    autoSlide = attributes.autoSlide,
			    showControls = attributes.showControls,
			    showIndicators = attributes.showIndicators,
			    wrapAround = attributes.wrapAround,
			    slideTime = attributes.slideTime;


			return wp.element.createElement(
				InspectorControls,
				null,
				wp.element.createElement(BaseControl, null),
				wp.element.createElement(
					PanelBody,
					null,
					wp.element.createElement(RangeControl, {
						label: __("Number of slides to produce", "c9-blocks"),
						value: slides,
						onChange: function onChange(value) {
							var _props2 = _this2.props,
							    carouselRef = _props2.carouselRef,
							    slideTarget = _props2.slideTarget;
							var _props$attributes = _this2.props.attributes,
							    url = _props$attributes.url,
							    id = _props$attributes.id,
							    captionTitle = _props$attributes.captionTitle,
							    captionContent = _props$attributes.captionContent;


							var $ = window.jQuery;

							if (value > url.length) {
								url.push(null);
								id.push(null);
								captionTitle.push(null);
								captionContent.push(null);

								setAttributes({ id: id, url: url, captionTitle: captionTitle, captionContent: captionContent });
							} else {
								url.pop();
								id.pop();
								captionTitle.pop();
								captionContent.pop();

								setAttributes({ id: id, url: url, captionTitle: captionTitle, captionContent: captionContent });

								if (carouselRef.current && 0 < slideTarget) {
									$(carouselRef.current).carousel("prev");
								}
							}

							setAttributes({ slides: value });
						},
						min: 1,
						max: 20,
						help: __("Note: Changing the slide count can cause loss of content.", "c9-blocks")
					}),
					wp.element.createElement("hr", null),
					wp.element.createElement(ToggleControl, {
						label: __("Wrap Around", "c9-blocks"),
						checked: wrapAround,
						onChange: function onChange(wrapAround) {
							return setAttributes({ wrapAround: wrapAround });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Enable Auto Slide", "c9-blocks"),
						checked: autoSlide,
						onChange: function onChange(autoSlide) {
							return setAttributes({ autoSlide: autoSlide });
						}
					}),
					autoSlide && wp.element.createElement(RangeControl, {
						label: __("Time in between slides (ms)", "c9-blocks"),
						value: slideTime,
						onChange: function onChange(slideTime) {
							return setAttributes({ slideTime: slideTime });
						},
						min: 0,
						max: 1000000
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Show Controls", "c9-blocks"),
						checked: showControls,
						onChange: function onChange(showControls) {
							return setAttributes({ showControls: showControls });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Show indicators", "c9-blocks"),
						checked: showIndicators,
						onChange: function onChange(showIndicators) {
							return setAttributes({ showIndicators: showIndicators });
						}
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 298 */
/*!*************************************************!*\
  !*** ./src/blocks/block-image-carousel/save.js ***!
  \*************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/alt-text */
// External Dependencies.


var applyFilters = wp.hooks.applyFilters;

/**
 * WordPress dependencies
 */

var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var RichText = wp.editor.RichText;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "createSlides",
		value: function createSlides(slides) {
			var _props$attributes = this.props.attributes,
			    url = _props$attributes.url,
			    captionTitle = _props$attributes.captionTitle,
			    captionContent = _props$attributes.captionContent;


			var template = [];
			for (var i = 0; i < slides; i++) {
				template.push(wp.element.createElement(
					"div",
					{ className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("carousel-item", 0 == i ? "active" : null) },
					wp.element.createElement(
						Fragment,
						null,
						url[i] && wp.element.createElement("img", { src: url[i], className: "d-block w-100" }),
						(captionTitle[i] || captionContent[i]) && wp.element.createElement(
							"div",
							{ className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("carousel-caption d-none d-md-block") },
							captionTitle[i] && wp.element.createElement(RichText.Content, { tagName: "h5", value: captionTitle[i] }),
							captionContent[i] && wp.element.createElement(RichText.Content, { tagName: "p", value: captionContent[i] })
						)
					)
				));
			}

			return template;
		}
	}, {
		key: "createIndicators",
		value: function createIndicators(slides, id) {
			var indicators = [];
			for (var i = 0; i < slides; i++) {
				indicators.push(wp.element.createElement("li", {
					"data-target": "#c9-image-carousel-indicator-" + id,
					"data-slide-to": i,
					className: 0 == i ? "active" : null
				}));
			}

			return indicators;
		}
	}, {
		key: "render",
		value: function render() {
			var _props$attributes2 = this.props.attributes,
			    showIndicators = _props$attributes2.showIndicators,
			    autoSlide = _props$attributes2.autoSlide,
			    slides = _props$attributes2.slides,
			    showControls = _props$attributes2.showControls,
			    instanceId = _props$attributes2.instanceId,
			    wrapAround = _props$attributes2.wrapAround,
			    slideTime = _props$attributes2.slideTime;
			var _props$className = this.props.className,
			    className = _props$className === undefined ? "" : _props$className;


			return wp.element.createElement(
				"div",
				{
					id: "c9-image-carousel-indicator-" + instanceId,
					className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "carousel slide"),
					"data-ride": "carousel",
					"data-interval": autoSlide ? slideTime : false,
					"data-wrap": wrapAround
				},
				showIndicators && wp.element.createElement(
					"ol",
					{ className: "carousel-indicators" },
					this.createIndicators(slides, instanceId)
				),
				wp.element.createElement(
					"div",
					{ className: "carousel-inner" },
					this.createSlides(slides)
				),
				showControls && wp.element.createElement(
					Fragment,
					null,
					wp.element.createElement(
						"a",
						{
							className: "carousel-control-prev",
							href: "#c9-image-carousel-indicator-" + instanceId,
							role: "button",
							"data-slide": "prev"
						},
						wp.element.createElement("span", { className: "carousel-control-prev-icon", "aria-hidden": "true" }),
						wp.element.createElement(
							"span",
							{ className: "sr-only" },
							"Previous"
						)
					),
					wp.element.createElement(
						"a",
						{
							className: "carousel-control-next",
							href: "#c9-image-carousel-indicator-" + instanceId,
							role: "button",
							"data-slide": "next"
						},
						wp.element.createElement("span", { className: "carousel-control-next-icon", "aria-hidden": "true" }),
						wp.element.createElement(
							"span",
							{ className: "sr-only" },
							"Next"
						)
					)
				)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 299 */
/*!*******************************************************!*\
  !*** ./src/blocks/block-image-carousel/attributes.js ***!
  \*******************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	instanceId: {
		type: "number"
	},
	slides: {
		type: "number",
		default: 3
	},
	showControls: {
		type: "boolean",
		default: true
	},
	showIndicators: {
		type: "boolean",
		default: true
	},
	autoSlide: {
		type: "boolean",
		default: true
	},
	wrapAround: {
		type: "boolean",
		default: true
	},
	url: {
		type: "array",
		default: [null, null, null]
	},
	id: {
		type: "array",
		default: [null, null, null]
	},
	captionTitle: {
		type: "array",
		default: [null, null, null]
	},
	captionContent: {
		type: "array",
		default: [null, null, null]
	},
	slideTime: {
		type: "number",
		default: 5000
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 300 */
/*!***********************************************************!*\
  !*** ./src/blocks/block-image-carousel/styles/style.scss ***!
  \***********************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 301 */
/*!************************************************************!*\
  !*** ./src/blocks/block-image-carousel/styles/editor.scss ***!
  \************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 302 */
/*!*******************************************!*\
  !*** ./assets/icon-c9-image-carousel.svg ***!
  \*******************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }



var _ref =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("defs", null, __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("style", null, ".icon-c9-image-carousel_svg__cls-1{fill:#fff}.icon-c9-image-carousel_svg__cls-2,.icon-c9-image-carousel_svg__cls-5{fill:#6d6e71}.icon-c9-image-carousel_svg__cls-5{font-size:3.35px;font-family:FontAwesome;letter-spacing:.01em}"));

var _ref2 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-1",
  d: "M40.53 8.3h5.17v21.46h-5.17z"
});

var _ref3 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-2",
  d: "M45.22 8.78v20.49H41V8.78h4.21m1-1H40v22.46h6.14V7.82z"
});

var _ref4 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  fill: "#63cbe5",
  d: "M7.95 5.94h32.11v26.85H7.95z"
});

var _ref5 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-2",
  d: "M39.61 6.39v26H8.39v-26h31.22m.89-.89h-33v27.74h33V5.5z"
});

var _ref6 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  d: "M13.18 13.48v2.07a2.2 2.2 0 001.1 1.91l1.79 1a2.23 2.23 0 002.21 0l1.79-1a2.19 2.19 0 001.11-1.91v-2.07a2.19 2.19 0 00-1.11-1.91l-1.79-1a2.23 2.23 0 00-2.21 0l-1.79 1a2.2 2.2 0 00-1.1 1.91z",
  strokeMiterlimit: 10,
  stroke: "#c9292c",
  strokeWidth: 0.8,
  fill: "#fff"
});

var _ref7 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-1",
  d: "M9.13 32.72L14.3 25a1 1 0 01.82-.44 1 1 0 01.75.35l2.86 3.4 8.84-14a1 1 0 01.83-.45 1 1 0 01.86.51l10.05 18.35z"
});

var _ref8 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-2",
  d: "M28.4 14.38a.46.46 0 01.42.24l9.63 17.59H10.09l4.64-7a.46.46 0 01.39-.21.49.49 0 01.36.17l2.41 2.86.9 1.07.75-1.1L28 14.6a.46.46 0 01.4-.22m0-1a1.47 1.47 0 00-1.26.7l-8.47 13.33-2.4-2.86a1.52 1.52 0 00-1.15-.55 1.49 1.49 0 00-1.24.67l-5.7 8.55h32L29.71 14.13a1.49 1.49 0 00-1.31-.78z"
});

var _ref9 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("text", {
  className: "icon-c9-image-carousel_svg__cls-5",
  transform: "translate(42.56 42.07)"
}, "\uF054");

var _ref10 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  strokeWidth: 0.76,
  fill: "none",
  stroke: "#6d6e71",
  strokeMiterlimit: 10,
  d: "M9 39.35h30v3.16H9z"
});

var _ref11 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-2",
  d: "M9 39.17h10v3.08H9z"
});

var _ref12 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  strokeWidth: 0.75,
  fill: "none",
  stroke: "#6d6e71",
  strokeMiterlimit: 10,
  d: "M19.06 39.34h10v3.08h-10z"
});

var _ref13 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("text", {
  className: "icon-c9-image-carousel_svg__cls-5",
  transform: "translate(3.17 42.07)"
}, "\uF053");

var _ref14 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-1",
  d: "M2.66 8.3h5.17v21.46H2.66z"
});

var _ref15 =
/*#__PURE__*/
__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("path", {
  className: "icon-c9-image-carousel_svg__cls-2",
  d: "M7.35 8.78v20.49H3.14V8.78h4.21m1-1H2.18v22.46h6.13V7.82z"
});

var SvgIconC9ImageCarousel = function SvgIconC9ImageCarousel(props) {
  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("svg", _extends({
    id: "icon-c9-image-carousel_svg__Layer_1",
    "data-name": "Layer 1",
    viewBox: "0 0 48 48"
  }, props), _ref, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15);
};

/* harmony default export */ __webpack_exports__["a"] = (SvgIconC9ImageCarousel);

/***/ }),
/* 303 */
/*!****************************************************!*\
  !*** ./src/blocks/block-column-container/index.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__edit__ = __webpack_require__(/*! ./edit */ 304);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__save__ = __webpack_require__(/*! ./save */ 377);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attributes__ = __webpack_require__(/*! ./attributes */ 378);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 379);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 380);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__styles_editor_scss__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// Import block dependencies and components






// Import CSS



// Components
var __ = wp.i18n.__;
var compose = wp.compose.compose;
var withSelect = wp.data.withSelect;

// Register block

var registerBlockType = wp.blocks.registerBlockType;

// Register the block

registerBlockType("c9-blocks/column-container", {
	title: __("C9 Column Container", "c9-blocks"),
	icon: "columns",
	category: "common",
	parent: ["c9-blocks/grid-container", "c9-blocks/carousel-slide"],
	supports: {
		// fill in features
		className: false
	},
	keywords: [__("container", "c9-blocks"), __("responsive", "c9-blocks")],
	attributes: __WEBPACK_IMPORTED_MODULE_2__attributes__["a" /* default */],

	/* Add alignment to block wrapper. */
	getEditWrapperProps: function getEditWrapperProps(_ref) {
		var align = _ref.align;

		if ("full" === align || "wide" === align || "narrow" === align || "" === align) {
			return { "data-align": align };
		}
	},


	// Render the block components
	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	})])(__WEBPACK_IMPORTED_MODULE_0__edit__["a" /* default */]),

	// Save the attributes and markup
	save: function save(props) {
		return wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__save__["a" /* default */], props);
	}
});

/* Add the vertical column alignment class to the column container block. */
var withClientIdClassName = wp.compose.createHigherOrderComponent(function (BlockListBlock) {
	return function (props) {
		var blockName = props.block.name;

		if ("c9-blocks/column-container" === blockName) {
			return wp.element.createElement(BlockListBlock, _extends({}, props, {
				className: __WEBPACK_IMPORTED_MODULE_3_classnames___default()(props.attributes.verticalAlign ? "c9-is-vertically-aligned-" + props.attributes.verticalAlign : "c9-is-vertically-aligned-top", props.attributes.containerWidth)
			}));
		} else {
			return wp.element.createElement(BlockListBlock, props);
		}
	};
}, "withClientIdClassName");

wp.hooks.addFilter("editor.BlockListBlock", "c9-blocks/add-vertical-align-class", withClientIdClassName);

/***/ }),
/* 304 */
/*!***************************************************!*\
  !*** ./src/blocks/block-column-container/edit.js ***!
  \***************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 305);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_container__ = __webpack_require__(/*! ./components/container */ 72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_width_toolbar__ = __webpack_require__(/*! ./components/width-toolbar */ 376);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_vertical_align_toolbar__ = __webpack_require__(/*! ./components/vertical-align-toolbar */ 73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__ = __webpack_require__(/*! ../../../assets/c9-col-layout-icons */ 71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_memize__ = __webpack_require__(/*! memize */ 23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_memize___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_memize__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash_map__ = __webpack_require__(/*! lodash/map */ 29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_lodash_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_lodash_map__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash_times__ = __webpack_require__(/*! lodash/times */ 24);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_lodash_times___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8_lodash_times__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__components_block_selector__ = __webpack_require__(/*! ../../components/block-selector */ 49);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * External dependencies
 */


/**
 * Internal dependencies
 */











/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$components = wp.components,
    Tooltip = _wp$components.Tooltip,
    Placeholder = _wp$components.Placeholder,
    ButtonGroup = _wp$components.ButtonGroup,
    Button = _wp$components.Button;
var _wp$editor = wp.editor,
    InnerBlocks = _wp$editor.InnerBlocks,
    BlockControls = _wp$editor.BlockControls;


var ALLOWED_BLOCKS = ["c9-blocks/column-container"];

var getLayoutTemplate = __WEBPACK_IMPORTED_MODULE_6_memize___default()(function (columns) {
	return __WEBPACK_IMPORTED_MODULE_8_lodash_times___default()(columns, function () {
		return ["c9-blocks/column"];
	});
});

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		var _this = _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));

		_this.state = {
			pickLayout: true
		};
		return _this;
	}

	_createClass(Edit, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    _props$attributes = _props.attributes,
			    verticalAlign = _props$attributes.verticalAlign,
			    containerWidth = _props$attributes.containerWidth,
			    layout = _props$attributes.layout,
			    columns = _props$attributes.columns,
			    columnsGap = _props$attributes.columnsGap,
			    responsiveToggle = _props$attributes.responsiveToggle,
			    columnMaxWidth = _props$attributes.columnMaxWidth,
			    align = _props$attributes.align,
			    setAttributes = _props.setAttributes;


			var selectedRows = 1;

			if (columns) {
				selectedRows = parseInt(columns.toString().split("-"));
			}

			var currWidth = void 0;
			if (0 != align.length) {
				if ("container" == containerWidth) {
					currWidth = "wide";
				} else if ("container-fluid" == containerWidth) {
					currWidth = "full";
				} else {
					currWidth = "narrow";
				}
			}

			// show placeholder when nothing is set
			if (!layout && this.state.pickLayout) {
				return [wp.element.createElement(
					Placeholder,
					{
						key: "placeholder",
						icon: "editor-table",
						label: columns ? __("Column Layout", "c9-blocks") : __("Column Number", "c9-blocks"),
						instructions: columns ? __("Select a layout for this column.", "c9-blocks") : __("Select the number of columns for this layout.", "c9-blocks"),
						className: "c9-column-selector-placeholder"
					},
					!columns ? wp.element.createElement(
						ButtonGroup,
						{
							"aria-label": __("Select Row Columns", "c9-blocks"),
							className: "c9-column-selector-group"
						},
						__WEBPACK_IMPORTED_MODULE_7_lodash_map___default()(columnOptions, function (_ref) {
							var name = _ref.name,
							    key = _ref.key,
							    icon = _ref.icon,
							    columns = _ref.columns;
							return wp.element.createElement(
								Tooltip,
								{ text: name, key: key },
								wp.element.createElement(
									"div",
									{ className: "c9-column-selector" },
									wp.element.createElement(
										Button,
										{
											className: "c9-column-selector-button",
											isSmall: true,
											onClick: function onClick() {
												setAttributes({
													columns: columns,
													layout: 1 === columns || 5 === columns || 6 === columns ? key : null
												});

												{
													1 === columns && _this2.setState({ pickLayout: false });
												}
											}
										},
										icon
									)
								)
							);
						})
					) : wp.element.createElement(
						Fragment,
						null,
						wp.element.createElement(
							ButtonGroup,
							{
								"aria-label": __("Select Column Layout", "c9-blocks"),
								className: "c9-column-selector-group"
							},
							__WEBPACK_IMPORTED_MODULE_7_lodash_map___default()(columnLayouts[selectedRows], function (_ref2) {
								var name = _ref2.name,
								    key = _ref2.key,
								    icon = _ref2.icon;
								return wp.element.createElement(
									Tooltip,
									{ text: name, key: key },
									wp.element.createElement(
										"div",
										{ className: "c9-column-selector" },
										wp.element.createElement(
											Button,
											{
												key: key,
												className: "c9-column-selector-button",
												isSmall: true,
												onClick: function onClick() {
													setAttributes({
														layout: key
													});
													_this2.setState({ pickLayout: false });
												}
											},
											icon
										)
									)
								);
							}),
							wp.element.createElement(
								Button,
								{
									className: "c9-column-selector-button-back",
									onClick: function onClick() {
										setAttributes({
											columns: null
										});
										_this2.setState({ pickLayout: true });
									}
								},
								__("Return to Column Selection", "c9-blocks")
							)
						)
					)
				)];
			}

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(
					BlockControls,
					{ key: "controls" },
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_3__components_width_toolbar__["a" /* default */], {
						value: currWidth,
						onChange: function onChange(value) {
							if ("wide" == value) {
								setAttributes({ containerWidth: "container", align: "wide" });
							} else if ("full" == value) {
								setAttributes({
									containerWidth: "container-fluid",
									align: "full"
								});
							} else if ("narrow" == value) {
								setAttributes({
									containerWidth: "container-narrow",
									align: "narrow"
								});
							} else {
								setAttributes({ containerWidth: "container", align: "" });
							}
						}
					}),
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_4__components_vertical_align_toolbar__["a" /* default */], {
						value: verticalAlign,
						onChange: function onChange(value) {
							setAttributes({ verticalAlign: value });
						}
					})
				),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_1__components_inspector__["a" /* default */], this.props),
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_9__components_block_selector__["a" /* default */], { text: "Select Column Container" }),
				wp.element.createElement(
					__WEBPACK_IMPORTED_MODULE_2__components_container__["a" /* default */],
					this.props,
					wp.element.createElement(
						"div",
						{
							className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-layout-column-wrap-admin", "c9-block-layout-column-gap-" + columnsGap, responsiveToggle ? "c9-is-responsive-column" : null),
							style: {
								maxWidth: columnMaxWidth ? columnMaxWidth : null
							}
						},
						wp.element.createElement(InnerBlocks, {
							template: getLayoutTemplate(columns),
							templateLock: "all",
							allowedBlocks: ALLOWED_BLOCKS
						})
					)
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Edit);


var columnOptions = [{
	name: __("1 Column", "c9-blocks"),
	key: "one-column",
	columns: 1,
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].oneEqual
}, {
	name: __("2 Columns", "c9-blocks"),
	key: "two-column",
	columns: 2,
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].twoEqual
}, {
	name: __("3 Columns", "c9-blocks"),
	key: "three-column",
	columns: 3,
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].threeEqual
}, {
	name: __("4 Columns", "c9-blocks"),
	key: "four-column",
	columns: 4,
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].fourEqual
}, {
	name: __("5 Columns", "c9-blocks"),
	key: "five-column",
	columns: 5,
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].fiveEqual
}, {
	name: __("6 Columns", "c9-blocks"),
	key: "six-column",
	columns: 6,
	icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].sixEqual
}];

var columnLayouts = {
	1: [{
		name: __("1 Column", "c9-blocks"),
		key: "c9-1-col-equal",
		col: 1,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].oneEqual
	}],
	2: [{
		name: __("2 Columns - 50/50", "c9-blocks"),
		key: "c9-2-col-equal",
		col: 2,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].twoEqual
	}, {
		name: __("2 Columns - 75/25", "c9-blocks"),
		key: "c9-2-col-wideleft",
		col: 2,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].twoLeftWide
	}, {
		name: __("2 Columns - 25/75", "c9-blocks"),
		key: "c9-2-col-wideright",
		col: 2,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].twoRightWide
	}],
	3: [{
		name: __("3 Columns - 33/33/33", "c9-blocks"),
		key: "c9-3-col-equal",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].threeEqual
	}, {
		name: __("3 Columns - 25/50/25", "c9-blocks"),
		key: "c9-3-col-widecenter",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].threeWideCenter
	}, {
		name: __("3 Columns - 50/25/25", "c9-blocks"),
		key: "c9-3-col-wideleft",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].threeWideLeft
	}, {
		name: __("3 Columns - 25/25/50", "c9-blocks"),
		key: "c9-3-col-wideright",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].threeWideRight
	}],
	4: [{
		name: __("4 Columns - 25/25/25/25", "c9-blocks"),
		key: "c9-4-col-equal",
		col: 4,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].fourEqual
	}, {
		name: __("4 Columns - 40/20/20/20", "c9-blocks"),
		key: "c9-4-col-wideleft",
		col: 4,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].fourLeft
	}, {
		name: __("4 Columns - 20/20/20/40", "c9-blocks"),
		key: "c9-4-col-wideright",
		col: 4,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].fourRight
	}],
	5: [{
		name: __("5 Columns", "c9-blocks"),
		key: "c9-5-col-equal",
		col: 5,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].fiveEqual
	}],
	6: [{
		name: __("6 Columns", "c9-blocks"),
		key: "c9-6-col-equal",
		col: 6,
		icon: __WEBPACK_IMPORTED_MODULE_5__assets_c9_col_layout_icons__["a" /* default */].sixEqual
	}]
};

/***/ }),
/* 305 */
/*!*******************************************************************!*\
  !*** ./src/blocks/block-column-container/components/inspector.js ***!
  \*******************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_map__ = __webpack_require__(/*! lodash/map */ 29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_map__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__ = __webpack_require__(/*! ../../../../assets/c9-col-layout-icons */ 71);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-cond-assign */
/**
 * Internal block libraries
 */
// import CustomRadio from './custom-radio';




var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    MediaUpload = _wp$editor.MediaUpload,
    ColorPalette = _wp$editor.ColorPalette;
var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    RangeControl = _wp$components.RangeControl,
    ToggleControl = _wp$components.ToggleControl,
    SelectControl = _wp$components.SelectControl,
    IconButton = _wp$components.IconButton,
    Button = _wp$components.Button,
    FocalPointPicker = _wp$components.FocalPointPicker,
    BaseControl = _wp$components.BaseControl,
    ButtonGroup = _wp$components.ButtonGroup,
    Tooltip = _wp$components.Tooltip;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));

		_initialiseProps.call(_this);

		var _this$props = _this.props,
		    _this$props$attribute = _this$props.attributes,
		    containerPadding = _this$props$attribute.containerPadding,
		    containerMargin = _this$props$attribute.containerMargin,
		    bgCustomX = _this$props$attribute.bgCustomX,
		    bgCustomY = _this$props$attribute.bgCustomY,
		    setAttributes = _this$props.setAttributes;


		_this.setAttributes = setAttributes;

		_this.linkedPaddingRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.togglePaddingLinkage = _this.togglePaddingLinkage.bind(_this);
		_this.linkedMarginRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.toggleMarginLinkage = _this.toggleMarginLinkage.bind(_this);

		_this.state = {
			containerPadding: containerPadding,
			containerMargin: containerMargin,
			setAttributes: setAttributes,
			customX: "auto" != bgCustomX.size,
			customY: "auto" != bgCustomY.size,
			bgCustomX: bgCustomX,
			bgCustomY: bgCustomY
		};
		return _this;
	}

	_createClass(Inspector, [{
		key: "componentDidUpdate",
		value: function componentDidUpdate() {
			var preview = this.props.attributes.preview;


			this.preview = preview;
		}
	}, {
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    _props$attributes = _props.attributes,
			    containerImgURL = _props$attributes.containerImgURL,
			    containerImgID = _props$attributes.containerImgID,
			    bgImgSize = _props$attributes.bgImgSize,
			    bgImgAttach = _props$attributes.bgImgAttach,
			    bgImgRepeat = _props$attributes.bgImgRepeat,
			    overlayHue = _props$attributes.overlayHue,
			    overlayOpacity = _props$attributes.overlayOpacity,
			    blendMode = _props$attributes.blendMode,
			    containerPadding = _props$attributes.containerPadding,
			    containerMargin = _props$attributes.containerMargin,
			    columns = _props$attributes.columns,
			    minScreenHeight = _props$attributes.minScreenHeight,
			    focalPoint = _props$attributes.focalPoint,
			    columnsGap = _props$attributes.columnsGap,
			    columnMaxWidth = _props$attributes.columnMaxWidth,
			    centerColumns = _props$attributes.centerColumns,
			    responsiveToggle = _props$attributes.responsiveToggle,
			    setAttributes = _props.setAttributes;


			var selectedRows = 1;

			if (columns) {
				selectedRows = parseInt(columns.toString().split("-"));
			}

			var cssUnits = [{ value: "px", label: __("Pixel (px)", "c9-blocks") }, { value: "%", label: __("Percent (%)", "c9-blocks") }, { value: "em", label: __("Em (em)", "c9-blocks") }];

			var paddingOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Padding 0", "c9-blocks") }, { value: "1", label: __("Padding 1", "c9-blocks") }, { value: "2", label: __("Padding 2", "c9-blocks") }, { value: "3", label: __("Padding 3", "c9-blocks") }, { value: "4", label: __("Padding 4", "c9-blocks") }, { value: "5", label: __("Padding 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var marginOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Margin 0", "c9-blocks") }, { value: "1", label: __("Margin 1", "c9-blocks") }, { value: "2", label: __("Margin 2", "c9-blocks") }, { value: "3", label: __("Margin 3", "c9-blocks") }, { value: "4", label: __("Margin 4", "c9-blocks") }, { value: "5", label: __("Margin 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var sizeTypes = [{ value: "cover", label: __("Cover", "c9-blocks") }, { value: "contain", label: __("Contain", "c9-blocks") }, { value: "", label: __("Custom", "c9-blocks") }];

			var repeatTypes = [{ value: "no-repeat", label: __("no-repeat", "c9-blocks") }, { value: "repeat", label: __("repeat", "c9-blocks") }, { value: "round", label: __("round", "c9-blocks") }, { value: "space", label: __("space", "c9-blocks") }];

			var onSelectImage = function onSelectImage(img) {
				setAttributes({
					containerImgURL: img.url
				});
			};

			var onRemoveImage = function onRemoveImage() {
				setAttributes({
					containerImgURL: null,
					bgImgSize: "cover"
				});
			};

			return wp.element.createElement(
				InspectorControls,
				{ key: "inspector" },
				wp.element.createElement(
					BaseControl,
					{ className: "c9-container-base-control" },
					wp.element.createElement(RangeControl, {
						className: "c9-height-range-control",
						beforeIcon: "arrow-left-alt2",
						afterIcon: "arrow-right-alt2",
						label: __("Window Height (vh)", "c9-blocks"),
						value: minScreenHeight,
						onChange: function onChange(minScreenHeight) {
							return setAttributes({ minScreenHeight: minScreenHeight });
						},
						min: 0,
						max: 100
					})
				),
				wp.element.createElement(
					PanelBody,
					null,
					wp.element.createElement(RangeControl, {
						label: __("Columns", "c9-blocks"),
						value: columns,
						onChange: function onChange(nextColumns) {
							setAttributes({
								columns: nextColumns,
								layout: "c9-" + nextColumns + "-col-equal"
							});
						},
						min: 1,
						max: 6,
						help: __("Note: Changing the column count can cause loss of content.", "c9-blocks")
					}),
					wp.element.createElement("hr", null),
					(2 == columns || 3 == columns || 4 == columns) && wp.element.createElement(
						Fragment,
						null,
						wp.element.createElement(
							"p",
							null,
							__("Column Layout", "c9-blocks")
						),
						wp.element.createElement(
							ButtonGroup,
							{ "aria-label": __("Column Layout", "c9-blocks") },
							__WEBPACK_IMPORTED_MODULE_1_lodash_map___default()(columnLayouts[selectedRows], function (_ref) {
								var name = _ref.name,
								    key = _ref.key,
								    icon = _ref.icon;
								return wp.element.createElement(
									Tooltip,
									{ text: name, key: key },
									wp.element.createElement(
										Button,
										{
											key: key,
											className: "c9-column-selector-button",
											isSmall: true,
											onClick: function onClick() {
												setAttributes({
													layout: key
												});
												_this2.setState({ selectLayout: false });
											}
										},
										icon
									)
								);
							})
						),
						wp.element.createElement(
							"p",
							null,
							wp.element.createElement(
								"i",
								null,
								__("Change the layout of your columns.", "c9-blocks")
							)
						),
						wp.element.createElement("hr", null)
					),
					wp.element.createElement(RangeControl, {
						label: __("Column Gap", "c9-blocks"),
						help: __("Adjust the spacing between columns.", "c9-blocks"),
						value: columnsGap,
						onChange: function onChange(value) {
							return setAttributes({ columnsGap: value });
						},
						min: 0,
						max: 10,
						step: 1
					}),
					wp.element.createElement("hr", null),
					wp.element.createElement(RangeControl, {
						label: __("Column Inner Max Width (px)"),
						help: __("Adjust the width of the content inside the container wrapper.", "c9-blocks"),
						value: columnMaxWidth,
						onChange: function onChange(value) {
							return setAttributes({ columnMaxWidth: value });
						},
						min: 0,
						max: 2000,
						step: 1
					}),
					0 < columnMaxWidth && wp.element.createElement(ToggleControl, {
						label: __("Center Columns In Container", "c9-blocks"),
						help: __("Center the columns in the container when max-width is used.", "c9-blocks"),
						checked: centerColumns,
						onChange: function onChange() {
							return setAttributes({
								centerColumns: !centerColumns
							});
						}
					}),
					wp.element.createElement("hr", null),
					wp.element.createElement(ToggleControl, {
						label: __("Responsive Columns", "c9-blocks"),
						help: __("Columns will be adjusted to fit on tablets and mobile devices.", "c9-blocks"),
						checked: responsiveToggle,
						onChange: function onChange() {
							return setAttributes({
								responsiveToggle: !responsiveToggle
							});
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Spacing", "c9-blocks"), initialOpen: false },
					wp.element.createElement(
						"h5",
						{ className: "padding-label" },
						"Padding"
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						"Configure between different levels of padding for each side."
					),
					wp.element.createElement(
						"div",
						{ className: "padding-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.top,
							onChange: function onChange(value) {
								return _this2.updatePadding("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-sides-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.left,
							onChange: function onChange(value) {
								return _this2.updatePadding("left", value);
							}
						}),
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.containerPadding.icon,
							onClick: this.togglePaddingLinkage,
							ref: this.state.linkedPaddingRef
						}),
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.right,
							onChange: function onChange(value) {
								return _this2.updatePadding("right", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: containerPadding.bottom,
							onChange: function onChange(value) {
								return _this2.updatePadding("bottom", value);
							}
						})
					),
					wp.element.createElement("hr", null),
					wp.element.createElement(
						"h5",
						{ className: "margin-label" },
						"Margins"
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						"Configure between different levels of margin for top and bottom sides."
					),
					wp.element.createElement(
						"div",
						{ className: "margin-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: containerMargin.top,
							onChange: function onChange(value) {
								return _this2.updateMargin("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-sides-wrapper" },
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.containerMargin.icon,
							onClick: this.toggleMarginLinkage,
							ref: this.state.linkedMarginRef
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: containerMargin.bottom,
							onChange: function onChange(value) {
								return _this2.updateMargin("bottom", value);
							}
						})
					)
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Background", "c9-blocks"), initialOpen: false },
					wp.element.createElement(MediaUpload, {
						id: "bg-image-select",
						label: __("Background Image", "c9-blocks"),
						onSelect: onSelectImage,
						type: "image",
						value: containerImgID,
						render: function render(_ref2) {
							var open = _ref2.open;
							return wp.element.createElement(
								"div",
								null,
								wp.element.createElement(
									IconButton,
									{
										label: __("Edit image", "c9-blocks"),
										icon: "format-image",
										onClick: open
									},
									__("Background Image", "c9-blocks")
								),
								containerImgURL && !!containerImgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										IconButton,
										{
											label: __("Remove Image", "c9-blocks"),
											icon: "dismiss",
											onClick: onRemoveImage
										},
										__("Remove", "c9-blocks")
									),
									wp.element.createElement(
										"h5",
										null,
										"Position"
									),
									wp.element.createElement(FocalPointPicker, {
										label: __("Focal Point Picker", "c9-blocks"),
										url: containerImgURL,
										value: focalPoint,
										onChange: function onChange(value) {
											return setAttributes({ focalPoint: value });
										}
									})
								),
								wp.element.createElement(
									"h5",
									null,
									"Color Overlay"
								),
								wp.element.createElement(
									"span",
									null,
									"Color Palette"
								),
								wp.element.createElement(ColorPalette, {
									label: __("Overlay Color", "c9-blocks"),
									value: overlayHue,
									onChange: function onChange(overlayHue) {
										return setAttributes({ overlayHue: overlayHue });
									}
								}),
								overlayHue && !!overlayHue.length && wp.element.createElement(RangeControl, {
									beforeIcon: "arrow-left-alt2",
									afterIcon: "arrow-right-alt2",
									label: __("Opacity", "c9-blocks"),
									value: overlayOpacity,
									onChange: function onChange(overlayOpacity) {
										return setAttributes({ overlayOpacity: overlayOpacity });
									},
									min: 1,
									max: 10
								}),
								overlayHue && wp.element.createElement(SelectControl, {
									label: __("Blend Mode", "c9-blocks"),
									value: blendMode,
									options: [{ value: "overlay", label: __("Overlay", "c9-blocks") }, { value: "normal", label: __("Normal", "c9-blocks") }, {
										value: "multiply",
										label: __("Multiply", "c9-blocks")
									}, { value: "screen", label: __("Screen", "c9-blocks") }, { value: "darken", label: __("Darken", "c9-blocks") }, { value: "lighten", label: __("Lighten", "c9-blocks") }, {
										value: "color-dodge",
										label: __("Color Dodge", "c9-blocks")
									}, {
										value: "color-burn",
										label: __("Color Burn", "c9-blocks")
									}, {
										value: "hard-light",
										label: __("Hard Light", "c9-blocks")
									}, {
										value: "soft-light",
										label: __("Soft Light", "c9-blocks")
									}, {
										value: "difference",
										label: __("Difference", "c9-blocks")
									}, {
										value: "exclusion",
										label: __("Exclusion", "c9-blocks")
									}, { value: "hue", label: __("Hue", "c9-blocks") }, {
										value: "saturation",
										label: __("Saturation", "c9-blocks")
									}, { value: "color", label: __("Color", "c9-blocks") }, {
										value: "luminosity",
										label: __("Luminosity", "c9-blocks")
									}],
									onChange: function onChange(blendMode) {
										return setAttributes({ blendMode: blendMode });
									}
								}),
								wp.element.createElement("hr", null),
								containerImgURL && !!containerImgURL.length && wp.element.createElement(
									"div",
									null,
									wp.element.createElement(
										"h5",
										null,
										"Attachment"
									),
									wp.element.createElement(ToggleControl, {
										label: __("Scroll | Fixed", "c9-blocks"),
										checked: bgImgAttach,
										onChange: function onChange(bgImgAttach) {
											return setAttributes({ bgImgAttach: bgImgAttach });
										}
									}),
									wp.element.createElement("hr", null),
									wp.element.createElement(
										"div",
										null,
										wp.element.createElement(
											"h5",
											null,
											"Size"
										),
										wp.element.createElement(SelectControl, {
											help: __("Choose between cover, contain, or custom.", "c9-blocks"),
											options: sizeTypes,
											value: bgImgSize,
											onChange: function onChange(value) {
												return setAttributes({ bgImgSize: value });
											}
										}),
										!bgImgSize && wp.element.createElement(
											"div",
											null,
											wp.element.createElement(
												"h5",
												null,
												"Horizontal"
											),
											wp.element.createElement(ToggleControl, {
												label: __("Auto | Manual", "c9-blocks"),
												checked: _this2.state.customX,
												onChange: function onChange(value) {
													_this2.setState({ customX: value });

													if (value) {
														_this2.updateBgX("unit", "%");
														_this2.updateBgX("size", 100);
													} else {
														_this2.updateBgX("size", "auto");
													}
												}
											}),
											_this2.state.customX && wp.element.createElement(
												"div",
												{ style: { display: "flex" } },
												wp.element.createElement(RangeControl, {
													value: _this2.state.bgCustomX.size,
													onChange: function onChange(value) {
														return _this2.updateBgX("size", value);
													},
													className: "bgSize",
													min: 0,
													max: Number.MAX_SAFE_INTEGER
												}),
												wp.element.createElement(SelectControl, {
													options: cssUnits,
													value: _this2.state.bgCustomX.unit,
													onChange: function onChange(value) {
														return _this2.updateBgX("unit", value);
													},
													className: "bgSize"
												})
											),
											wp.element.createElement(
												"h5",
												null,
												"Vertical"
											),
											wp.element.createElement(ToggleControl, {
												label: __("Auto | Manual", "c9-blocks"),
												checked: _this2.state.customY,
												onChange: function onChange(value) {
													_this2.setState({ customY: value });

													if (value) {
														_this2.updateBgY("unit", "%");
														_this2.updateBgY("size", 100);
													} else {
														_this2.updateBgY("size", "auto");
													}
												}
											}),
											_this2.state.customY && wp.element.createElement(
												"div",
												{ style: { display: "flex" } },
												wp.element.createElement(RangeControl, {
													value: _this2.state.bgCustomY.size,
													onChange: function onChange(value) {
														return _this2.updateBgY("size", value);
													},
													className: "bgSize",
													min: 0,
													max: Number.MAX_SAFE_INTEGER
												}),
												wp.element.createElement(SelectControl, {
													options: cssUnits,
													value: _this2.state.bgCustomY.unit,
													onChange: function onChange(value) {
														return _this2.updateBgY("unit", value);
													},
													className: "bgSize"
												})
											)
										),
										wp.element.createElement("hr", null),
										wp.element.createElement(
											"h5",
											null,
											"Repeat"
										),
										wp.element.createElement(SelectControl, {
											help: __("Choose between no-repeat, repeat, round or space.", "c9-blocks"),
											options: repeatTypes,
											value: bgImgRepeat,
											onChange: function onChange(value) {
												return setAttributes({ bgImgRepeat: value });
											}
										})
									)
								)
							);
						}
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.updateBgX = function (position, value) {
		var sizeObject = Object.assign({}, _this3.state.bgCustomX);

		sizeObject[position] = value;
		_this3.setState({ bgCustomX: sizeObject });
		_this3.setAttributes({ bgCustomX: sizeObject });
	};

	this.updateBgY = function (position, value) {
		var sizeObject = Object.assign({}, _this3.state.bgCustomY);

		sizeObject[position] = value;
		_this3.setState({ bgCustomY: sizeObject });
		_this3.setAttributes({ bgCustomY: sizeObject });
	};

	this.togglePaddingLinkage = function () {
		var containerPadding = _this3.props.attributes.containerPadding;


		containerPadding = Object.assign({}, containerPadding);
		containerPadding.linked = !containerPadding.linked;
		containerPadding.icon = containerPadding.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ containerPadding: containerPadding });
		_this3.setAttributes({ containerPadding: containerPadding });
	};

	this.setPaddingUnit = function (value) {
		var containerPadding = _this3.props.attributes.containerPadding;


		var spacingObject = Object.assign({}, containerPadding);
		spacingObject.unit = value;
		_this3.setState({ containerPadding: spacingObject });
		_this3.setAttributes({ containerPadding: spacingObject });
	};

	this.updatePadding = function (position, value) {
		if (_this3.state.containerPadding.linked) {
			var spacingObject = {
				linked: _this3.state.containerPadding.linked,
				unit: _this3.state.containerPadding.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.containerPadding.icon
			};
			_this3.setState({ containerPadding: spacingObject });
			_this3.setAttributes({ containerPadding: spacingObject });
		} else {
			var _spacingObject = Object.assign({}, _this3.state.containerPadding);
			_spacingObject[position] = value;
			_this3.setState({ containerPadding: _spacingObject });
			_this3.setAttributes({ containerPadding: _spacingObject });
		}
	};

	this.toggleMarginLinkage = function () {
		var containerMargin = _this3.props.attributes.containerMargin;


		containerMargin = Object.assign({}, containerMargin);
		containerMargin.linked = !containerMargin.linked;
		containerMargin.icon = containerMargin.linked ? "admin-links" : "editor-unlink";
		_this3.setState({ containerMargin: containerMargin });
		_this3.setAttributes({ containerMargin: containerMargin });
	};

	this.setMarginUnit = function (value) {
		var containerMargin = _this3.props.attributes.containerMargin;


		var spacingObject = Object.assign({}, containerMargin);
		spacingObject.unit = value;
		_this3.setState({ containerMargin: spacingObject });
		_this3.setAttributes({ containerMargin: spacingObject });
	};

	this.updateMargin = function (position, value) {
		if (_this3.state.containerMargin.linked) {
			var spacingObject = {
				linked: _this3.state.containerMargin.linked,
				unit: _this3.state.containerMargin.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this3.state.containerMargin.icon
			};
			_this3.setState({ containerMargin: spacingObject });
			_this3.setAttributes({ containerMargin: spacingObject });
		} else {
			var _spacingObject2 = Object.assign({}, _this3.state.containerMargin);
			_spacingObject2[position] = value;
			_this3.setState({ containerMargin: _spacingObject2 });
			_this3.setAttributes({ containerMargin: _spacingObject2 });
		}
	};

	this.updateID = function (value) {
		_this3.setState({ ID: value });
	};

	this.submitID = function () {
		// parse submitted item, check if valid id
		var checkURL = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|&v(?:i)?=))([^#&?]*).*/;
		var checkAlphaNumeric = /^[a-zA-Z0-9-_]+$/;
		var result = void 0;

		if (result = _this3.state.ID.match(checkURL)) {
			_this3.setAttributes({ containerVideoID: result[1], cannotEmbed: false });
			_this3.setState({ ID: result[1] });
		} else if (result = _this3.state.ID.match(checkAlphaNumeric)) {
			_this3.setAttributes({ containerVideoID: result[0], cannotEmbed: false });
			_this3.setState({ ID: result[0] });
		} else {
			if (_this3.preview && _this3.preview.i) {
				_this3.preview.destroy();
			}
			_this3.setAttributes({ cannotEmbed: true });
		}

		// check if player exists
		if (_this3.preview && _this3.preview.i) {
			_this3.preview.loadVideoById(_this3.state.ID);
		}
	};

	this.resetID = function () {
		_this3.setState({ ID: "" });
		if (_this3.preview && _this3.preview.i) {
			_this3.preview.destroy();
			_this3.setAttributes({
				containerVideoID: "",
				cannotEmbed: false,
				preview: _this3.preview
			});
		}
	};
};

/* harmony default export */ __webpack_exports__["a"] = (Inspector);


var columnLayouts = {
	1: [{
		name: __("1 Column", "c9-blocks"),
		key: "c9-1-col-equal",
		col: 1,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].oneEqual
	}],
	2: [{
		name: __("2 Columns - 50/50", "c9-blocks"),
		key: "c9-2-col-equal",
		col: 2,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].twoEqual
	}, {
		name: __("2 Columns - 75/25", "c9-blocks"),
		key: "c9-2-col-wideleft",
		col: 2,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].twoLeftWide
	}, {
		name: __("2 Columns - 25/75", "c9-blocks"),
		key: "c9-2-col-wideright",
		col: 2,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].twoRightWide
	}],
	3: [{
		name: __("3 Columns - 33/33/33", "c9-blocks"),
		key: "c9-3-col-equal",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].threeEqual
	}, {
		name: __("3 Columns - 25/50/25", "c9-blocks"),
		key: "c9-3-col-widecenter",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].threeWideCenter
	}, {
		name: __("3 Columns - 50/25/25", "c9-blocks"),
		key: "c9-3-col-wideleft",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].threeWideLeft
	}, {
		name: __("3 Columns - 25/25/50", "c9-blocks"),
		key: "c9-3-col-wideright",
		col: 3,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].threeWideRight
	}],
	4: [{
		name: __("4 Columns - 25/25/25/25", "c9-blocks"),
		key: "c9-4-col-equal",
		col: 4,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].fourEqual
	}, {
		name: __("4 Columns - 40/20/20/20", "c9-blocks"),
		key: "c9-4-col-wideleft",
		col: 4,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].fourLeft
	}, {
		name: __("4 Columns - 20/20/20/40", "c9-blocks"),
		key: "c9-4-col-wideright",
		col: 4,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].fourRight
	}],
	5: [{
		name: __("5 Columns", "c9-blocks"),
		key: "c9-5-col-equal",
		col: 5,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].fiveEqual
	}],
	6: [{
		name: __("6 Columns", "c9-blocks"),
		key: "c9-6-col-equal",
		col: 6,
		icon: __WEBPACK_IMPORTED_MODULE_2__assets_c9_col_layout_icons__["a" /* default */].sixEqual
	}]
};

/***/ }),
/* 306 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseMatches.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ 307),
    getMatchData = __webpack_require__(/*! ./_getMatchData */ 359),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ 69);

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),
/* 307 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsMatch.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ 53),
    baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ 56);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),
/* 308 */
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),
/* 309 */
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 18);

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),
/* 310 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 18);

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),
/* 311 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 18);

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),
/* 312 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ 18);

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),
/* 313 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ 17);

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),
/* 314 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),
/* 315 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),
/* 316 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),
/* 317 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ 17),
    Map = __webpack_require__(/*! ./_Map */ 31),
    MapCache = __webpack_require__(/*! ./_MapCache */ 32);

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),
/* 318 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ 54),
    isMasked = __webpack_require__(/*! ./_isMasked */ 319),
    isObject = __webpack_require__(/*! ./isObject */ 9),
    toSource = __webpack_require__(/*! ./_toSource */ 55);

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),
/* 319 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ 320);

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),
/* 320 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ 3);

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),
/* 321 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),
/* 322 */
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(/*! ./_Hash */ 323),
    ListCache = __webpack_require__(/*! ./_ListCache */ 17),
    Map = __webpack_require__(/*! ./_Map */ 31);

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),
/* 323 */
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(/*! ./_hashClear */ 324),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ 325),
    hashGet = __webpack_require__(/*! ./_hashGet */ 326),
    hashHas = __webpack_require__(/*! ./_hashHas */ 327),
    hashSet = __webpack_require__(/*! ./_hashSet */ 328);

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),
/* 324 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 19);

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),
/* 325 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),
/* 326 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 19);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),
/* 327 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 19);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),
/* 328 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ 19);

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),
/* 329 */
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ 20);

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),
/* 330 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),
/* 331 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ 20);

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),
/* 332 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ 20);

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),
/* 333 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ 20);

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),
/* 334 */
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ 53),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ 57),
    equalByTag = __webpack_require__(/*! ./_equalByTag */ 340),
    equalObjects = __webpack_require__(/*! ./_equalObjects */ 344),
    getTag = __webpack_require__(/*! ./_getTag */ 354),
    isArray = __webpack_require__(/*! ./isArray */ 4),
    isBuffer = __webpack_require__(/*! ./isBuffer */ 64),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ 65);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),
/* 335 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ 32),
    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ 336),
    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ 337);

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),
/* 336 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),
/* 337 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),
/* 338 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),
/* 339 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),
/* 340 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ 5),
    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ 341),
    eq = __webpack_require__(/*! ./eq */ 30),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ 57),
    mapToArray = __webpack_require__(/*! ./_mapToArray */ 342),
    setToArray = __webpack_require__(/*! ./_setToArray */ 343);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),
/* 341 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ 3);

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),
/* 342 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),
/* 343 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),
/* 344 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ 345);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),
/* 345 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ 58),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ 60),
    keys = __webpack_require__(/*! ./keys */ 33);

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),
/* 346 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),
/* 347 */
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ 6),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 7);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),
/* 348 */
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),
/* 349 */
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ 6),
    isLength = __webpack_require__(/*! ./isLength */ 36),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ 7);

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),
/* 350 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),
/* 351 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ 15);

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../webpack/buildin/module.js */ 34)(module)))

/***/ }),
/* 352 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ 66),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ 353);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),
/* 353 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ 67);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),
/* 354 */
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(/*! ./_DataView */ 355),
    Map = __webpack_require__(/*! ./_Map */ 31),
    Promise = __webpack_require__(/*! ./_Promise */ 356),
    Set = __webpack_require__(/*! ./_Set */ 357),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ 358),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ 6),
    toSource = __webpack_require__(/*! ./_toSource */ 55);

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),
/* 355 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ 8),
    root = __webpack_require__(/*! ./_root */ 3);

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),
/* 356 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ 8),
    root = __webpack_require__(/*! ./_root */ 3);

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),
/* 357 */
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ 8),
    root = __webpack_require__(/*! ./_root */ 3);

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),
/* 358 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ 8),
    root = __webpack_require__(/*! ./_root */ 3);

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),
/* 359 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getMatchData.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ 68),
    keys = __webpack_require__(/*! ./keys */ 33);

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),
/* 360 */
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_baseMatchesProperty.js ***!
  \*****************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ 56),
    get = __webpack_require__(/*! ./get */ 70),
    hasIn = __webpack_require__(/*! ./hasIn */ 364),
    isKey = __webpack_require__(/*! ./_isKey */ 38),
    isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ 68),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ 69),
    toKey = __webpack_require__(/*! ./_toKey */ 13);

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),
/* 361 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ 362);

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),
/* 362 */
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(/*! ./memoize */ 363);

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),
/* 363 */
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ 32);

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),
/* 364 */
/*!**************************************!*\
  !*** ./node_modules/lodash/hasIn.js ***!
  \**************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ 365),
    hasPath = __webpack_require__(/*! ./_hasPath */ 366);

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),
/* 365 */
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseHasIn.js ***!
  \*******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),
/* 366 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hasPath.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ 22),
    isArguments = __webpack_require__(/*! ./isArguments */ 63),
    isArray = __webpack_require__(/*! ./isArray */ 4),
    isIndex = __webpack_require__(/*! ./_isIndex */ 35),
    isLength = __webpack_require__(/*! ./isLength */ 36),
    toKey = __webpack_require__(/*! ./_toKey */ 13);

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),
/* 367 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/property.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ 368),
    basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ 369),
    isKey = __webpack_require__(/*! ./_isKey */ 38),
    toKey = __webpack_require__(/*! ./_toKey */ 13);

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),
/* 368 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseProperty.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),
/* 369 */
/*!**************************************************!*\
  !*** ./node_modules/lodash/_basePropertyDeep.js ***!
  \**************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ 37);

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),
/* 370 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(/*! ./_baseEach */ 371),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ 21);

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;


/***/ }),
/* 371 */
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseEach.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ 372),
    createBaseEach = __webpack_require__(/*! ./_createBaseEach */ 375);

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),
/* 372 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(/*! ./_baseFor */ 373),
    keys = __webpack_require__(/*! ./keys */ 33);

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),
/* 373 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ 374);

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),
/* 374 */
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),
/* 375 */
/*!************************************************!*\
  !*** ./node_modules/lodash/_createBaseEach.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ 21);

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),
/* 376 */
/*!***********************************************************************!*\
  !*** ./src/blocks/block-column-container/components/width-toolbar.js ***!
  \***********************************************************************/
/*! exports provided: WidthToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export WidthToolbar */
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;


var DEFAULT_WIDTH_CONTROLS = [{
	icon: "align-center",
	title: __("Narrow Width", "c9-blocks"),
	width: "narrow"
}, {
	icon: "align-wide",
	title: __("Wide Width", "c9-blocks"),
	width: "wide"
}, {
	icon: "align-full-width",
	title: __("Full Width", "c9-blocks"),
	width: "full"
}];

function WidthToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$widthControls = _ref.widthControls,
	    widthControls = _ref$widthControls === undefined ? DEFAULT_WIDTH_CONTROLS : _ref$widthControls;

	function applyOrUnset(width) {
		return function () {
			return onChange(value === width ? undefined : width);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Change Widths", "c9-blocks"),
		controls: widthControls.map(function (control) {
			var width = control.width;

			var isActive = value === width;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(width)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (WidthToolbar);

/***/ }),
/* 377 */
/*!***************************************************!*\
  !*** ./src/blocks/block-column-container/save.js ***!
  \***************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_container__ = __webpack_require__(/*! ./components/container */ 72);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * External dependencies
 */


/**
 * Internal dependencies
 */


/**
 * WordPress dependencies
 */
var Component = wp.element.Component;
var InnerBlocks = wp.editor.InnerBlocks;

var Save = function (_Component) {
	_inherits(Save, _Component);

	function Save() {
		_classCallCheck(this, Save);

		return _possibleConstructorReturn(this, (Save.__proto__ || Object.getPrototypeOf(Save)).apply(this, arguments));
	}

	_createClass(Save, [{
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    columnsGap = _props$attributes.columnsGap,
			    responsiveToggle = _props$attributes.responsiveToggle,
			    columnMaxWidth = _props$attributes.columnMaxWidth;


			return wp.element.createElement(
				__WEBPACK_IMPORTED_MODULE_1__components_container__["a" /* default */],
				_extends({}, this.props, { save: true }),
				wp.element.createElement(
					"div",
					{
						className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-layout-column-wrap", "c9-block-layout-column-gap-" + columnsGap, responsiveToggle ? "c9-is-responsive-column" : null),
						style: {
							maxWidth: columnMaxWidth ? columnMaxWidth : null
						}
					},
					wp.element.createElement(InnerBlocks.Content, null)
				)
			);
		}
	}]);

	return Save;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Save);

/***/ }),
/* 378 */
/*!*********************************************************!*\
  !*** ./src/blocks/block-column-container/attributes.js ***!
  \*********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var attributes = {
	align: {
		type: "string",
		default: ""
	},
	columns: {
		type: "number"
	},
	columnMaxWidth: {
		type: "number"
	},
	centerColumns: {
		type: "boolean",
		default: true
	},
	columnsGap: {
		type: "number",
		default: 2
	},
	responsiveToggle: {
		type: "boolean",
		default: true
	},
	layout: {
		type: "string"
	},
	containerWidth: {
		type: "string",
		default: "container"
	},
	verticalAlign: {
		type: "string"
	},
	containerImgURL: {
		type: "string"
	},
	bgImgSize: {
		type: "string",
		default: "cover"
	},
	bgCustomX: {
		type: "object",
		default: {
			size: "auto",
			unit: "px"
		}
	},
	bgCustomY: {
		type: "object",
		default: {
			size: "auto",
			unit: "px"
		}
	},
	bgImgRepeat: {
		type: "string",
		default: "no-repeat"
	},
	// true evaluates to backgroundAttachment scroll, false to fixed
	bgImgAttach: {
		type: "boolean",
		default: false
	},
	overlayHue: {
		type: "string",
		default: undefined
	},
	overlayOpacity: {
		type: "number",
		default: "5"
	},
	blendMode: {
		type: "string",
		default: "overlay"
	},
	linkedValToggle: {
		type: "boolean",
		default: true
	},
	minScreenHeight: {
		type: "number",
		default: 0
	},
	containerMargin: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			top: "-1",
			bottom: "-1"
		}
	},
	containerPadding: {
		type: "object",
		default: {
			linked: true,
			icon: "admin-links",
			top: "-1",
			bottom: "-1",
			left: "-1",
			right: "-1"
		}
	},
	containerHue: {
		type: "string",
		default: undefined
	},
	containerOpacity: {
		type: "number",
		default: 10
	},
	focalPoint: {
		type: "object",
		default: {
			x: 0.5,
			y: 0.5
		}
	}
};

/* harmony default export */ __webpack_exports__["a"] = (attributes);

/***/ }),
/* 379 */
/*!*************************************************************!*\
  !*** ./src/blocks/block-column-container/styles/style.scss ***!
  \*************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 380 */
/*!**************************************************************!*\
  !*** ./src/blocks/block-column-container/styles/editor.scss ***!
  \**************************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 381 */
/*!****************************************************************!*\
  !*** ./src/blocks/block-column-container/components/column.js ***!
  \****************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__vertical_align_toolbar__ = __webpack_require__(/*! ./vertical-align-toolbar */ 73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * WordPress dependencies
 */
var _wp$components = wp.components,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG;
var __ = wp.i18n.__;
var InnerBlocks = wp.editor.InnerBlocks;
var _wp$blocks = wp.blocks,
    registerBlockType = _wp$blocks.registerBlockType,
    getBlockTypes = _wp$blocks.getBlockTypes;

// Register editor components

var _wp$editor = wp.editor,
    AlignmentToolbar = _wp$editor.AlignmentToolbar,
    BlockControls = _wp$editor.BlockControls;

// Extend component

var Fragment = wp.element.Fragment;
var compose = wp.compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;





var Edit = function Edit(props) {
	var _props$attributes = props.attributes,
	    textAlign = _props$attributes.textAlign,
	    verticalAlign = _props$attributes.verticalAlign,
	    setAttributes = props.setAttributes,
	    className = props.className,
	    block = props.block,
	    updateBlockAttributes = props.updateBlockAttributes;


	var ALLOWED_BLOCKS = getBlockTypes().map(function (block) {
		return block.name;
	}).filter(function (name) {
		return "c9-blocks/grid" != name && "c9-blocks/column-container" != name;
	});

	var disableToolbarTraversal = function disableToolbarTraversal(root) {
		if (root) {
			if (("c9-blocks/cta" === root.name || "c9-blocks/post-grid" === root.name) && !root.attributes.disableToolbar) {
				updateBlockAttributes(root.clientId, { disableToolbar: true });
			}
			// eslint-disable-next-line no-unused-vars
			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = root.innerBlocks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var child = _step.value;

					disableToolbarTraversal(child);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}
	};

	// perform traversal only on children
	// eslint-disable-next-line no-unused-vars
	disableToolbarTraversal(block);

	return wp.element.createElement(
		Fragment,
		null,
		wp.element.createElement(
			BlockControls,
			null,
			wp.element.createElement(AlignmentToolbar, {
				value: textAlign,
				onChange: function onChange(value) {
					return setAttributes({ textAlign: value });
				}
			}),
			wp.element.createElement(__WEBPACK_IMPORTED_MODULE_0__vertical_align_toolbar__["a" /* default */], {
				value: verticalAlign,
				onChange: function onChange(value) {
					setAttributes({ verticalAlign: value });
				}
			})
		),
		wp.element.createElement(
			"div",
			{
				className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()(className, "c9-block-layout-column", "c9-column", textAlign ? "text-" + textAlign : null, verticalAlign ? "c9-is-vertically-aligned-" + verticalAlign : null)
			},
			wp.element.createElement(
				"div",
				{ className: "c9-column-innner" },
				wp.element.createElement(InnerBlocks, {
					allowedBlocks: ALLOWED_BLOCKS,
					template: [["core/paragraph"]],
					templateLock: false
				})
			)
		)
	);
};

registerBlockType("c9-blocks/column", {
	title: __("Column", "c9-blocks"),

	category: "common",

	parent: ["c9-blocks/column-container"],

	icon: wp.element.createElement(
		SVG,
		{ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24" },
		wp.element.createElement(Path, { fill: "none", d: "M0 0h24v24H0V0z" }),
		wp.element.createElement(Path, { d: "M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16zm0-11.47L17.74 9 12 13.47 6.26 9 12 4.53z" })
	),

	supports: {
		inserter: false,
		className: false
	},

	attributes: {
		textAlign: {
			type: "string",
			default: "left"
		},
		verticalAlign: {
			type: "string"
		}
	},

	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    getBlock = _select.getBlock,
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			block: getBlock(clientId),
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true)
		};
	}), withDispatch(function (dispatch) {
		var _dispatch = dispatch("core/editor"),
		    updateBlockAttributes = _dispatch.updateBlockAttributes,
		    removeBlock = _dispatch.removeBlock;

		return {
			updateBlockAttributes: updateBlockAttributes,
			removeBlock: removeBlock
		};
	})])(Edit),

	save: function save(props) {
		var _props$attributes2 = props.attributes,
		    textAlign = _props$attributes2.textAlign,
		    verticalAlign = _props$attributes2.verticalAlign;


		return wp.element.createElement(
			"div",
			{
				className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()("c9-block-layout-column", "c9-column", textAlign ? "text-" + textAlign : null, verticalAlign ? "c9-is-vertically-aligned-" + verticalAlign : null)
			},
			wp.element.createElement(
				"div",
				{ className: "c9-column-innner" },
				wp.element.createElement(InnerBlocks.Content, null)
			)
		);
	}
});

/* Add the vertical column alignment class to the block wrapper. */
var withClientIdClassName = wp.compose.createHigherOrderComponent(function (BlockListBlock) {
	return function (props) {
		var blockName = props.block.name;

		if ("c9-blocks/column" === blockName) {
			return wp.element.createElement(BlockListBlock, _extends({}, props, {
				className: props.attributes.verticalAlign ? "c9-is-vertically-aligned-" + props.attributes.verticalAlign : "c9-is-vertically-aligned-top"
			}));
		} else {
			return wp.element.createElement(BlockListBlock, props);
		}
	};
}, "withClientIdClassName");

wp.hooks.addFilter("editor.BlockListBlock", "c9-blocks/add-vertical-align-class", withClientIdClassName);

/***/ }),
/* 382 */
/*!***********************************************************************!*\
  !*** ./src/blocks/block-horizontal-tabs/components/horizontal-tab.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Tab Wrapper
 */

// Setup the block
var Component = wp.element.Component;
var _wp$components = wp.components,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG;
var __ = wp.i18n.__;
var InnerBlocks = wp.editor.InnerBlocks;
var registerBlockType = wp.blocks.registerBlockType;

// Import block dependencies and components



/**
 * Create a Tab wrapper Component
 */

var Tab = function (_Component) {
	_inherits(Tab, _Component);

	function Tab() {
		_classCallCheck(this, Tab);

		return _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).apply(this, arguments));
	}

	_createClass(Tab, [{
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    tabActive = _props$attributes.tabActive,
			    slug = _props$attributes.slug,
			    id = _props$attributes.id;
			// eslint-disable-next-line no-unused-vars

			var _props$className = this.props.className,
			    className = _props$className === undefined ? "" : _props$className;


			className = __WEBPACK_IMPORTED_MODULE_0_classnames___default()(className, "c9-horizontal-tabs-tab", "tab-pane fade", tabActive === slug ? "show active" : null);

			return wp.element.createElement(
				"div",
				{
					className: className,
					role: "tabpanel",
					id: "tab-" + slug + "-" + id,
					"aria-labelledby": slug
				},
				wp.element.createElement(InnerBlocks, {
					templateLock: false,
					templateInsertUpdatesSelection: false
				})
			);
		}
	}]);

	return Tab;
}(Component);

/* unused harmony default export */ var _unused_webpack_default_export = (Tab);


registerBlockType("c9-blocks/horizontal-tabs-tab", {
	title: __("C9 Horizontal Tab", "c9-blocks"),

	category: "common",

	parent: ["c9-blocks/horizontal-tabs"],

	icon: wp.element.createElement(
		SVG,
		{ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24" },
		wp.element.createElement(Path, { fill: "none", d: "M0 0h24v24H0V0z" }),
		wp.element.createElement(Path, { d: "M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16zm0-11.47L17.74 9 12 13.47 6.26 9 12 4.53z" })
	),

	supports: {
		inserter: false,
		className: false
	},

	attributes: {
		slug: {
			type: "string"
		},
		tabActive: {
			type: "string"
		},
		id: {
			type: "number"
		}
	},

	edit: Tab,

	getEditWrapperProps: function getEditWrapperProps(attributes) {
		return { "data-tab": attributes.slug };
	},


	save: function save(props) {
		var _props$attributes2 = props.attributes,
		    slug = _props$attributes2.slug,
		    tabActive = _props$attributes2.tabActive,
		    id = _props$attributes2.id;
		var _props$className2 = props.className,
		    className = _props$className2 === undefined ? "" : _props$className2;


		className = __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-horizontal-tabs-tab", "tab-pane fade", tabActive === slug ? "show active" : null);

		return wp.element.createElement(
			"div",
			{
				className: className,
				role: "tabpanel",
				id: "tab-" + slug + "-" + id,
				"aria-labelledby": slug
			},
			wp.element.createElement(InnerBlocks.Content, null)
		);
	}
});

/***/ }),
/* 383 */
/*!*******************************************************************!*\
  !*** ./src/blocks/block-vertical-tabs/components/vertical-tab.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Tab Wrapper
 */

// Setup the block
var Component = wp.element.Component;
var _wp$components = wp.components,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG;
var __ = wp.i18n.__;
var InnerBlocks = wp.editor.InnerBlocks;
var registerBlockType = wp.blocks.registerBlockType;

// Import block dependencies and components



/**
 * Create a Vertical Tab wrapper Component
 */

var VerticalTab = function (_Component) {
	_inherits(VerticalTab, _Component);

	function VerticalTab() {
		_classCallCheck(this, VerticalTab);

		return _possibleConstructorReturn(this, (VerticalTab.__proto__ || Object.getPrototypeOf(VerticalTab)).apply(this, arguments));
	}

	_createClass(VerticalTab, [{
		key: "render",
		value: function render() {
			var _props$attributes = this.props.attributes,
			    tabActive = _props$attributes.tabActive,
			    slug = _props$attributes.slug,
			    id = _props$attributes.id;
			// eslint-disable-next-line no-unused-vars

			var _props$className = this.props.className,
			    className = _props$className === undefined ? "" : _props$className;


			className = __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-vertical-tabs-tab", "tab-pane fade", tabActive === slug ? "show active" : null);

			return wp.element.createElement(
				"div",
				{
					className: className,
					role: "tabpanel",
					id: "tab-" + slug + "-" + id,
					"aria-labelledby": slug
				},
				wp.element.createElement(InnerBlocks, {
					templateLock: false,
					templateInsertUpdatesSelection: false
				})
			);
		}
	}]);

	return VerticalTab;
}(Component);

/* unused harmony default export */ var _unused_webpack_default_export = (VerticalTab);


registerBlockType("c9-blocks/vertical-tabs-tab", {
	title: __("Vertical Tab", "c9-blocks"),

	category: "common",

	parent: ["c9-blocks/vertical-tabs"],

	icon: wp.element.createElement(
		SVG,
		{ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24" },
		wp.element.createElement(Path, { fill: "none", d: "M0 0h24v24H0V0z" }),
		wp.element.createElement(Path, { d: "M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16zm0-11.47L17.74 9 12 13.47 6.26 9 12 4.53z" })
	),

	supports: {
		inserter: false,
		className: false
	},

	attributes: {
		slug: {
			type: "string"
		},
		tabActive: {
			type: "string"
		},
		id: {
			type: "number"
		}
	},

	edit: VerticalTab,

	getEditWrapperProps: function getEditWrapperProps(attributes) {
		return { "data-tab": attributes.slug };
	},


	save: function save(props) {
		var _props$attributes2 = props.attributes,
		    slug = _props$attributes2.slug,
		    tabActive = _props$attributes2.tabActive,
		    id = _props$attributes2.id;
		var _props$className2 = props.className,
		    className = _props$className2 === undefined ? "" : _props$className2;


		className = __WEBPACK_IMPORTED_MODULE_0_classnames___default()("c9-vertical-tabs-tab", "tab-pane fade", tabActive === slug ? "show active" : null);

		return wp.element.createElement(
			"div",
			{
				className: className,
				role: "tabpanel",
				id: "tab-" + slug + "-" + id,
				"aria-labelledby": slug
			},
			wp.element.createElement(InnerBlocks.Content, null)
		);
	}
});

/***/ }),
/* 384 */
/*!*******************************************************!*\
  !*** ./src/blocks/block-toggles/components/toggle.js ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__remove_button__ = __webpack_require__(/*! ./remove-button */ 385);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__assets_toggle_open__ = __webpack_require__(/*! ../../../../assets/toggle-open */ 386);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-static-element-interactions */
// External Dependencies.



// Internal Dependencies.



var __ = wp.i18n.__;
var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var Toolbar = wp.components.Toolbar;
var registerBlockType = wp.blocks.registerBlockType;
var _wp$editor = wp.editor,
    BlockControls = _wp$editor.BlockControls,
    InnerBlocks = _wp$editor.InnerBlocks,
    RichText = _wp$editor.RichText;
var compose = wp.compose.compose;
var _wp$data = wp.data,
    withSelect = _wp$data.withSelect,
    withDispatch = _wp$data.withDispatch;

var ToggleBlock = function (_Component) {
	_inherits(ToggleBlock, _Component);

	function ToggleBlock() {
		_classCallCheck(this, ToggleBlock);

		var _this = _possibleConstructorReturn(this, (ToggleBlock.__proto__ || Object.getPrototypeOf(ToggleBlock)).apply(this, arguments));

		_this.toggleBtnRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.toggleDisplayRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		return _this;
	}

	_createClass(ToggleBlock, [{
		key: "componentWillUnmount",
		value: function componentWillUnmount() {
			var clientId = this.props.clientId;

			var $ = window.jQuery;

			var id = $("div[data-block=\"" + clientId + "\"] .c9-toggles-toggle .c9-toggles-item-content.collapse").attr("id");

			// remove each hook from collapse and expand event
			$("#" + id).off("show.bs.collapse", "**");
			$("#" + id).off("hide.bs.collapse", "**");

			var parentToggle = this.getParentToggle(this.props.rootBlock);
			if (parentToggle && parentToggle.clientId) {
				if (1 >= parentToggle.innerBlocks.length) {
					this.props.removeBlock(parentToggle.clientId);
				}
			}
		}
	}, {
		key: "getParentToggle",
		value: function getParentToggle(rootBlock) {
			var _this2 = this;

			var block = this.props.block;


			var result = false;

			if (rootBlock.innerBlocks && rootBlock.innerBlocks.length) {
				rootBlock.innerBlocks.forEach(function (item) {
					if (!result && item.clientId === block.clientId) {
						result = rootBlock;
					} else if (!result) {
						result = _this2.getParentToggle(item);
					}
				});
			}

			return result;
		}
	}, {
		key: "render",
		value: function render() {
			var _this3 = this;

			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes,
			    isSelected = _props.isSelected,
			    isSelectedBlockInRoot = _props.isSelectedBlockInRoot,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className;
			var heading = attributes.heading,
			    active = attributes.active;


			if (!isSelectedBlockInRoot && null != this.toggleDisplayRef.current && !this.toggleDisplayRef.current.className.includes("show")) {
				setAttributes({
					active: false
				});
			}

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(
					BlockControls,
					null,
					wp.element.createElement(Toolbar, {
						controls: [{
							icon: __WEBPACK_IMPORTED_MODULE_3__assets_toggle_open__["a" /* default */],
							title: __("Collapse"),
							onClick: function onClick() {
								_this3.toggleBtnRef.current.click();
								var element = _this3.toggleDisplayRef.current;
								if (element) {
									setTimeout(function () {
										setAttributes({
											active: element.className.includes("show")
										});
									}, 350);
								}
							},
							isActive: active
						}]
					})
				),
				wp.element.createElement(
					"div",
					{ className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()("c9-toggles-toggle", className) },
					wp.element.createElement(
						"div",
						{
							className: "c9-toggles-item-heading",
							id: "c9-toggles-heading" + attributes.toggleNumber + "-" + attributes.id
						},
						wp.element.createElement(
							"div",
							{ className: "mb-0" },
							wp.element.createElement(RichText, {
								tagName: "span",
								className: "c9-toggles-toggle-label",
								placeholder: __("Collapsible Group Item…"),
								value: heading,
								onChange: function onChange(value) {
									setAttributes({ heading: value });
								},
								formattingControls: ["bold", "italic", "strikethrough"],
								isSelected: isSelected,
								keepPlaceholderOnFocus: true
							}),
							wp.element.createElement(
								"button",
								{
									className: "c9-toggles-item-collapse",
									onClick: function onClick() {
										var element = _this3.toggleDisplayRef;
										if (element) {
											setTimeout(function () {
												setAttributes({
													active: element.current.className.includes("show")
												});
											}, 350);
										}
									},
									ref: this.toggleBtnRef,
									"data-toggle": "collapse",
									"data-target": "#c9-toggles-collapse" + attributes.toggleNumber + "-" + attributes.id
								},
								wp.element.createElement("span", { className: "fas fa-angle-right" })
							),
							wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__remove_button__["a" /* default */], {
								show: isSelectedBlockInRoot,
								tooltipText: __("Remove toggle item?"),
								onRemove: function onRemove() {
									var parentToggle = _this3.getParentToggle(_this3.props.rootBlock);
									if (parentToggle && parentToggle.clientId) {
										_this3.props.removeBlock(_this3.props.clientId);

										if (1 >= parentToggle.innerBlocks.length) {
											_this3.props.removeBlock(parentToggle.clientId);
										}
									}
								},
								style: {
									top: "10px"
								}
							})
						)
					),
					wp.element.createElement(
						"div",
						{
							className: "c9-toggles-item-content collapse",
							ref: this.toggleDisplayRef,
							id: "c9-toggles-collapse" + attributes.toggleNumber + "-" + attributes.id,
							"data-parent": "#accordion-" + attributes.id
						},
						wp.element.createElement(InnerBlocks, { templateLock: false })
					)
				)
			);
		}
	}]);

	return ToggleBlock;
}(Component);

registerBlockType("c9-blocks/toggles-toggle", {
	title: __("C9 Toggle Item"),
	parent: ["c9-blocks/toggles"],
	icon: "minus",
	category: "common",
	supports: {
		inserter: false,
		className: false
	},
	attributes: {
		heading: {
			type: "array",
			source: "children",
			selector: ".c9-toggles-toggle-label",
			default: "Toggle Item"
		},
		active: {
			type: "boolean",
			default: false
		},
		toggleNumber: {
			type: "number"
		},
		id: {
			type: "number"
		}
	},

	edit: compose([withSelect(function (select, ownProps) {
		var _select = select("core/editor"),
		    getBlockHierarchyRootClientId = _select.getBlockHierarchyRootClientId,
		    getBlock = _select.getBlock,
		    isBlockSelected = _select.isBlockSelected,
		    hasSelectedInnerBlock = _select.hasSelectedInnerBlock;

		var clientId = ownProps.clientId;


		return {
			block: getBlock(clientId),
			isSelectedBlockInRoot: isBlockSelected(clientId) || hasSelectedInnerBlock(clientId, true),
			rootBlock: clientId ? getBlock(getBlockHierarchyRootClientId(clientId)) : null
		};
	}), withDispatch(function (dispatch) {
		var _dispatch = dispatch("core/editor"),
		    removeBlock = _dispatch.removeBlock;

		return {
			removeBlock: removeBlock
		};
	})])(ToggleBlock),

	save: function save(props) {
		var _props$attributes = props.attributes,
		    heading = _props$attributes.heading,
		    toggleNumber = _props$attributes.toggleNumber,
		    id = _props$attributes.id;


		return wp.element.createElement(
			"div",
			{ className: "c9-toggles-toggle" },
			wp.element.createElement(
				"div",
				{
					className: "c9-toggles-item-heading",
					id: "c9-toggles-heading" + toggleNumber + "-" + id,
					"data-toggle": "collapse",
					"data-target": "#c9-toggles-collapse" + toggleNumber + "-" + id
				},
				wp.element.createElement(
					"div",
					{ className: "mb-0" },
					wp.element.createElement(RichText.Content, {
						tagName: "span",
						className: "c9-toggles-toggle-label",
						value: heading
					}),
					wp.element.createElement(
						"span",
						{ className: "c9-toggles-item-collapse" },
						wp.element.createElement("span", { className: "fas fa-angle-right" })
					)
				)
			),
			wp.element.createElement(
				"div",
				{
					className: "c9-toggles-item-content collapse",
					id: "c9-toggles-collapse" + toggleNumber + "-" + id,
					"data-parent": "#accordion-" + id
				},
				wp.element.createElement(InnerBlocks.Content, null)
			)
		);
	}
});

/***/ }),
/* 385 */
/*!**************************************************************!*\
  !*** ./src/blocks/block-toggles/components/remove-button.js ***!
  \**************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Import CSS
var Component = wp.element.Component;
var _wp$components = wp.components,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG;
var __ = wp.i18n.__;
var _wp$components2 = wp.components,
    Button = _wp$components2.Button,
    Popover = _wp$components2.Popover;

var RemoveButton = function (_Component) {
	_inherits(RemoveButton, _Component);

	function RemoveButton() {
		_classCallCheck(this, RemoveButton);

		var _this = _possibleConstructorReturn(this, (RemoveButton.__proto__ || Object.getPrototypeOf(RemoveButton)).apply(this, arguments));

		_this.state = {
			confirmed: -1
		};
		return _this;
	}

	_createClass(RemoveButton, [{
		key: "render",
		value: function render() {
			var _this2 = this;

			var _props = this.props,
			    onRemove = _props.onRemove,
			    show = _props.show,
			    style = _props.style,
			    _props$tooltipText = _props.tooltipText,
			    tooltipText = _props$tooltipText === undefined ? __("Remove block?", "c9-blocks") : _props$tooltipText,
			    _props$tooltipRemoveT = _props.tooltipRemoveText,
			    tooltipRemoveText = _props$tooltipRemoveT === undefined ? __("Remove", "c9-blocks") : _props$tooltipRemoveT,
			    _props$tooltipCancelT = _props.tooltipCancelText,
			    tooltipCancelText = _props$tooltipCancelT === undefined ? __("Cancel", "c9-blocks") : _props$tooltipCancelT;
			var confirmed = this.state.confirmed;


			if (!show) {
				return "";
			}

			return wp.element.createElement(
				Button,
				{
					className: "c9-component-remove-button",
					onClick: function onClick() {
						if (-1 === confirmed) {
							_this2.setState({
								confirmed: 0
							});
						}
					},
					style: style
				},
				0 === confirmed ? wp.element.createElement(
					Popover,
					{
						className: "c9-component-remove-button-confirm",
						onClose: function onClose() {
							_this2.setState({
								confirmed: -1
							});
						},
						onClickOutside: function onClickOutside() {
							_this2.setState({
								confirmed: -1
							});
						}
					},
					tooltipText,
					wp.element.createElement(
						Button,
						{
							className: "c9-component-remove-button-confirm-yep",
							onClick: onRemove
						},
						tooltipRemoveText
					),
					wp.element.createElement(
						Button,
						{
							className: "c9-component-remove-button-confirm-nope",
							onClick: function onClick() {
								_this2.setState({
									confirmed: -1
								});
							}
						},
						tooltipCancelText
					)
				) : "",
				wp.element.createElement(
					SVG,
					{
						xmlns: "http://www.w3.org/2000/svg",
						"aria-hidden": "true",
						focusable: "false",
						width: "1em",
						height: "1em",
						style: { transform: "rotate(360deg)", height: "1.2em", width: "auto" },
						preserveAspectRatio: "xMidYMid meet",
						viewBox: "0 0 20 20"
					},
					wp.element.createElement(Path, {
						d: "M12 4h3c.6 0 1 .4 1 1v1H3V5c0-.6.5-1 1-1h3c.2-1.1 1.3-2 2.5-2s2.3.9 2.5 2zM8 4h3c-.2-.6-.9-1-1.5-1S8.2 3.4 8 4zM4 7h11l-.9 10.1c0 .5-.5.9-1 .9H5.9c-.5 0-.9-.4-1-.9L4 7z",
						fill: "#fff"
					})
				)
			);
		}
	}]);

	return RemoveButton;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (RemoveButton);

/***/ }),
/* 386 */
/*!*******************************!*\
  !*** ./assets/toggle-open.js ***!
  \*******************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (wp.element.createElement(
	"svg",
	{
		version: "1.1",
		xmlns: "http://www.w3.org/2000/svg",
		x: "0px",
		y: "0px",
		viewBox: "0 0 24.1 24.1",
		style: { enableBackground: "new 0 0 24.1 24.1" }
	},
	wp.element.createElement(
		"style",
		{ type: "text/css" },
		"\n\t.st0{fill:#FFFFFF;}\n\t.st1{fill:#B3B5B8;}\n\t.st2{fill:none;}\n\t.st3{fill:#231F20;}"
	),
	wp.element.createElement(
		"g",
		{ id: "Layer_2" },
		wp.element.createElement("rect", { className: "st0", width: "24.1", height: "24.1" })
	),
	wp.element.createElement(
		"g",
		{ id: "Layer_3" },
		wp.element.createElement("rect", { x: "3", y: "4.4", className: "st1", width: "18.1", height: "15.4" })
	),
	wp.element.createElement(
		"g",
		{ id: "Layer_1" },
		wp.element.createElement(
			"g",
			null,
			wp.element.createElement("rect", { x: "-3.9", y: "4.9", className: "st2", width: "25", height: "16.5" }),
			wp.element.createElement(
				"g",
				null,
				wp.element.createElement(
					"g",
					null,
					wp.element.createElement("path", {
						className: "st3",
						d: "M20.6,5.3v13.5H3.5V5.3H20.6 M21.1,4.3H3v15.5h18.1V4.3L21.1,4.3z"
					})
				)
			),
			wp.element.createElement(
				"g",
				null,
				wp.element.createElement("path", { d: "M3,2.5v1.9h18.1V2.5H3z" })
			),
			wp.element.createElement(
				"g",
				null,
				wp.element.createElement("path", { d: "M3,19.8v1.7h18.1v-1.7H3z" })
			)
		)
	)
));

/***/ }),
/* 387 */
/*!*******************************************************!*\
  !*** ./src/blocks/block-carousel/components/slide.js ***!
  \*******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Slide Wrapper
 */

// Setup the block
var Component = wp.element.Component;
var _wp$components = wp.components,
    Path = _wp$components.Path,
    SVG = _wp$components.SVG;
var __ = wp.i18n.__;
var InnerBlocks = wp.editor.InnerBlocks;
var registerBlockType = wp.blocks.registerBlockType;

// Import block dependencies and components



/**
 * Create a Slide wrapper Component
 */

var Slide = function (_Component) {
	_inherits(Slide, _Component);

	function Slide() {
		_classCallCheck(this, Slide);

		return _possibleConstructorReturn(this, (Slide.__proto__ || Object.getPrototypeOf(Slide)).apply(this, arguments));
	}

	_createClass(Slide, [{
		key: "shouldComponentUpdate",
		value: function shouldComponentUpdate(nextProps) {
			if (this.props.attributes.slideActive !== nextProps.attributes.slideActive && this.props.attributes.slides === nextProps.attributes.slides) {
				return false;
			}

			return true;
		}
	}, {
		key: "render",
		value: function render() {
			// eslint-disable-next-line no-unused-vars
			var _props$className = this.props.className,
			    className = _props$className === undefined ? "" : _props$className;


			className = __WEBPACK_IMPORTED_MODULE_0_classnames___default()(className, "c9-carousel-slide");

			return wp.element.createElement(
				"div",
				{ className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(className, this.props.attributes.id) },
				wp.element.createElement(InnerBlocks, {
					templateLock: false,
					templateInsertUpdatesSelection: false
				})
			);
		}
	}]);

	return Slide;
}(Component);

registerBlockType("c9-blocks/carousel-slide", {
	title: __("C9 Carousel Slide", "c9-blocks"),

	category: "common",

	parent: ["c9-blocks/carousel"],

	icon: wp.element.createElement(
		SVG,
		{ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24" },
		wp.element.createElement(Path, { fill: "none", d: "M0 0h24v24H0V0z" }),
		wp.element.createElement(Path, { d: "M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16zm0-11.47L17.74 9 12 13.47 6.26 9 12 4.53z" })
	),

	supports: {
		inserter: false,
		className: false
	},

	attributes: {
		id: {
			type: "number"
		},
		slideActive: {
			type: "number"
		},
		slides: {
			type: "number"
		}
	},

	edit: Slide,

	save: function save(props) {
		var id = props.attributes.id;
		var _props$className2 = props.className,
		    className = _props$className2 === undefined ? "" : _props$className2;


		className = __WEBPACK_IMPORTED_MODULE_0_classnames___default()(className, "c9-carousel-slide", "carousel-item", 0 === id ? "active" : null);

		return wp.element.createElement(
			"div",
			{ className: className },
			wp.element.createElement(InnerBlocks.Content, null)
		);
	}
});

/* Add the vertical column alignment class to the column container block. */
var withClientIdClassName = wp.compose.createHigherOrderComponent(function (BlockListBlock) {
	return function (props) {
		var blockName = props.block.name;

		if ("c9-blocks/carousel-slide" === blockName) {
			return wp.element.createElement(BlockListBlock, _extends({}, props, {
				className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()("carousel-item", props.attributes.slideActive === props.attributes.id ? "active" : null)
			}));
		} else {
			return wp.element.createElement(BlockListBlock, props);
		}
	};
}, "withClientIdClassName");

wp.hooks.addFilter("editor.BlockListBlock", "c9-blocks/add-vertical-align-class", withClientIdClassName);

/***/ }),
/* 388 */
/*!*********************************************!*\
  !*** ./src/blocks/block-post-grid/index.js ***!
  \*********************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__edit__ = __webpack_require__(/*! ./edit */ 389);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_style_scss__ = __webpack_require__(/*! ./styles/style.scss */ 396);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__styles_style_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__styles_style_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_editor_scss__ = __webpack_require__(/*! ./styles/editor.scss */ 397);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__styles_editor_scss___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__styles_editor_scss__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__assets_icon_c9_post_grid_svg__ = __webpack_require__(/*! ../../../assets/icon-c9-post-grid.svg */ 51);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash_isUndefined__ = __webpack_require__(/*! lodash/isUndefined */ 398);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_lodash_isUndefined___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_lodash_isUndefined__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash_pickBy__ = __webpack_require__(/*! lodash/pickBy */ 399);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_lodash_pickBy___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_lodash_pickBy__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * BLOCK: Post and Page Grid
 */



// Import block dependencies and components


// Import CSS



// Register block controls
var registerBlockType = wp.blocks.registerBlockType;




var compose = wp.compose.compose;
var withSelect = wp.data.withSelect;





// Register the block
registerBlockType("c9-blocks/post-grid", {
	icon: __WEBPACK_IMPORTED_MODULE_4__assets_icon_c9_post_grid_svg__["a" /* default */],
	parent: "c9-blocks/post-container",
	/* Add alignment to block wrapper. */
	getEditWrapperProps: function getEditWrapperProps(_ref) {
		var align = _ref.align;

		if ("full" === align || "wide" === align || "narrow" === align || "" === align) {
			return { "data-align": align };
		}
	},


	edit: compose([withSelect(function (select, props) {
		var _props$attributes = props.attributes,
		    order = _props$attributes.order,
		    categories = _props$attributes.categories;

		var _select = select("core", "c9-blocks"),
		    getEntityRecords = _select.getEntityRecords;

		var latestPostsQuery = __WEBPACK_IMPORTED_MODULE_6_lodash_pickBy___default()({
			categories: categories,
			order: order,
			orderby: props.attributes.orderBy,
			// eslint-disable-next-line camelcase
			per_page: props.attributes.postsToShow,
			offset: props.attributes.offset
		}, function (value) {
			return !__WEBPACK_IMPORTED_MODULE_5_lodash_isUndefined___default()(value);
		});

		return {
			latestPosts: getEntityRecords("postType", props.attributes.postType, latestPostsQuery)
		};
	})])(__WEBPACK_IMPORTED_MODULE_1__edit__["a" /* default */]),

	// Render via PHP
	save: function save() {
		return null;
	}
});

/* Add the vertical column alignment class to the column container block. */
var withClientIdClassName = wp.compose.createHigherOrderComponent(function (BlockListBlock) {
	return function (props) {
		var blockName = props.block.name;

		if ("c9-blocks/post-grid" === blockName) {
			return wp.element.createElement(BlockListBlock, _extends({}, props, {
				className: __WEBPACK_IMPORTED_MODULE_0_classnames___default()(props.attributes.verticalAlign ? "c9-is-vertically-aligned-" + props.attributes.verticalAlign : "c9-is-vertically-aligned-top", props.attributes.containerWidth)
			}));
		} else {
			return wp.element.createElement(BlockListBlock, props);
		}
	};
}, "withClientIdClassName");

wp.hooks.addFilter("editor.BlockListBlock", "c9-blocks/add-vertical-align-class", withClientIdClassName);

/***/ }),
/* 389 */
/*!********************************************!*\
  !*** ./src/blocks/block-post-grid/edit.js ***!
  \********************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment__ = __webpack_require__(/*! moment */ 0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_moment___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_moment__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_inspector__ = __webpack_require__(/*! ./components/inspector */ 391);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_image__ = __webpack_require__(/*! ./components/image */ 393);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_width_toolbar__ = __webpack_require__(/*! ./components/width-toolbar */ 394);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_vertical_align_toolbar__ = __webpack_require__(/*! ./components/vertical-align-toolbar */ 395);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable react/jsx-no-target-blank */
/**
 * External dependencies
 */








var _wp$element = wp.element,
    Component = _wp$element.Component,
    Fragment = _wp$element.Fragment;
var __ = wp.i18n.__;
var decodeEntities = wp.htmlEntities.decodeEntities;
var _wp$components = wp.components,
    Placeholder = _wp$components.Placeholder,
    Spinner = _wp$components.Spinner,
    Toolbar = _wp$components.Toolbar;
var BlockControls = wp.editor.BlockControls;
var applyFilters = wp.hooks.applyFilters;

var Edit = function (_Component) {
	_inherits(Edit, _Component);

	function Edit() {
		_classCallCheck(this, Edit);

		return _possibleConstructorReturn(this, (Edit.__proto__ || Object.getPrototypeOf(Edit)).apply(this, arguments));
	}

	_createClass(Edit, [{
		key: "c9BgStyles",
		value: function c9BgStyles(hue, opacity) {
			var styles = {};

			if (hue) {
				styles.backgroundColor = this.hexToRGBA(hue, opacity);
			}

			return styles;
		}
	}, {
		key: "hexToRGBA",
		value: function hexToRGBA(hex, alpha) {
			var r = parseInt(hex.slice(1, 3), 16),
			    g = parseInt(hex.slice(3, 5), 16),
			    b = parseInt(hex.slice(5, 7), 16);

			var opacity;

			if (10 === alpha) {
				opacity = 1;
			} else {
				opacity = "." + alpha;
			}

			return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
		}
	}, {
		key: "c9SpacingConfig",
		value: function c9SpacingConfig(padding, margin) {
			var classes = [];
			// abstract side class assignment
			function assignSideClasses(sideClass, level) {
				if (-1 != level) {
					classes.push(sideClass + "-" + level);
				}
			}

			// padding
			if (padding.top === padding.left && padding.top === padding.bottom && padding.top === padding.right && -1 != padding.top) {
				classes.push("p-" + padding.top);
			} else if (padding.top === padding.bottom && 0 <= padding.top) {
				classes.push("py-" + padding.top);
				assignSideClasses("pl", padding.left);
				assignSideClasses("pr", padding.right);
			} else if (padding.left === padding.right && 0 <= padding.left) {
				classes.push("px-" + padding.left);
				assignSideClasses("pt", padding.top);
				assignSideClasses("pb", padding.bottom);
			} else {
				["top", "bottom", "left", "right"].map(function (s) {
					return assignSideClasses("p" + s[0], padding[s]);
				});
			}

			// margin
			if (margin.top === margin.bottom && -1 != margin.top) {
				classes.push("my-" + margin.top);
			} else {
				["top", "bottom"].map(function (s) {
					return assignSideClasses("m" + s[0], margin[s]);
				});
			}

			return classes;
		}
	}, {
		key: "truncate",
		value: function truncate(str, noWords) {
			return str.split(" ").splice(0, noWords).join(" ");
		}
	}, {
		key: "render",
		value: function render() {
			var _classnames,
			    _this2 = this;

			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes,
			    latestPosts = _props.latestPosts,
			    _props$className = _props.className,
			    className = _props$className === undefined ? "" : _props$className;
			var bgColor = attributes.bgColor,
			    bgOpacity = attributes.bgOpacity,
			    bgMargin = attributes.bgMargin,
			    bgPadding = attributes.bgPadding,
			    disableToolbar = attributes.disableToolbar;

			// Check if there are posts

			var hasPosts = Array.isArray(latestPosts) && latestPosts.length;

			// Check the post type
			var isPost = "post" === attributes.postType;

			var currWidth = void 0;
			if (0 != attributes.align.length) {
				if ("container" == attributes.containerWidth) {
					currWidth = "wide";
				} else if ("container-fluid" == attributes.containerWidth) {
					currWidth = "full";
				} else {
					currWidth = "narrow";
				}
			}

			if (!hasPosts) {
				return wp.element.createElement(
					Fragment,
					null,
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_inspector__["a" /* default */], Object.assign({ setAttributes: setAttributes }, this.props)),
					wp.element.createElement(
						Placeholder,
						{
							icon: "admin-post",
							label: __("Cortex Blocks Post and Page Grid", "c9-blocks")
						},
						!Array.isArray(latestPosts) ? wp.element.createElement(Spinner, null) : __("No posts found.", "c9-blocks")
					)
				);
			}

			// Removing posts from display should be instant.
			var displayPosts = latestPosts.length > attributes.postsToShow ? latestPosts.slice(0, attributes.postsToShow) : latestPosts;

			// Add toolbar controls to change layout
			var layoutControls = [{
				icon: "grid-view",
				title: __("Grid View", "c9-blocks"),
				onClick: function onClick() {
					return setAttributes({ postLayout: "grid" });
				},
				isActive: "grid" === attributes.postLayout
			}, {
				icon: "list-view",
				title: __("List View", "c9-blocks"),
				onClick: function onClick() {
					return setAttributes({ postLayout: "list" });
				},
				isActive: "list" === attributes.postLayout
			}];

			// Get the section tag
			var SectionTag = attributes.sectionTag ? attributes.sectionTag : "section";

			// Get the section title tag
			var SectionTitleTag = attributes.sectionTitleTag ? attributes.sectionTitleTag : "h2";

			// Get the post title tag
			var PostTag = attributes.postTitleTag ? attributes.postTitleTag : "h3";

			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(__WEBPACK_IMPORTED_MODULE_2__components_inspector__["a" /* default */], Object.assign({ setAttributes: setAttributes }, this.props)),
				wp.element.createElement(
					BlockControls,
					null,
					!disableToolbar && wp.element.createElement(__WEBPACK_IMPORTED_MODULE_4__components_width_toolbar__["a" /* default */], {
						value: currWidth,
						onChange: function onChange(value) {
							if ("wide" == value) {
								setAttributes({ containerWidth: "container", align: "wide" });
							} else if ("full" == value) {
								setAttributes({
									containerWidth: "container-fluid",
									align: "full"
								});
							} else if ("narrow" == value) {
								setAttributes({
									containerWidth: "container-narrow",
									align: "narrow"
								});
							} else {
								setAttributes({ containerWidth: "container", align: "" });
							}
						}
					}),
					wp.element.createElement(__WEBPACK_IMPORTED_MODULE_5__components_vertical_align_toolbar__["a" /* default */], {
						value: attributes.verticalAlign,
						onChange: function onChange(value) {
							setAttributes({ verticalAlign: value });
						}
					}),
					wp.element.createElement(Toolbar, { controls: layoutControls })
				),
				wp.element.createElement(
					SectionTag,
					{
						style: this.c9BgStyles(bgColor, bgOpacity),
						className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()(applyFilters("c9-blocks.blocks.className", className), "c9-block-post-grid", this.c9SpacingConfig(bgPadding, bgMargin))
					},
					attributes.displaySectionTitle && attributes.sectionTitle && wp.element.createElement(
						SectionTitleTag,
						{ className: "c9-post-grid-section-title" },
						attributes.sectionTitle
					),
					wp.element.createElement(
						"div",
						{
							className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()((_classnames = {
								"is-grid": "grid" === attributes.postLayout,
								"is-list": "list" === attributes.postLayout
							}, _defineProperty(_classnames, "columns-" + attributes.columns, "grid" === attributes.postLayout), _defineProperty(_classnames, "c9-post-grid-items", "c9-post-grid-items"), _classnames))
						},
						displayPosts.map(function (post, i) {
							return wp.element.createElement(
								"article",
								{
									key: i,
									id: "post-" + post.id,
									className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()("post-" + post.id, post.featured_image_src && attributes.displayPostImage ? "has-post-thumbnail" : null)
								},
								attributes.displayPostImage && post.featured_media ? wp.element.createElement(__WEBPACK_IMPORTED_MODULE_3__components_image__["a" /* default */], _extends({}, _this2.props, {
									imgAlt: decodeEntities(post.title.rendered.trim()) || __("(Untitled)", "c9-blocks"),
									imgClass: "wp-image-" + post.featured_media.toString(),
									imgID: post.featured_media.toString(),
									imgSize: attributes.imageSize,
									imgSizeLandscape: post.featured_image_src,
									imgSizeSquare: post.featured_image_src_square,
									imgLink: post.link
								})) : null,
								wp.element.createElement(
									"div",
									{ className: "c9-block-post-grid-text" },
									wp.element.createElement(
										"header",
										{ className: "c9-block-post-grid-header" },
										attributes.displayPostTitle && wp.element.createElement(
											PostTag,
											{ className: "c9-block-post-grid-title" },
											wp.element.createElement(
												"a",
												{ href: post.link, target: "_blank", rel: "bookmark" },
												decodeEntities(post.title.rendered.trim()) || __("(Untitled)", "c9-blocks")
											)
										),
										isPost && wp.element.createElement(
											"div",
											{ className: "c9-block-post-grid-byline" },
											attributes.displayPostAuthor && post.author_info.display_name && wp.element.createElement(
												"div",
												{ className: "c9-block-post-grid-author" },
												wp.element.createElement(
													"a",
													{
														className: "c9-text-link",
														target: "_blank",
														href: post.author_info.author_link
													},
													post.author_info.display_name
												)
											),
											attributes.displayPostDate && post.date_gmt && wp.element.createElement(
												"time",
												{
													dateTime: __WEBPACK_IMPORTED_MODULE_0_moment___default()(post.date_gmt).utc().format(),
													className: "c9-block-post-grid-date"
												},
												__WEBPACK_IMPORTED_MODULE_0_moment___default()(post.date_gmt).local().format("MMMM DD, Y", "c9-blocks")
											)
										)
									),
									wp.element.createElement(
										"div",
										{ className: "c9-block-post-grid-excerpt" },
										attributes.displayPostExcerpt && post.excerpt && wp.element.createElement("div", {
											dangerouslySetInnerHTML: {
												__html: _this2.truncate(post.excerpt.rendered, attributes.excerptLength)
											}
										}),
										attributes.displayPostLink && wp.element.createElement(
											"p",
											null,
											wp.element.createElement(
												"a",
												{
													className: "c9-block-post-grid-more-link c9-text-link",
													href: post.link,
													target: "_blank",
													rel: "bookmark"
												},
												attributes.readMoreText
											)
										)
									)
								)
							);
						})
					)
				)
			);
		}
	}]);

	return Edit;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (Edit);

/***/ }),
/* 390 */
/*!*********************************************!*\
  !*** ./node_modules/moment/locale ^\.\/.*$ ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": 74,
	"./af.js": 74,
	"./ar": 75,
	"./ar-dz": 76,
	"./ar-dz.js": 76,
	"./ar-kw": 77,
	"./ar-kw.js": 77,
	"./ar-ly": 78,
	"./ar-ly.js": 78,
	"./ar-ma": 79,
	"./ar-ma.js": 79,
	"./ar-sa": 80,
	"./ar-sa.js": 80,
	"./ar-tn": 81,
	"./ar-tn.js": 81,
	"./ar.js": 75,
	"./az": 82,
	"./az.js": 82,
	"./be": 83,
	"./be.js": 83,
	"./bg": 84,
	"./bg.js": 84,
	"./bm": 85,
	"./bm.js": 85,
	"./bn": 86,
	"./bn.js": 86,
	"./bo": 87,
	"./bo.js": 87,
	"./br": 88,
	"./br.js": 88,
	"./bs": 89,
	"./bs.js": 89,
	"./ca": 90,
	"./ca.js": 90,
	"./cs": 91,
	"./cs.js": 91,
	"./cv": 92,
	"./cv.js": 92,
	"./cy": 93,
	"./cy.js": 93,
	"./da": 94,
	"./da.js": 94,
	"./de": 95,
	"./de-at": 96,
	"./de-at.js": 96,
	"./de-ch": 97,
	"./de-ch.js": 97,
	"./de.js": 95,
	"./dv": 98,
	"./dv.js": 98,
	"./el": 99,
	"./el.js": 99,
	"./en-SG": 100,
	"./en-SG.js": 100,
	"./en-au": 101,
	"./en-au.js": 101,
	"./en-ca": 102,
	"./en-ca.js": 102,
	"./en-gb": 103,
	"./en-gb.js": 103,
	"./en-ie": 104,
	"./en-ie.js": 104,
	"./en-il": 105,
	"./en-il.js": 105,
	"./en-nz": 106,
	"./en-nz.js": 106,
	"./eo": 107,
	"./eo.js": 107,
	"./es": 108,
	"./es-do": 109,
	"./es-do.js": 109,
	"./es-us": 110,
	"./es-us.js": 110,
	"./es.js": 108,
	"./et": 111,
	"./et.js": 111,
	"./eu": 112,
	"./eu.js": 112,
	"./fa": 113,
	"./fa.js": 113,
	"./fi": 114,
	"./fi.js": 114,
	"./fo": 115,
	"./fo.js": 115,
	"./fr": 116,
	"./fr-ca": 117,
	"./fr-ca.js": 117,
	"./fr-ch": 118,
	"./fr-ch.js": 118,
	"./fr.js": 116,
	"./fy": 119,
	"./fy.js": 119,
	"./ga": 120,
	"./ga.js": 120,
	"./gd": 121,
	"./gd.js": 121,
	"./gl": 122,
	"./gl.js": 122,
	"./gom-latn": 123,
	"./gom-latn.js": 123,
	"./gu": 124,
	"./gu.js": 124,
	"./he": 125,
	"./he.js": 125,
	"./hi": 126,
	"./hi.js": 126,
	"./hr": 127,
	"./hr.js": 127,
	"./hu": 128,
	"./hu.js": 128,
	"./hy-am": 129,
	"./hy-am.js": 129,
	"./id": 130,
	"./id.js": 130,
	"./is": 131,
	"./is.js": 131,
	"./it": 132,
	"./it-ch": 133,
	"./it-ch.js": 133,
	"./it.js": 132,
	"./ja": 134,
	"./ja.js": 134,
	"./jv": 135,
	"./jv.js": 135,
	"./ka": 136,
	"./ka.js": 136,
	"./kk": 137,
	"./kk.js": 137,
	"./km": 138,
	"./km.js": 138,
	"./kn": 139,
	"./kn.js": 139,
	"./ko": 140,
	"./ko.js": 140,
	"./ku": 141,
	"./ku.js": 141,
	"./ky": 142,
	"./ky.js": 142,
	"./lb": 143,
	"./lb.js": 143,
	"./lo": 144,
	"./lo.js": 144,
	"./lt": 145,
	"./lt.js": 145,
	"./lv": 146,
	"./lv.js": 146,
	"./me": 147,
	"./me.js": 147,
	"./mi": 148,
	"./mi.js": 148,
	"./mk": 149,
	"./mk.js": 149,
	"./ml": 150,
	"./ml.js": 150,
	"./mn": 151,
	"./mn.js": 151,
	"./mr": 152,
	"./mr.js": 152,
	"./ms": 153,
	"./ms-my": 154,
	"./ms-my.js": 154,
	"./ms.js": 153,
	"./mt": 155,
	"./mt.js": 155,
	"./my": 156,
	"./my.js": 156,
	"./nb": 157,
	"./nb.js": 157,
	"./ne": 158,
	"./ne.js": 158,
	"./nl": 159,
	"./nl-be": 160,
	"./nl-be.js": 160,
	"./nl.js": 159,
	"./nn": 161,
	"./nn.js": 161,
	"./pa-in": 162,
	"./pa-in.js": 162,
	"./pl": 163,
	"./pl.js": 163,
	"./pt": 164,
	"./pt-br": 165,
	"./pt-br.js": 165,
	"./pt.js": 164,
	"./ro": 166,
	"./ro.js": 166,
	"./ru": 167,
	"./ru.js": 167,
	"./sd": 168,
	"./sd.js": 168,
	"./se": 169,
	"./se.js": 169,
	"./si": 170,
	"./si.js": 170,
	"./sk": 171,
	"./sk.js": 171,
	"./sl": 172,
	"./sl.js": 172,
	"./sq": 173,
	"./sq.js": 173,
	"./sr": 174,
	"./sr-cyrl": 175,
	"./sr-cyrl.js": 175,
	"./sr.js": 174,
	"./ss": 176,
	"./ss.js": 176,
	"./sv": 177,
	"./sv.js": 177,
	"./sw": 178,
	"./sw.js": 178,
	"./ta": 179,
	"./ta.js": 179,
	"./te": 180,
	"./te.js": 180,
	"./tet": 181,
	"./tet.js": 181,
	"./tg": 182,
	"./tg.js": 182,
	"./th": 183,
	"./th.js": 183,
	"./tl-ph": 184,
	"./tl-ph.js": 184,
	"./tlh": 185,
	"./tlh.js": 185,
	"./tr": 186,
	"./tr.js": 186,
	"./tzl": 187,
	"./tzl.js": 187,
	"./tzm": 188,
	"./tzm-latn": 189,
	"./tzm-latn.js": 189,
	"./tzm.js": 188,
	"./ug-cn": 190,
	"./ug-cn.js": 190,
	"./uk": 191,
	"./uk.js": 191,
	"./ur": 192,
	"./ur.js": 192,
	"./uz": 193,
	"./uz-latn": 194,
	"./uz-latn.js": 194,
	"./uz.js": 193,
	"./vi": 195,
	"./vi.js": 195,
	"./x-pseudo": 196,
	"./x-pseudo.js": 196,
	"./yo": 197,
	"./yo.js": 197,
	"./zh-cn": 198,
	"./zh-cn.js": 198,
	"./zh-hk": 199,
	"./zh-hk.js": 199,
	"./zh-tw": 200,
	"./zh-tw.js": 200
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 390;

/***/ }),
/* 391 */
/*!************************************************************!*\
  !*** ./src/blocks/block-post-grid/components/inspector.js ***!
  \************************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(/*! react */ 2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_compact__ = __webpack_require__(/*! lodash/compact */ 392);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_lodash_compact___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_lodash_compact__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash_map__ = __webpack_require__(/*! lodash/map */ 29);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_lodash_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_lodash_map__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Inspector Controls
 */

// Setup the block

var __ = wp.i18n.__;
var Component = wp.element.Component;





// Import block components
var _wp$editor = wp.editor,
    InspectorControls = _wp$editor.InspectorControls,
    ColorPalette = _wp$editor.ColorPalette;

// Import Inspector components

var _wp$components = wp.components,
    PanelBody = _wp$components.PanelBody,
    QueryControls = _wp$components.QueryControls,
    RangeControl = _wp$components.RangeControl,
    SelectControl = _wp$components.SelectControl,
    TextControl = _wp$components.TextControl,
    ToggleControl = _wp$components.ToggleControl,
    IconButton = _wp$components.IconButton;
var addQueryArgs = wp.url.addQueryArgs;
var _wp = wp,
    apiFetch = _wp.apiFetch;


var MAX_POSTS_COLUMNS = 4;

/**
 * Create an Inspector Controls wrapper Component
 */

var Inspector = function (_Component) {
	_inherits(Inspector, _Component);

	function Inspector() {
		_classCallCheck(this, Inspector);

		var _this = _possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).apply(this, arguments));

		_initialiseProps.call(_this);

		var _this$props = _this.props,
		    _this$props$attribute = _this$props.attributes,
		    bgPadding = _this$props$attribute.bgPadding,
		    bgMargin = _this$props$attribute.bgMargin,
		    setAttributes = _this$props.setAttributes;


		_this.setAttributes = setAttributes;

		_this.linkedPaddingRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.togglePaddingLinkage = _this.togglePaddingLinkage.bind(_this);
		_this.linkedMarginRef = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createRef();
		_this.toggleMarginLinkage = _this.toggleMarginLinkage.bind(_this);

		_this.state = {
			bgPadding: bgPadding,
			bgMargin: bgMargin,
			setAttributes: setAttributes,
			categoriesList: []
		};
		return _this;
	}

	_createClass(Inspector, [{
		key: "componentDidMount",
		value: function componentDidMount() {
			var _this2 = this;

			this.stillMounted = true;
			this.fetchRequest = apiFetch({
				// eslint-disable-next-line camelcase
				path: addQueryArgs("/wp/v2/categories", { per_page: -1 })
			}).then(function (categoriesList) {
				if (_this2.stillMounted) {
					_this2.setState({ categoriesList: categoriesList });
				}
			}).catch(function () {
				if (_this2.stillMounted) {
					_this2.setState({ categoriesList: [] });
				}
			});
		}
	}, {
		key: "componentWillUnmount",
		value: function componentWillUnmount() {
			this.stillMounted = false;
		}
	}, {
		key: "imageSizeSelect",


		/* Get the available image sizes */
		value: function imageSizeSelect() {
			var getSettings = wp.data.select("core/editor").getEditorSettings();

			return __WEBPACK_IMPORTED_MODULE_1_lodash_compact___default()(__WEBPACK_IMPORTED_MODULE_2_lodash_map___default()(getSettings.imageSizes, function (_ref) {
				var name = _ref.name,
				    slug = _ref.slug;

				return {
					value: slug,
					label: name
				};
			}));
		}
	}, {
		key: "render",
		value: function render() {
			var _this3 = this;

			// Setup the attributes
			var _props = this.props,
			    attributes = _props.attributes,
			    setAttributes = _props.setAttributes,
			    latestPosts = _props.latestPosts;
			var order = attributes.order,
			    orderBy = attributes.orderBy,
			    postTypes = attributes.postTypes,
			    bgColor = attributes.bgColor,
			    bgOpacity = attributes.bgOpacity,
			    bgMargin = attributes.bgMargin,
			    bgPadding = attributes.bgPadding;
			var categoriesList = this.state.categoriesList;

			// Post type options

			var postTypeOptions = JSON.parse(postTypes).map(function (p) {
				return {
					value: p,
					label: __(p.charAt(0).toUpperCase() + p.slice(1), "c9-blocks")
				};
			});

			// Section title tags
			var sectionTags = [{ value: "div", label: __("div", "c9-blocks") }, { value: "header", label: __("header", "c9-blocks") }, { value: "section", label: __("section", "c9-blocks") }, { value: "article", label: __("article", "c9-blocks") }, { value: "main", label: __("main", "c9-blocks") }, { value: "aside", label: __("aside", "c9-blocks") }, { value: "footer", label: __("footer", "c9-blocks") }];

			// Section title tags
			var sectionTitleTags = [{ value: "h2", label: __("H2", "c9-blocks") }, { value: "h3", label: __("H3", "c9-blocks") }, { value: "h4", label: __("H4", "c9-blocks") }, { value: "h5", label: __("H5", "c9-blocks") }, { value: "h6", label: __("H6", "c9-blocks") }];

			var paddingOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Padding 0", "c9-blocks") }, { value: "1", label: __("Padding 1", "c9-blocks") }, { value: "2", label: __("Padding 2", "c9-blocks") }, { value: "3", label: __("Padding 3", "c9-blocks") }, { value: "4", label: __("Padding 4", "c9-blocks") }, { value: "5", label: __("Padding 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			var marginOptions = [{ value: "-1", label: __("None", "c9-blocks") }, { value: "0", label: __("Margin 0", "c9-blocks") }, { value: "1", label: __("Margin 1", "c9-blocks") }, { value: "2", label: __("Margin 2", "c9-blocks") }, { value: "3", label: __("Margin 3", "c9-blocks") }, { value: "4", label: __("Margin 4", "c9-blocks") }, { value: "5", label: __("Margin 5", "c9-blocks") }, { value: "auto", label: __("Auto", "c9-blocks") }];

			// Check for posts
			var hasPosts = Array.isArray(latestPosts) && latestPosts.length;

			// Check the post type
			var isPost = "post" === attributes.postType;

			// Add instruction text to the select
			var c9ImageSizeSelect = {
				value: "selectimage",
				label: __("Select image size")
			};

			// Get the image size options
			var imageSizeOptions = this.imageSizeSelect();

			// Combine the objects
			// imageSizeOptions.push(c9ImageSizeSquare, c9ImageSizeLandscape);
			imageSizeOptions.unshift(c9ImageSizeSelect);

			var imageSizeValue = function imageSizeValue() {
				for (var i = 0; i < imageSizeOptions.length; i++) {
					if (imageSizeOptions[i].value === attributes.imageSize) {
						return attributes.imageSize;
					}
				}
				return "large";
			};

			return wp.element.createElement(
				InspectorControls,
				null,
				wp.element.createElement(
					PanelBody,
					{ className: isPost ? null : "c9-blocks-hide-query" },
					wp.element.createElement(SelectControl, {
						label: __("Content Type", "c9-blocks"),
						options: postTypeOptions,
						value: attributes.postType,
						onChange: function onChange(value) {
							return _this3.props.setAttributes({ postType: value });
						}
					}),
					wp.element.createElement(QueryControls, _extends({ order: order, orderBy: orderBy }, {
						numberOfItems: attributes.postsToShow,
						categoriesList: categoriesList,
						selectedCategoryId: attributes.categories,
						onOrderChange: function onOrderChange(value) {
							return setAttributes({ order: value });
						},
						onOrderByChange: function onOrderByChange(value) {
							return setAttributes({ orderBy: value });
						},
						onCategoryChange: function onCategoryChange(value) {
							return setAttributes({ categories: "" !== value ? value : undefined });
						},
						onNumberOfItemsChange: function onNumberOfItemsChange(value) {
							return setAttributes({ postsToShow: value });
						}
					})),
					wp.element.createElement(RangeControl, {
						label: __("Number of items to offset", "c9-blocks"),
						value: attributes.offset,
						onChange: function onChange(value) {
							return setAttributes({ offset: value });
						},
						min: 0,
						max: 20
					}),
					"grid" === attributes.postLayout && wp.element.createElement(RangeControl, {
						label: __("Columns", "c9-blocks"),
						value: attributes.columns,
						onChange: function onChange(value) {
							return setAttributes({ columns: value });
						},
						min: 1,
						max: !hasPosts ? MAX_POSTS_COLUMNS : Math.min(MAX_POSTS_COLUMNS, latestPosts.length)
					})
				),
				wp.element.createElement(
					PanelBody,
					{
						title: __("Post and Page Grid Content", "c9-blocks"),
						initialOpen: false
					},
					wp.element.createElement(ToggleControl, {
						label: __("Display Section Title", "c9-blocks"),
						checked: attributes.displaySectionTitle,
						onChange: function onChange() {
							return _this3.props.setAttributes({
								displaySectionTitle: !attributes.displaySectionTitle
							});
						}
					}),
					attributes.displaySectionTitle && wp.element.createElement(TextControl, {
						label: __("Section Title", "c9-blocks"),
						type: "text",
						value: attributes.sectionTitle,
						onChange: function onChange(value) {
							return _this3.props.setAttributes({ sectionTitle: value });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Display Featured Image", "c9-blocks"),
						checked: attributes.displayPostImage,
						onChange: function onChange() {
							return _this3.props.setAttributes({
								displayPostImage: !attributes.displayPostImage
							});
						}
					}),
					attributes.displayPostImage && wp.element.createElement(SelectControl, {
						label: __("Image Size", "c9-blocks"),
						value: imageSizeValue(),
						options: imageSizeOptions,
						onChange: function onChange(value) {
							return _this3.props.setAttributes({ imageSize: value });
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Display Title", "c9-blocks"),
						checked: attributes.displayPostTitle,
						onChange: function onChange() {
							return _this3.props.setAttributes({
								displayPostTitle: !attributes.displayPostTitle
							});
						}
					}),
					isPost && wp.element.createElement(ToggleControl, {
						label: __("Display Author", "c9-blocks"),
						checked: attributes.displayPostAuthor,
						onChange: function onChange() {
							return _this3.props.setAttributes({
								displayPostAuthor: !attributes.displayPostAuthor
							});
						}
					}),
					isPost && wp.element.createElement(ToggleControl, {
						label: __("Display Date", "c9-blocks"),
						checked: attributes.displayPostDate,
						onChange: function onChange() {
							return _this3.props.setAttributes({
								displayPostDate: !attributes.displayPostDate
							});
						}
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Display Excerpt", "c9-blocks"),
						checked: attributes.displayPostExcerpt,
						onChange: function onChange() {
							return _this3.props.setAttributes({
								displayPostExcerpt: !attributes.displayPostExcerpt
							});
						}
					}),
					attributes.displayPostExcerpt && wp.element.createElement(RangeControl, {
						label: __("Excerpt Length", "c9-blocks"),
						value: attributes.excerptLength,
						onChange: function onChange(value) {
							return setAttributes({ excerptLength: value });
						},
						min: 0,
						max: 150
					}),
					wp.element.createElement(ToggleControl, {
						label: __("Display Continue Reading Link", "c9-blocks"),
						checked: attributes.displayPostLink,
						onChange: function onChange() {
							return _this3.props.setAttributes({
								displayPostLink: !attributes.displayPostLink
							});
						}
					}),
					attributes.displayPostLink && wp.element.createElement(TextControl, {
						label: __("Customize Continue Reading Text", "c9-blocks"),
						type: "text",
						value: attributes.readMoreText,
						onChange: function onChange(value) {
							return _this3.props.setAttributes({ readMoreText: value });
						}
					})
				),
				wp.element.createElement(
					PanelBody,
					{
						title: __("Post and Page Grid Markup", "c9-blocks"),
						initialOpen: false,
						className: "c9-block-post-grid-markup-settings"
					},
					wp.element.createElement(SelectControl, {
						label: __("Post Grid Section Tag", "c9-blocks"),
						options: sectionTags,
						value: attributes.sectionTag,
						onChange: function onChange(value) {
							return _this3.props.setAttributes({ sectionTag: value });
						},
						help: __("Change the post grid section tag to match your content hierarchy.", "c9-blocks")
					}),
					attributes.sectionTitle && wp.element.createElement(SelectControl, {
						label: __("Section Title Heading Tag", "c9-blocks"),
						options: sectionTitleTags,
						value: attributes.sectionTitleTag,
						onChange: function onChange(value) {
							return _this3.props.setAttributes({ sectionTitleTag: value });
						},
						help: __("Change the post/page section title tag to match your content hierarchy.", "c9-blocks")
					}),
					attributes.displayPostTitle && wp.element.createElement(SelectControl, {
						label: __("Post Title Heading Tag", "c9-blocks"),
						options: sectionTitleTags,
						value: attributes.postTitleTag,
						onChange: function onChange(value) {
							return _this3.props.setAttributes({ postTitleTag: value });
						},
						help: __("Change the post/page title tag to match your content hierarchy.", "c9-blocks")
					})
				),
				wp.element.createElement(
					PanelBody,
					{ title: __("Spacing", "c9-blocks"), initialOpen: false },
					wp.element.createElement(
						"h5",
						{ className: "padding-label" },
						__("Padding", "c9-blocks")
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of padding for each side.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "padding-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: bgPadding.top,
							onChange: function onChange(value) {
								return _this3.updatePadding("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-sides-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: bgPadding.left,
							onChange: function onChange(value) {
								return _this3.updatePadding("left", value);
							}
						}),
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.bgPadding.icon,
							onClick: this.togglePaddingLinkage,
							ref: this.state.linkedPaddingRef
						}),
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: bgPadding.right,
							onChange: function onChange(value) {
								return _this3.updatePadding("right", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "padding-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: paddingOptions,
							value: bgPadding.bottom,
							onChange: function onChange(value) {
								return _this3.updatePadding("bottom", value);
							}
						})
					),
					wp.element.createElement("hr", null),
					wp.element.createElement(
						"h5",
						{ className: "margin-label" },
						"Margins"
					),
					wp.element.createElement(
						"p",
						{ className: "components-base-control__label" },
						__("Configure between different levels of margin for top and bottom sides.", "c9-blocks")
					),
					wp.element.createElement(
						"div",
						{ className: "margin-top-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: bgMargin.top,
							onChange: function onChange(value) {
								return _this3.updateMargin("top", value);
							}
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-sides-wrapper" },
						wp.element.createElement(IconButton, {
							label: __("Linked Padding Toggle", "c9-blocks"),
							icon: this.state.bgMargin.icon,
							onClick: this.toggleMarginLinkage,
							ref: this.state.linkedMarginRef
						})
					),
					wp.element.createElement(
						"div",
						{ className: "margin-bottom-wrapper" },
						wp.element.createElement(SelectControl, {
							options: marginOptions,
							value: bgMargin.bottom,
							onChange: function onChange(value) {
								return _this3.updateMargin("bottom", value);
							}
						})
					)
				),
				wp.element.createElement(
					PanelBody,
					{
						title: __("Color Settings", "c9-blocks"),
						initialOpen: false
					},
					wp.element.createElement(
						"span",
						null,
						__("Background Color", "c9-blocks")
					),
					wp.element.createElement(ColorPalette, {
						label: __("Overlay Color", "c9-blocks"),
						value: bgColor,
						onChange: function onChange(bgColor) {
							return setAttributes({ bgColor: bgColor });
						}
					}),
					bgColor && !!bgColor.length && wp.element.createElement(RangeControl, {
						beforeIcon: "arrow-left-alt2",
						afterIcon: "arrow-right-alt2",
						label: __("Opacity", "c9-blocks"),
						value: bgOpacity,
						onChange: function onChange(bgOpacity) {
							return setAttributes({ bgOpacity: bgOpacity });
						},
						min: 1,
						max: 10
					})
				)
			);
		}
	}]);

	return Inspector;
}(Component);

var _initialiseProps = function _initialiseProps() {
	var _this4 = this;

	this.togglePaddingLinkage = function () {
		var bgPadding = _this4.props.attributes.bgPadding;


		bgPadding = Object.assign({}, bgPadding);
		bgPadding.linked = !bgPadding.linked;
		bgPadding.icon = bgPadding.linked ? "admin-links" : "editor-unlink";
		_this4.setState({ bgPadding: bgPadding });
		_this4.setAttributes({ bgPadding: bgPadding });
	};

	this.setPaddingUnit = function (value) {
		var bgPadding = _this4.props.attributes.bgPadding;


		var spacingObject = Object.assign({}, bgPadding);
		spacingObject.unit = value;
		_this4.setState({ bgPadding: spacingObject });
		_this4.setAttributes({ bgPadding: spacingObject });
	};

	this.updatePadding = function (position, value) {
		if (_this4.state.bgPadding.linked) {
			var spacingObject = {
				linked: _this4.state.bgPadding.linked,
				unit: _this4.state.bgPadding.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this4.state.bgPadding.icon
			};
			_this4.setState({ bgPadding: spacingObject });
			_this4.setAttributes({ bgPadding: spacingObject });
		} else {
			var _spacingObject = Object.assign({}, _this4.state.bgPadding);
			_spacingObject[position] = value;
			_this4.setState({ bgPadding: _spacingObject });
			_this4.setAttributes({ bgPadding: _spacingObject });
		}
	};

	this.toggleMarginLinkage = function () {
		var bgMargin = _this4.props.attributes.bgMargin;


		bgMargin = Object.assign({}, bgMargin);
		bgMargin.linked = !bgMargin.linked;
		bgMargin.icon = bgMargin.linked ? "admin-links" : "editor-unlink";
		_this4.setState({ bgMargin: bgMargin });
		_this4.setAttributes({ bgMargin: bgMargin });
	};

	this.setMarginUnit = function (value) {
		var bgMargin = _this4.props.attributes.bgMargin;


		var spacingObject = Object.assign({}, bgMargin);
		spacingObject.unit = value;
		_this4.setState({ bgMargin: spacingObject });
		_this4.setAttributes({ bgMargin: spacingObject });
	};

	this.updateMargin = function (position, value) {
		if (_this4.state.bgMargin.linked) {
			var spacingObject = {
				linked: _this4.state.bgMargin.linked,
				unit: _this4.state.bgMargin.unit,
				top: value,
				bottom: value,
				left: value,
				right: value,
				icon: _this4.state.bgMargin.icon
			};
			_this4.setState({ bgMargin: spacingObject });
			_this4.setAttributes({ bgMargin: spacingObject });
		} else {
			var _spacingObject2 = Object.assign({}, _this4.state.bgMargin);
			_spacingObject2[position] = value;
			_this4.setState({ bgMargin: _spacingObject2 });
			_this4.setAttributes({ bgMargin: _spacingObject2 });
		}
	};
};

/* harmony default export */ __webpack_exports__["a"] = (Inspector);

/***/ }),
/* 392 */
/*!****************************************!*\
  !*** ./node_modules/lodash/compact.js ***!
  \****************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports) {

/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */
function compact(array) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = compact;


/***/ }),
/* 393 */
/*!********************************************************!*\
  !*** ./src/blocks/block-post-grid/components/image.js ***!
  \********************************************************/
/*! exports provided: default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get__ = __webpack_require__(/*! lodash/get */ 70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_lodash_get___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_lodash_get__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(/*! classnames */ 1);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable react/jsx-no-target-blank */
/**
 * Post grid featured image.
 */




var __ = wp.i18n.__;
var _wp$element = wp.element,
    Fragment = _wp$element.Fragment,
    Component = _wp$element.Component;
var _wp$components = wp.components,
    Placeholder = _wp$components.Placeholder,
    Dashicon = _wp$components.Dashicon;

var PostGridImage = function (_Component) {
	_inherits(PostGridImage, _Component);

	function PostGridImage() {
		_classCallCheck(this, PostGridImage);

		var _this = _possibleConstructorReturn(this, (PostGridImage.__proto__ || Object.getPrototypeOf(PostGridImage)).apply(this, arguments));

		_this.state = {
			imageUrl: "",
			imageLoaded: false
		};
		return _this;
	}

	_createClass(PostGridImage, [{
		key: "componentDidUpdate",
		value: function componentDidUpdate(prevProps) {
			if (this.props.imgSize !== prevProps.imgSize) {
				this.setImageUrl();
			}
		}
	}, {
		key: "componentDidMount",
		value: function componentDidMount() {
			var _this2 = this;

			/**
    * Set the image URL on load and when state changes.
    */
			wp.data.subscribe(function () {
				_this2.setImageUrl();
			});
		}
	}, {
		key: "setImageUrl",
		value: function setImageUrl() {
			var imageUrl = this.getImageUrl();

			if (!imageUrl) {
				imageUrl = this.getFullImageSize();
			}

			if (imageUrl) {
				this.setState({
					imageUrl: imageUrl,
					imageLoaded: true
				});
			}
		}
	}, {
		key: "getImageUrl",
		value: function getImageUrl() {
			return __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(
			/* getMedia accepts an image id and returns an object with all the image data. */
			wp.data.select("core").getMedia(this.props.imgID), ["media_details", "sizes", this.props.imgSize /* Get the image slug from the inspector. */
			, "source_url" /* Return the url of the image size. */
			]
			/* A default image url can be passed here. */
			);
		}

		/* Get the full image size value as a placeholder. */

	}, {
		key: "getFullImageSize",
		value: function getFullImageSize() {
			return __WEBPACK_IMPORTED_MODULE_0_lodash_get___default()(
			/* getMedia accepts an image id and returns an object with all the image data. */
			wp.data.select("core").getMedia(this.props.imgID), ["media_details", "sizes", "full" /* Get the full image size. */
			, "source_url" /* Return the url of the full image size. */
			]);
		}
	}, {
		key: "render",
		value: function render() {
			return wp.element.createElement(
				Fragment,
				null,
				wp.element.createElement(
					"div",
					{ className: __WEBPACK_IMPORTED_MODULE_1_classnames___default()("c9-block-post-grid-image") },
					wp.element.createElement(
						"a",
						{ href: this.props.imgLink, target: "_blank", rel: "bookmark" },
						wp.element.createElement("img", {
							src: this.state.imageUrl ? this.state.imageUrl : this.props.imgSizeLandscape,
							alt: this.props.imgAlt,
							className: this.props.imgClass
						})
					),
					/* If we don't have the selected image size, show a warning */
					!this.getImageUrl() && this.state.imageLoaded && "selectimage" !== this.props.imgSize && wp.element.createElement(
						Fragment,
						null,
						wp.element.createElement(
							"div",
							{ className: "c9-post-grid-no-image-icon" },
							wp.element.createElement(Dashicon, { icon: "warning" })
						),
						wp.element.createElement(
							Placeholder,
							{ className: "c9-post-grid-no-image-placeholder" },
							wp.element.createElement(Dashicon, { icon: "info" }),
							wp.element.createElement(
								"div",
								{ className: "components-placeholder__label" },
								__("There is no image generated for the selected image size, so a fallback image size is being used.", "c9-blocks")
							),
							wp.element.createElement(
								"div",
								{ className: "c9-post-grid-image-help" },
								wp.element.createElement(
									"a",
									{
										target: "_blank",
										rel: "noreferrer noopener",
										"aria-label": __("Learn more about image sizes (opens in a new tab)", "c9-blocks"),
										href: "https://github.com"
									},
									__("Learn more ", "c9-blocks"),
									wp.element.createElement(
										"span",
										null,
										"\u2192"
									)
								)
							)
						)
					)
				)
			);
		}
	}]);

	return PostGridImage;
}(Component);

/* harmony default export */ __webpack_exports__["a"] = (PostGridImage);

/***/ }),
/* 394 */
/*!****************************************************************!*\
  !*** ./src/blocks/block-post-grid/components/width-toolbar.js ***!
  \****************************************************************/
/*! exports provided: WidthToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export WidthToolbar */
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;


var DEFAULT_WIDTH_CONTROLS = [{
	icon: "align-center",
	title: __("Narrow Width", "c9-blocks"),
	width: "narrow"
}, {
	icon: "align-wide",
	title: __("Wide Width", "c9-blocks"),
	width: "wide"
}, {
	icon: "align-full-width",
	title: __("Full Width", "c9-blocks"),
	width: "full"
}];

function WidthToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$widthControls = _ref.widthControls,
	    widthControls = _ref$widthControls === undefined ? DEFAULT_WIDTH_CONTROLS : _ref$widthControls;

	function applyOrUnset(width) {
		return function () {
			return onChange(value === width ? undefined : width);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Change Widths", "c9-blocks"),
		controls: widthControls.map(function (control) {
			var width = control.width;

			var isActive = value === width;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(width)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (WidthToolbar);

/***/ }),
/* 395 */
/*!*************************************************************************!*\
  !*** ./src/blocks/block-post-grid/components/vertical-align-toolbar.js ***!
  \*************************************************************************/
/*! exports provided: VerticalAlignmentToolbar, default */
/*! exports used: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export VerticalAlignmentToolbar */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__ = __webpack_require__(/*! ../../../../assets/c9-vertical-alignment-icons */ 28);
/**
 * WordPress dependencies
 */
var __ = wp.i18n.__;
var Toolbar = wp.components.Toolbar;




var DEFAULT_ALIGN_CONTROLS = [{
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].top,
	title: __("Vertical Align Top", "c9-blocks"),
	align: "top"
}, {
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].center,
	title: __("Vertical Align Middle", "c9-blocks"),
	align: "center"
}, {
	icon: __WEBPACK_IMPORTED_MODULE_0__assets_c9_vertical_alignment_icons__["a" /* default */].bottom,
	title: __("Vertical Align Bottom", "c9-blocks"),
	align: "bottom"
}];

function VerticalAlignmentToolbar(_ref) {
	var value = _ref.value,
	    onChange = _ref.onChange,
	    _ref$alignControls = _ref.alignControls,
	    alignControls = _ref$alignControls === undefined ? DEFAULT_ALIGN_CONTROLS : _ref$alignControls;

	function applyOrUnset(align) {
		return function () {
			return onChange(value === align ? undefined : align);
		};
	}

	return wp.element.createElement(Toolbar, {
		label: __("Change Vertical Alignment", "c9-blocks"),
		controls: alignControls.map(function (control) {
			var align = control.align;

			var isActive = value === align;

			return Object.assign({}, control, {
				isActive: isActive,
				onClick: applyOrUnset(align)
			});
		})
	});
}

/* harmony default export */ __webpack_exports__["a"] = (VerticalAlignmentToolbar);

/***/ }),
/* 396 */
/*!******************************************************!*\
  !*** ./src/blocks/block-post-grid/styles/style.scss ***!
  \******************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 397 */
/*!*******************************************************!*\
  !*** ./src/blocks/block-post-grid/styles/editor.scss ***!
  \*******************************************************/
/*! dynamic exports provided */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 398 */
/*!********************************************!*\
  !*** ./node_modules/lodash/isUndefined.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),
/* 399 */
/*!***************************************!*\
  !*** ./node_modules/lodash/pickBy.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! exports used: default */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ 11),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ 52),
    basePickBy = __webpack_require__(/*! ./_basePickBy */ 400),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ 405);

/**
 * Creates an object composed of the `object` properties `predicate` returns
 * truthy for. The predicate is invoked with two arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pickBy(object, _.isNumber);
 * // => { 'a': 1, 'c': 3 }
 */
function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }
  var props = arrayMap(getAllKeysIn(object), function(prop) {
    return [prop];
  });
  predicate = baseIteratee(predicate);
  return basePickBy(object, props, function(value, path) {
    return predicate(value, path[0]);
  });
}

module.exports = pickBy;


/***/ }),
/* 400 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_basePickBy.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ 37),
    baseSet = __webpack_require__(/*! ./_baseSet */ 401),
    castPath = __webpack_require__(/*! ./_castPath */ 22);

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}

module.exports = basePickBy;


/***/ }),
/* 401 */
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseSet.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ 402),
    castPath = __webpack_require__(/*! ./_castPath */ 22),
    isIndex = __webpack_require__(/*! ./_isIndex */ 35),
    isObject = __webpack_require__(/*! ./isObject */ 9),
    toKey = __webpack_require__(/*! ./_toKey */ 13);

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;


/***/ }),
/* 402 */
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ 403),
    eq = __webpack_require__(/*! ./eq */ 30);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),
/* 403 */
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ 404);

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),
/* 404 */
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ 8);

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),
/* 405 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ 58),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ 406),
    keysIn = __webpack_require__(/*! ./keysIn */ 408);

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),
/* 406 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ 59),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ 407),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ 60),
    stubArray = __webpack_require__(/*! ./stubArray */ 61);

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),
/* 407 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ 67);

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),
/* 408 */
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ 62),
    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ 409),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ 21);

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),
/* 409 */
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ 9),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ 66),
    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ 410);

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),
/* 410 */
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,